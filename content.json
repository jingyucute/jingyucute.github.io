{"meta":{"title":"Jingyu_Blog","subtitle":"","description":"永无止境","author":"Jingyu","url":"https://jingyu.life","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-07-15T07:35:18.559Z","updated":"2020-07-03T17:55:10.842Z","comments":true,"path":"404.html","permalink":"https://jingyu.life/404","excerpt":"","text":""},{"title":"我就是我, 我如我是","date":"2020-06-20T06:03:26.000Z","updated":"2020-07-29T07:51:10.206Z","comments":false,"path":"about/index.html","permalink":"https://jingyu.life/about/","excerpt":"","text":"关于我 ​ 搭建自己的博客， 现在最简单的目的就是记录一些工作中遇到的问题和自己的所思所感。 ​ 学习，永无止境。学习的过程，是自己独立思考和解决问题相统一的。 ​ 我是Jingyu， 努力成为一名优秀的工程师。 所谓顺其自然，有时不过是自欺欺人， 唯有竭尽全力，方能不负初心。 努力不一定带来成功， 但一定会带来成长。 不能铭记过去的人，注定要重蹈覆辙。 加油吧， 骚年！ 时间轴 2020 06/20 搭建自己的博客 05/20 20考研复试落水， 迷茫中 2019 06/30 离职, 参加20考研 2018 06/25 北京极宇周天， 正式入职 06/13 学校毕业，出发北京"},{"title":"分类","date":"2020-06-20T08:39:54.000Z","updated":"2020-06-30T09:18:16.367Z","comments":false,"path":"categories/index.html","permalink":"https://jingyu.life/categories/","excerpt":"","text":""},{"title":"这里我是我整理的书籍","date":"2020-06-19T16:00:00.000Z","updated":"2020-07-07T07:28:54.931Z","comments":false,"path":"books/index.html","permalink":"https://jingyu.life/books/","excerpt":"","text":"技术类 《Head First 设计模式》-- [美] 弗里曼 文学类 《失控：全人类的最终命运和结局》-- 凯文·凯利 《自卑与超越》-- (奥地利)阿弗雷德·阿德勒"},{"title":"标签","date":"2020-06-20T08:40:08.000Z","updated":"2020-07-01T07:37:27.164Z","comments":false,"path":"tags/index.html","permalink":"https://jingyu.life/tags/","excerpt":"","text":""},{"title":"友链","date":"2020-06-25T07:08:13.000Z","updated":"2020-07-04T20:09:05.060Z","comments":false,"path":"friends/index.html","permalink":"https://jingyu.life/friends/","excerpt":"","text":""}],"posts":[{"title":"Docker 基础篇","slug":"docker/basic","date":"2020-07-31T08:40:08.000Z","updated":"2020-08-01T09:22:24.592Z","comments":false,"path":"2020/07/31/docker/basic/","link":"","permalink":"https://jingyu.life/2020/07/31/docker/basic/","excerpt":"Docker是一种运行在Linux和Windows上的软件，用于创建、管理和编排容器","text":"Docker是一种运行在Linux和Windows上的软件，用于创建、管理和编排容器 安装 Ubuntu 移除旧版本 $ sudo apt-get remove docker \\ docker-engine \\ docker.io Apt 安装 # 安装https传输的软件包和ca证书$ sudo apt-get update$ sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common # 添加软件源的 GPG 密钥$ curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -# 官方源# $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -# 向 source.list 中添加 Docker 软件源$ sudo add-apt-repository \\ \"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \\ $(lsb_release -cs) \\ stable\"# 官方源# $ sudo add-apt-repository \\# \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\# $(lsb_release -cs) \\# stable\" Docker CE 安装、启动 # 安装$ sudo apt-get update$ sudo apt-get install docker-ce# 也可以通过脚本自动化安装$ curl -fsSL get.docker.com -o get-docker.sh$ sudo sh get-docker.sh --mirror Aliyun# $ sudo sh get-docker.sh --mirror AzureChinaCloud# 启动$ sudo systemctl enable docker$ sudo systemctl start docker 建立docker用户组 # 建立用户组$ sudo groupadd docker# 将当前用户添加到docker组$ sudo usermod -aG docker $USER MacOS HomeBrew $ brew cask install docker 手动下载安装 如果需要手动下载，请点击以下链接下载 Stable 或 Edge 版本的 Docker Desktop for Mac。 如同 macOS 其它软件一样，安装也非常简单，双击下载的 .dmg 文件，然后将那只叫 Moby 的鲸鱼图标拖拽到 Application 文件夹即可（其间需要输入用户密码）。 镜像 搜索$ docker search ubuntu 获取镜像# 格式 docker (image) pull &lt;Registry&gt;/&lt;userName of Orgnization&gt;/&lt;Repository&gt;:&lt;Tag&gt;# eg$ docker pull ubuntu:latest 列举镜像# 列举格式 $ docker images &lt;repository&gt;:&lt;tag&gt;# filter 参数过滤， 列举所有tag 为latest的镜像 (dangling, before, since, label, reference)$ docker image ls --filter reference=\"*:latest\"# 格式化显示, 注意格式(大小写、标点)$ docker images --format \"&#123;&#123;.Repository&#125;&#125;: &#123;&#123;.Size&#125;&#125;\"$ docker image ls --format \"table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Repository&#125;&#125;\\t&#123;&#123;.Tag&#125;&#125;\"# 删除悬虚镜像$ docker image prune 删除本地镜像# 删除格式， 其中镜像是镜像ID(长或短)、镜像名、镜像摘要$ docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]# 删除所有名为redis的镜像$ docker rmi $(docker image ls -q redis) 更新镜像当我们运行一个容器的时候（如果不使用卷的话），我们做的任何文件修改都会被记录于容器存储层里。而 Docker 提供了一个 docker commit 命令，可以将容器的存储层保存下来成为镜像。换句话说，就是在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。 # 产看容器内的变化# 格式 docker diff &lt;容器ID或容器名&gt;$ docker diff webserver # 格式 $ docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]] # 例如, 在nginx容器中修改内容后 $ docker commit \\ --author \"jingyucute@gmail.com\" \\ --message \"update content\" \\ webserver \\ nginx:v2 # 或者简写$ docker commit \\ -a=\"jingyucute@gmail.com\" \\ -m=\"update content\" \\ webserver \\ nginx:v2 # 产看镜像内的提交记录# 格式 docker history &lt;仓库名&gt;[:&lt;标签&gt;$ docker history nginx:v2 特别注意 docker commit 命令除了学习之外，还有一些特殊的应用场合，比如被入侵后保存现场等。但是，不要使用 docker commit 定制镜像，定制镜像应该使用 Dockerfile 来完成。使用 docker commit 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为 黑箱镜像，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体的操作。这种黑箱镜像的维护工作是非常痛苦的。 使用Dockerfile制作镜像# 格式 docker build [选项] &lt;上下文路径/URL/-&gt;$ docker build -t &lt;repository&gt;:&lt;tag&gt; .# 直接从Git repo中构建$ docker build https://github.com/twang2218/gitlab-ce-zh.git# 用给定的 tar 压缩包构建， 下载后会自动解压$ docker build http://server/context.tar.gz# 标准输入构建$ docker build - &lt; context.tar.gz$ docker build - &lt; Dockerfile$ cat Dockerfile | docker build - 容器 查看# 查看正在运行的容器, 加上-a参数表示查看所有的容器(包括退出的)$ docker container ls [-a]$ docker ps [-a] 启动# 从镜像中创建并启动一个容器 , 参数自己查吧# 格式 docker &lt;container&gt; run [--options]# 交互式运行ubuntu容器# -i: 交互式操作。# -t: 终端。# ubuntu: ubuntu 镜像。# /bin/bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash$ docker run -it ubuntu --name myOS /bin/bash# 守护态运行一个容器 # 格式 docker &lt;container&gt; run -d $ docker run -d ubuntu /bin/sh -c \"while true; do echo hello world; sleep 1; done\"# 启动一个停止了的容器# 格式 docker &lt;container&gt; start &lt;Container-name-or-ID&gt;$ docker start myOS 重启# 格式 docker &lt;container&gt; restart &lt;Container-name-or-ID&gt;$ docker restart myOS 查看容器输出# 格式 docker &lt;container&gt; logs &lt;Container-name-or-ID&gt;$ docker logs myOS 停止# 格式 docker &lt;container&gt; stop &lt;Container-name-or-ID&gt;$ docker stop myOS 删除# 删除的容器不能是运行状态，可以先停止再删除, 也可以通过加上 -f 参数强删(不推荐)# 格式 docker container rm &lt;Container-name-or-ID&gt; [-f]$ docker rm &lt;Container-name-or-ID&gt;# 清楚所有停止状态的容器$ docker container prune 进入容器# 两种方式, 推荐使用方式二# 方式一 docker attach &lt;Container-name-or-ID&gt;# 这种方式退出终端，会导致容器停止$ docker attach myOS# 方式一 docker attach &lt;Container-name-or-ID&gt;# 这种方式退出终端，会导致容器停止$ docker attach myOS# 方式二 docker exec -it &lt;Container-name-or-ID&gt; bash# 这种方式退出终端，容器不会停止$ docker exec -it myOS bash Dockerfile参数说明 FROM所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。FROM 就是指定 基础镜像，因此一个 Dockerfile 中 FROM 是必备的指令，并且必须是第一条指令。 FROM nginx... RUNRUN 指令是用来执行命令行命令的。通常有两种形式： ​ shell格式 RUN &lt;命令&gt; (常用格式) RUN echo '&lt;h1&gt;Hello, Docker!&lt;/h1&gt;' &gt; /usr/share/nginx/html/index.html ​ exec格式 RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;] . 这种形式好比函数调用 RUN [\"./test.php\", \"dev\", \"offline\"] # ====RUN ./test.php dev offline 注意 这里的RUN要尽量少， 多了会导致镜像臃肿， 因为镜像是按照层来构建的，一个RUN就是一层。所以可以使用 &amp;&amp; 来链接命令，使用 \\来换行 举个例子： FROM debian:stretchRUN apt-get updateRUN apt-get install -y gcc libc6-dev make wgetRUN wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\"RUN mkdir -p /usr/src/redisRUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1RUN make -C /usr/src/redisRUN make -C /usr/src/redis install# ---------------------------------------------------------&gt; FROM debian:stretchRUN buildDeps='gcc libc6-dev make wget' \\ &amp;&amp; apt-get update \\ &amp;&amp; apt-get install -y $buildDeps \\ &amp;&amp; wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\" \\ &amp;&amp; mkdir -p /usr/src/redis \\ &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\ &amp;&amp; make -C /usr/src/redis \\ &amp;&amp; make -C /usr/src/redis install \\ &amp;&amp; rm -rf /var/lib/apt/lists/* \\ &amp;&amp; rm redis.tar.gz \\ &amp;&amp; rm -r /usr/src/redis \\ &amp;&amp; apt-get purge -y --auto-remove $buildDeps COPYCOPY指令将从构建上下文目录中 &lt;源路径&gt; 的文件/目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置 # 格式 COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;# COPY [--chown=&lt;user&gt;:&lt;group&gt;] [\"&lt;源路径1&gt;\",... \"&lt;目标路径&gt;\"] COPY hom?.txt /mydir/# 改变文件的所属用户和用户组 --chown=&lt;user&gt;:&lt;group&gt;COPY --chown=55:mygroup files* /mydir/ ADDADD 指令和 COPY 的格式和性质基本一致(同样需求下， 推荐使用COPY)。 ADD 的优点：在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;。 ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。 在 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 COPY 指令，仅在需要自动解压缩的场合使用 ADD # 改变文件的所属用户和用户组 --chown=&lt;user&gt;:&lt;group&gt;ADD --chown=55:mygroup files* /mydir/ CMDCMD 指令的格式和 RUN 相似。 CMD 在docker run 时运行。 RUN 是在 docker build。 CMD也有两种形式 # shell 格式：CMD &lt;命令&gt;# exec 格式：CMD [\"可执行文件\", \"参数1\", \"参数2\"...]CMD echo $HOME# ====CMD [ \"sh\", \"-c\", \"echo $HOME\" ] Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 systemd 去启动后台服务，容器内没有后台服务的概念。 # CMD service nginx start# 这个命令是将nginx作为后台服务来运行的， 应该写为一下形式CMD [\"nginx\", \"-g\", \"daemon off;\"] ENTRYPOINTENTRYPOINT 的格式和 RUN 指令格式一样，分为 exec 格式和 shell 格式。 ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数。ENTRYPOINT 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过 docker run 的参数 --entrypoint 来指定。 当指定了 ENTRYPOINT 后，CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令。就可以理解为&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot; # 格式 ENTRYPOINT [\"&lt;executeable&gt;\",\"&lt;param1&gt;\",\"&lt;param2&gt;\",...] ENV设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。 # 格式 ENV &lt;key&gt; &lt;value&gt; # ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...ENV NODE_VERSION 7.2.0RUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" \\ &amp;&amp; curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" ARGARG 构建参数和 ENV 的效果一样，都是设置环境变量。所不同的是，ARG 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。 # 格式 ARG &lt;参数名&gt;[=&lt;默认值&gt;] 该默认值可以在构建命令 docker build 中用 --build-arg &lt;参数名&gt;=&lt;值&gt; 来覆盖。 VOLUME容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中 # 格式 VOLUME [\"&lt;路径1&gt;\", \"&lt;路径2&gt;\"...]# VOLUME &lt;路径&gt;VOLUME /data docker run -d -v mydata:/data 在这行命令中，就使用了 mydata 这个命名卷挂载到了 /data 这个位置，替代了 Dockerfile 中定义的匿名卷的挂载配置。 EXPOSEEXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。 帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。 在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。 # 格式 EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...] 要将 EXPOSE 和在运行时使用 -p &lt;宿主端口&gt;:&lt;容器端口&gt; 区分开来。-p，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。 WORKDIR使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。 # 格式 WORKDIR &lt;工作目录路径&gt; 谈一下误区 初学者将Dockerfile 等同于 Shell 脚本来书写，会出现一下错误 RUN cd /appRUN echo \"hello\" &gt; world.txt 将这个 Dockerfile 进行构建镜像运行后，会发现找不到 /app/world.txt 文件，或者其内容不是 hello。 原因: 在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；在 Dockerfile 中，这两行 RUN 命令的执行环境根本不同，是两个完全不同的容器 每一个 RUN 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 RUN cd /app 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。 USREUSER 指令和 WORKDIR 相似，都是改变环境状态并影响以后的层。WORKDIR 是改变工作目录，USER 则是改变之后层的执行 RUN, CMD 以及 ENTRYPOINT 这类命令的身份(用户和用户组必须提前已经存在)。 # 格式 USER &lt;用户名&gt;[:&lt;用户组&gt;] -","categories":[{"name":"运维","slug":"运维","permalink":"https://jingyu.life/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Docker","slug":"docker","permalink":"https://jingyu.life/tags/docker/"}]},{"title":"常用工具网址","slug":"tool-assistant","date":"2020-07-28T06:34:06.000Z","updated":"2020-08-01T09:03:11.670Z","comments":false,"path":"2020/07/28/tool-assistant/","link":"","permalink":"https://jingyu.life/2020/07/28/tool-assistant/","excerpt":"这里记录一些常用的工具、网址等等","text":"这里记录一些常用的工具、网址等等 网址 我告诉你 简易图标制作 svg简易制作 一个很有意思的小站 工具 Typora V2rayU","categories":[{"name":"工具","slug":"工具","permalink":"https://jingyu.life/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Helper","slug":"helper","permalink":"https://jingyu.life/tags/helper/"}]},{"title":"nvm 使用说明","slug":"nvm-usage","date":"2020-07-15T04:04:41.000Z","updated":"2020-07-31T09:16:57.957Z","comments":false,"path":"2020/07/15/nvm-usage/","link":"","permalink":"https://jingyu.life/2020/07/15/nvm-usage/","excerpt":"简介 Nvm （Node Version Manager） 是node.js 的版本管理器，用它可以方便的在机器上安装并维护多个node版本。","text":"简介 Nvm （Node Version Manager） 是node.js 的版本管理器，用它可以方便的在机器上安装并维护多个node版本。 1、安装和更新脚本安装 下载并执行 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash 或者 wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash 然后配置环境变量，将下面的内容添加到配置文件(~/.bash_profile，~/.zshrc，~/.profile，或~/.bashrc) export NVM_DIR=\"$([ -z \"$&#123;XDG_CONFIG_HOME-&#125;\" ] &amp;&amp; printf %s \"$&#123;HOME&#125;/.nvm\" || printf %s \"$&#123;XDG_CONFIG_HOME&#125;/nvm\")\"[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\" # This loads nvm git 安装 1、克隆远程仓库到本地 先 cd ~ 切换到家目录， 然后执行git clone https://github.com/nvm-sh/nvm.git .nvm 2、进入到.nvm目录，切换到最近的版本 cd ~/.nvmgit checkout v0.35.3 3、 激活nvm bash nvm.sh 4、 配置环境变量，文件位置同上，导入内容如下 export NVM_DIR=\"$HOME/.nvm\"[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\" # This loads nvm[ -s \"$NVM_DIR/bash_completion\" ] &amp;&amp; \\. \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion nvm更新 1、切换到$NVM_DIR (上面在环境变量中配置过了) 2、拉取最新的提交节点 3、切换到最新的版本 4、激活新版本 可以直接在命令行中执行一下内容 ( cd \"$NVM_DIR\" git fetch --tags origin git checkout `git describe --abbrev=0 --tags --match \"v[0-9]*\" $(git rev-list --tags --max-count=1)`) &amp;&amp; bash \"$NVM_DIR/nvm.sh\" 2、相关使用# 查看已经安装的版本nvm ls# 查看可以安装的所有版本nvm ls-remote# 查看所有长期支持版本（LTS）nvm ls-remote --lts# 查看最新ltsnvm version-remote --lts nvm version-remote lts/erbium# 安装最新ltsnvm install --lts# 安装或卸载指定node版本nvm install v12.18.2 nvm uninstall v12.18.2# 使用nodenvm use v12.18.2# 设置或取消别名nvm alias product v12.18.2 nvm unalias product# 安装io.jsnvm install iojs# 查看node安装位置nvm which v12.18.2 本文参考地址 https://github.com/nvm-sh/nvm","categories":[{"name":"开发","slug":"开发","permalink":"https://jingyu.life/categories/%E5%BC%80%E5%8F%91/"},{"name":"环境","slug":"开发/环境","permalink":"https://jingyu.life/categories/%E5%BC%80%E5%8F%91/%E7%8E%AF%E5%A2%83/"}],"tags":[{"name":"Nvm","slug":"nvm","permalink":"https://jingyu.life/tags/nvm/"},{"name":"Node","slug":"node","permalink":"https://jingyu.life/tags/node/"}]},{"title":"Typora快捷键使用(Mac)","slug":"typora-usage","date":"2020-06-24T16:00:00.000Z","updated":"2020-08-01T09:03:07.770Z","comments":false,"path":"2020/06/25/typora-usage/","link":"","permalink":"https://jingyu.life/2020/06/25/typora-usage/","excerpt":"简介 刚开始搭建自己的博客， 学习了一下Markdown语法和Typora，这里记录了一下相关快捷键的使用。","text":"简介 刚开始搭建自己的博客， 学习了一下Markdown语法和Typora，这里记录了一下相关快捷键的使用。 1、基本操作1.1 生成目录 语法 [toc] 效果图 [toc] 1.2 标题 语法 # 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 快捷键 Command + [1, 2, 3, 4, 5, 6] 分别对应几级标题 1.3 引用 语法 &gt; 引用内容1 &gt;&gt; 引用内容2 &gt;&gt; 引用内容3 快捷键 Command + Option + Q 效果图 引用内容1 引用内容2 引用内容3 1.4 文本居中 语法 &lt;center&gt;居中文本&lt;/center&gt; 效果图 居中文本 2 、code使用2.1 单行代码 语法 &#96;String str &#x3D; &quot;Hello Typora&quot;;&#96;&#96;&#96;String str &#x3D; &quot;Hello Typora&quot;;&#96;&#96; 效果图 String str = &quot;Hello Typora&quot;; 2.2 多行代码 语法 输入 ```[language] + enter或者 ``` + enter , 然后选择语言类型 快捷键 Command + Option + C 效果图 int a = 1;int b = 2;int c = 3;count&lt;&lt;\"a=\"&lt;&lt;a&lt;&lt;\", b=\"&lt;&lt;b&lt;&lt;\", c=\"&lt;&lt;c&lt;&lt;endl; 3、列表3.1 无序列表 语法 * (+) [space]- (+) [space]+ (+) [space] 快捷键 Command + Option + U 效果图 类别一 类别二 类别三 3.2 有序列表 语法 1. (+) [space]2. (+) [space]3. (+) [space] 快捷键 Command + Option + O 效果图 类别1 类别2 类别3 3.3 任务列表 语法 形式: - [ ] 文本 为未选中文本 - [x] 文本 为选中文本注意: -和[之间有空格, [和]之间有空格, ]和文本之间有空格 快捷键 Command + Option + X 效果图 钓鱼 编程 散步 游戏 电影 3.4 表格 语法 |姓名|性别|年龄|手机号||:---|:--:|:--:|:---:||张三|男|21|18975346876||李四|女|23|17789548964||王五|男|25|15876513546| 快捷键 Command + Option + T 效果图 姓名 性别 年龄 手机号 张三 男 21 18975346876 李四 女 23 17789548964 王五 男 25 15876513546 4、链接4.1 图片 语法 本地图片 直接拖进来 网络图片 ![杭州西湖.jpg](https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1593110861170&amp;di=6651925eaab36bfeb23347aa51a12cb7&amp;imgtype=0&amp;src=http%3A%2F%2Fa3.att.hudong.com%2F14%2F75%2F01300000164186121366756803686.jpg) 效果图 本地 网络 4.2 文本链接 语法 不显示链接网址 [百度](https:&#x2F;&#x2F;www.baidu.com) 只显示链接url &lt;https:&#x2F;&#x2F;www.baidu.com&gt; 快捷键 Command + K 效果图 不显示地址 百度 只显示url https://www.baidu.com 5、其它快捷键5.1 斜体 语法 *斜体文字1*_斜体文字2_ 快捷键 Command + I 效果图 斜体文字1 斜体文字2 5.2 粗体 语法 **粗体文字1**__粗体文字2__ 快捷键 Command + B 效果图 粗体文字1 粗体文字2 5.3 加粗斜体 语法 ***加粗斜体文字1***___加粗斜体文字2___ 效果图 加粗斜体文字1 加粗斜体文字2 5.4 下划线 语法 &lt;u&gt;下划线文字&lt;/u&gt; 快捷键 Command + U 效果图 下划线文字 5.5 删除线 语法 ~~删除文字~~ 快捷键 Control + Shift + ` 效果图 删除文字 5.6 分割线 语法 --- (+) [enter]*** (+) [enter] 快捷键 Command (+) Option (+) - 效果图 5.7 脚注 语法 Typora1[^1]Typora2[^2] 快捷键 Command + Option + R 效果图 Typora^1 Typora2^2 5.8 符号输入 语法 \\\\ 反斜线\\&#96; 反引号\\* 星号\\_ 底线\\&#123; \\&#125; 花括号\\[ \\] 方括号\\( \\) 括弧\\# 井字号\\+ 加号\\- 减号\\. 英文句点\\! 惊叹号 效果图 \\ 5.9 特殊字符 语法 &amp;copy; 版权 &amp;reg; 注册商标&amp;trade; 商标&amp;nbsp; 空格&amp; 和号&quot; 引号&amp;apos; 撇号&lt; 小于号&gt; 大于号&amp;ne; 不等号&amp;le; 小于等于&amp;ge; 大于等于&amp;cent; 分&amp;pound; 磅&amp;euro; 欧元&amp;yen; 元&amp;sect; 节&amp;times; 乘号&amp;divide; 除号&amp;plusmn; 正负号 效果图 &copy; &pound; &apos; &euro; 5.10 表情 语法 :smiley: 效果图 :smile: :unamused:","categories":[{"name":"工具","slug":"工具","permalink":"https://jingyu.life/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Typora","slug":"typora","permalink":"https://jingyu.life/tags/typora/"},{"name":"MarkDown","slug":"markdown","permalink":"https://jingyu.life/tags/markdown/"}]}],"categories":[{"name":"运维","slug":"运维","permalink":"https://jingyu.life/categories/%E8%BF%90%E7%BB%B4/"},{"name":"工具","slug":"工具","permalink":"https://jingyu.life/categories/%E5%B7%A5%E5%85%B7/"},{"name":"开发","slug":"开发","permalink":"https://jingyu.life/categories/%E5%BC%80%E5%8F%91/"},{"name":"环境","slug":"开发/环境","permalink":"https://jingyu.life/categories/%E5%BC%80%E5%8F%91/%E7%8E%AF%E5%A2%83/"}],"tags":[{"name":"Docker","slug":"docker","permalink":"https://jingyu.life/tags/docker/"},{"name":"Helper","slug":"helper","permalink":"https://jingyu.life/tags/helper/"},{"name":"Nvm","slug":"nvm","permalink":"https://jingyu.life/tags/nvm/"},{"name":"Node","slug":"node","permalink":"https://jingyu.life/tags/node/"},{"name":"Typora","slug":"typora","permalink":"https://jingyu.life/tags/typora/"},{"name":"MarkDown","slug":"markdown","permalink":"https://jingyu.life/tags/markdown/"}]}