<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql中的时间函数以及格式问题</title>
      <link href="/2020/09/14/mysql/time-func/"/>
      <url>/2020/09/14/mysql/time-func/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前在开发过程中， 碰到数据库关于时间的问题，总是要去搜索一下， 自己简单记录一下常用的吧，后面遇到啥新鲜的玩意， 再加上。</p></blockquote><a id="more"></a><h3 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h3><ul><li><h4 id="获取当前日期和时间"><a href="#获取当前日期和时间" class="headerlink" title="获取当前日期和时间"></a>获取当前日期和时间</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT CURDATE(), CURRENT_DATE, CURTIME(), CURRENT_TIME;</span><br><span class="line">+------------+--------------+-----------+--------------+</span><br><span class="line">| CURDATE()  | CURRENT_DATE | CURTIME() | CURRENT_TIME |</span><br><span class="line">+------------+--------------+-----------+--------------+</span><br><span class="line">| 2020-09-14 | 2020-09-14   | 14:34:00  | 14:34:00     |</span><br><span class="line">+------------+--------------+-----------+--------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT NOW(), CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP;</span><br><span class="line">+---------------------+---------------------+---------------------+</span><br><span class="line">| NOW()               | CURRENT_TIMESTAMP() | CURRENT_TIMESTAMP   |</span><br><span class="line">+---------------------+---------------------+---------------------+</span><br><span class="line">| 2020-09-14 14:35:23 | 2020-09-14 14:35:23 | 2020-09-14 14:35:23 |</span><br><span class="line">+---------------------+---------------------+---------------------+</span><br><span class="line"></span><br><span class="line">-- 获取系统时间</span><br><span class="line">mysql&gt; SELECT SYSDATE();</span><br><span class="line">+---------------------+</span><br><span class="line">| SYSDATE()           |</span><br><span class="line">+---------------------+</span><br><span class="line">| 2020-09-14 15:20:25 |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure></li><li><h4 id="获取当前时间的各个信息，如月份、一年第几周"><a href="#获取当前时间的各个信息，如月份、一年第几周" class="headerlink" title="获取当前时间的各个信息，如月份、一年第几周"></a>获取当前时间的各个信息，如月份、一年第几周</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT WEEK(NOW()), WEEK(&#39;2020-01-01&#39;), DAY(CURRENT_TIMESTAMP()), DAY(&#39;2019-12-12 13:23:57&#39;), YEAR(NOW()), MONTH(NOW());</span><br><span class="line">+-------------+--------------------+--------------------------+----------------------------+-------------+--------------+</span><br><span class="line">| WEEK(NOW()) | WEEK(&#39;2020-01-01&#39;) | DAY(CURRENT_TIMESTAMP()) | DAY(&#39;2019-12-12 13:23:57&#39;) | YEAR(NOW()) | MONTH(NOW()) |</span><br><span class="line">+-------------+--------------------+--------------------------+----------------------------+-------------+--------------+</span><br><span class="line">|          37 |                  0 |                       14 |                         12 |        2020 |            9 |</span><br><span class="line">+-------------+--------------------+--------------------------+----------------------------+-------------+--------------+</span><br></pre></td></tr></table></figure></li><li><h4 id="关于时间戳转换"><a href="#关于时间戳转换" class="headerlink" title="关于时间戳转换"></a>关于时间戳转换</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT UNIX_TIMESTAMP(), UNIX_TIMESTAMP(&#39;2020-05-01 13:29:57&#39;), FROM_UNIXTIME(1600066964), FROM_UNIXTIME(1600066964, &#39;%m&#x2F;%d&#x2F;%Y&#39;);</span><br><span class="line">+------------------+---------------------------------------+---------------------------+---------------------------------------+</span><br><span class="line">| UNIX_TIMESTAMP() | UNIX_TIMESTAMP(&#39;2020-05-01 13:29:57&#39;) | FROM_UNIXTIME(1600066964) | FROM_UNIXTIME(1600066964, &#39;%m&#x2F;%d&#x2F;%Y&#39;) |</span><br><span class="line">+------------------+---------------------------------------+---------------------------+---------------------------------------+</span><br><span class="line">|       1600067106 |                            1588310997 | 2020-09-14 15:02:44       | 09&#x2F;14&#x2F;2020                            |</span><br><span class="line">+------------------+---------------------------------------+---------------------------+---------------------------------------+</span><br></pre></td></tr></table></figure></li><li><h4 id="自己提取时间中的信息"><a href="#自己提取时间中的信息" class="headerlink" title="自己提取时间中的信息"></a>自己提取时间中的信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 格式 SELECT EXTRACT(unit FROM date)</span><br><span class="line">-- eg.SELECT EXTRACT((SECOND|MINUTE|HOUR|DAY|WEEK|MONTH|YEAR|MICROSECOND|YEAR_DAY) FROM NOW())</span><br><span class="line">mysql&gt; select extract(MONTH FROM NOW()), EXTRACT(YEAR FROM &#39;2019-12-31&#39;), EXTRACT(YEAR_MONTH FROM &#39;2019-12-31&#39;);</span><br><span class="line">+---------------------------+---------------------------------+---------------------------------------+</span><br><span class="line">| extract(MONTH FROM NOW()) | EXTRACT(YEAR FROM &#39;2019-12-31&#39;) | EXTRACT(YEAR_MONTH FROM &#39;2019-12-31&#39;) |</span><br><span class="line">+---------------------------+---------------------------------+---------------------------------------+</span><br><span class="line">|                         9 |                            2019 |                                201912 |</span><br><span class="line">+---------------------------+---------------------------------+---------------------------------------+</span><br></pre></td></tr></table></figure></li><li><h4 id="日期运算"><a href="#日期运算" class="headerlink" title="日期运算"></a>日期运算</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- DATE_ADD(date,INTERVAL expr type) 日期加上时间区间</span><br><span class="line">-- eg. DATE_ADD(now(), INTERVAL expr(YEAR|DAY|...|YEAR_MONTH|DAY_HOUR|DAY_MINUTE|DAY_SECOND|HOUR_SECOND))</span><br><span class="line">mysql&gt;  SELECT DATE_ADD(&#39;2020-05-01 00:01:01&#39;, interval &#39;1 1:20:29&#39; day_second);</span><br><span class="line">+------------------------------------------------------------------+</span><br><span class="line">| DATE_ADD(&#39;2020-05-01 00:01:01&#39;, interval &#39;1 1:20:29&#39; day_second) |</span><br><span class="line">+------------------------------------------------------------------+</span><br><span class="line">| 2020-05-02 01:21:30                                              |</span><br><span class="line">+------------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">-- DATE_SUB(date,INTERVAL expr type) 日期减去时间区间</span><br><span class="line">mysql&gt;  SELECT DATE_SUB(&#39;2020-05-02 01:21:30 &#39;, interval &#39;1 1:20:29&#39; day_second);</span><br><span class="line">+-------------------------------------------------------------------+</span><br><span class="line">| DATE_SUB(&#39;2020-05-02 01:21:30 &#39;, interval &#39;1 1:20:29&#39; day_second) |</span><br><span class="line">+-------------------------------------------------------------------+</span><br><span class="line">| 2020-05-01 00:01:01                                               |</span><br><span class="line">+-------------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">-- DATEDIFF(date1, date2) 日期相减</span><br><span class="line">mysql&gt; SELECT DATEDIFF(&#39;2020-05-03&#39;, &#39;2020-05-01&#39;), DATEDIFF(&#39;2020-05-03 12:23:33&#39;, &#39;2020-05-01 12:22:33&#39;);</span><br><span class="line">+--------------------------------------+--------------------------------------------------------+</span><br><span class="line">| DATEDIFF(&#39;2020-05-03&#39;, &#39;2020-05-01&#39;) | DATEDIFF(&#39;2020-05-03 12:23:33&#39;, &#39;2020-05-01 12:22:33&#39;) |</span><br><span class="line">+--------------------------------------+--------------------------------------------------------+</span><br><span class="line">|                                    2 |                                                      2 |</span><br><span class="line">+--------------------------------------+--------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">-- TIMEDIFF(time1, time2)</span><br><span class="line">-- 注意两个日期类型的相减，默认是0</span><br><span class="line">mysql&gt; SELECT  TIMEDIFF(&#39;12:23:33&#39;, &#39;12:22:23&#39;),TIMEDIFF(&#39;2020-05-03&#39;, &#39;2020-05-01&#39;), TIMEDIFF(&#39;2020-05-03 12:23:33&#39;, &#39;2020-05-01 12:22:33&#39;);</span><br><span class="line">+----------------------------------+--------------------------------------+--------------------------------------------------------+</span><br><span class="line">| TIMEDIFF(&#39;12:23:33&#39;, &#39;12:22:23&#39;) | TIMEDIFF(&#39;2020-05-03&#39;, &#39;2020-05-01&#39;) | TIMEDIFF(&#39;2020-05-03 12:23:33&#39;, &#39;2020-05-01 12:22:33&#39;) |</span><br><span class="line">+----------------------------------+--------------------------------------+--------------------------------------------------------+</span><br><span class="line">| 00:01:10                         | 00:00:00                             | 48:01:00                                               |</span><br><span class="line">+----------------------------------+--------------------------------------+--------------------------------------------------------+</span><br></pre></td></tr></table></figure></li></ul><h3 id="时间格式转化"><a href="#时间格式转化" class="headerlink" title="时间格式转化"></a>时间格式转化</h3><ul><li><h4 id="STR-TO-DATE"><a href="#STR-TO-DATE" class="headerlink" title="STR_TO_DATE()"></a>STR_TO_DATE()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 将字符串格式的时间转化为日期类型</span><br><span class="line">-- STR_TO_DATE(str, format)</span><br><span class="line">mysql&gt; SELECT  STR_TO_DATE(&#39;08,23,20&#39;, &#39;%m,%d,%y&#39;) , STR_TO_DATE(&#39;05&#x2F;21&#x2F;2020 12:23:33&#39;, &#39;%m&#x2F;%d&#x2F;%Y %H:%i:%s&#39;), STR_TO_DATE(&#39;21,5,2020 extra characters&#39;,&#39;%d,%m,%Y&#39;);</span><br><span class="line">+-------------------------------------+---------------------------------------------------------+------------------------------------------------------+</span><br><span class="line">| STR_TO_DATE(&#39;08,23,20&#39;, &#39;%m,%d,%y&#39;) | STR_TO_DATE(&#39;05&#x2F;21&#x2F;2020 12:23:33&#39;, &#39;%m&#x2F;%d&#x2F;%Y %H:%i:%s&#39;) | STR_TO_DATE(&#39;21,5,2020 extra characters&#39;,&#39;%d,%m,%Y&#39;) |</span><br><span class="line">+-------------------------------------+---------------------------------------------------------+------------------------------------------------------+</span><br><span class="line">| 2020-08-23                          | 2020-05-21 12:23:33                                     | 2020-05-21                                           |</span><br><span class="line">+-------------------------------------+---------------------------------------------------------+------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">-- 看看格式化值为NULL的例子</span><br><span class="line">mysql&gt; SELECT STR_TO_DATE(&#39;2020&#39;,&#39;%Y&#39;), STR_TO_DATE(&#39;202005&#39;, &quot;%Y%m&quot;) , STR_TO_DATE(&#39;11&#39;, &#39;%h&#39;), STR_TO_DATE(&#39;122223&#39;, &#39;%H%i%s&#39;);</span><br><span class="line">+--------------------------+-------------------------------+-------------------------+---------------------------------+</span><br><span class="line">| STR_TO_DATE(&#39;2020&#39;,&#39;%Y&#39;) | STR_TO_DATE(&#39;202005&#39;, &quot;%Y%m&quot;) | STR_TO_DATE(&#39;11&#39;, &#39;%h&#39;) | STR_TO_DATE(&#39;122223&#39;, &#39;%H%i%s&#39;) |</span><br><span class="line">+--------------------------+-------------------------------+-------------------------+---------------------------------+</span><br><span class="line">| NULL                     | NULL                          | NULL                    | NULL                            |</span><br><span class="line">+--------------------------+-------------------------------+-------------------------+---------------------------------+</span><br></pre></td></tr></table></figure></li><li><h4 id="DATE-FROMAT"><a href="#DATE-FROMAT" class="headerlink" title="DATE_FROMAT()"></a>DATE_FROMAT()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 将标准格式转化为自己想要的格式</span><br><span class="line">-- DATE_FORMAT(date, format)</span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(now(), &#39;%m&#x2F;%d&#x2F;%Y&#39;), DATE_FORMAT(&#39;2019-05-01 12:22:33&#39;, &#39;%m,%d,%Y, %H-%i-%s&#39;);</span><br><span class="line">+--------------------------------+----------------------------------------------------------+</span><br><span class="line">| DATE_FORMAT(now(), &#39;%m&#x2F;%d&#x2F;%Y&#39;) | DATE_FORMAT(&#39;2019-05-01 12:22:33&#39;, &#39;%m,%d,%Y, %H-%i-%s&#39;) |</span><br><span class="line">+--------------------------------+----------------------------------------------------------+</span><br><span class="line">| 09&#x2F;14&#x2F;2020                     | 05,01,2019, 12-22-33                                     |</span><br><span class="line">+--------------------------------+----------------------------------------------------------+</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql基础用法</title>
      <link href="/2020/09/12/mysql/basic-usage/"/>
      <url>/2020/09/12/mysql/basic-usage/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不知道写啥， 简单记录一下数据库的相关操作吧，结合实例</p></blockquote><a id="more"></a><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ol><li><p>用户、权限、密码问题</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 新建用户</span><br><span class="line">CREATE USER &#39;username&#39;@&#39;hostname&#39; IDENTIFIED BY &#39;password&#39;;</span><br><span class="line"></span><br><span class="line">-- 修改用户名</span><br><span class="line">UPDATE mysql.&#96;user&#96; set &#96;user&#96; &#x3D; &#39;new_username&#39; WHERE &#96;user&#96; &#x3D; &#39;username&#39;;</span><br><span class="line">RENAME USER &#39;username&#39;@&#39;hostname&#39; TO &#39;new_username&#39;@&#39;new_hostname&#39;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">-- 用户密码修改</span><br><span class="line">SET PASSWORD FOR (username)&#x3D;password(&#39;new_password&#39;);</span><br><span class="line">UPDATE mysql.&#96;user&#96; set &#96;authentication_string&#96;&#x3D;password(&#39;new_password&#39;) where &#96;user&#96;&#x3D;&#39;userna me&#39;; # 5.7版本后用 authentication_string ，之前是 password字段</span><br><span class="line"># 修改完后 </span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">-- 删除用户</span><br><span class="line">DELETE FROM myql.&#96;user&#96; WHERE &#96;user&#96; &#x3D; &#39;username&#39; AND &#96;host&#96; &#x3D; &#39;hostname&#39;;</span><br><span class="line">DROP USER &#39;username&#39;@&#39;hostname&#39;;</span><br><span class="line"></span><br><span class="line">-- GRANT 命令格式</span><br><span class="line">GRANT privileges ON databases.tablename TO &#39;username&#39;@&#39;hostname&#39; [INDENTIFIED BY &#39;password&#39;]; </span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"># 当使用 INDENTIFIED BY 时， 没有改用户，则会创建一个用户</span><br><span class="line"></span><br><span class="line">-- 查看用户权限</span><br><span class="line">SHOW GRANTS FOR &#39;username&#39;@&#39;hostname&#39;;</span><br><span class="line"></span><br><span class="line">-- GRANT 命令创建用户</span><br><span class="line">GRANT (privileges) ON *.* TO &#39;username&#39;@&#39;hostname&#39; IDENTIFIED BY &#39;password&#39;;</span><br><span class="line"># eg. grant select on *.* to &#39;test&#39;@&#39;%&#39; identified by &#39;123456&#39;</span><br><span class="line"># *.* -&gt; database_name.table_name</span><br><span class="line"></span><br><span class="line">-- 设置用户访问权限</span><br><span class="line">GRANT (ALL PRIVILEGES) ON databases.tablename to &#39;username&#39;@&#39;hostname&#39; [IDENTIFIED BY &#39;password&#39;] [WITH GRANT OPTION] ;</span><br><span class="line"># ALL PRIVILEGES 可以替换为 select , update , insert , delete 其中之一或组合, 还有其他的，自己搜吧</span><br><span class="line"># WITH GRANT OPTION 加上表示给改用户添加赋权的权限</span><br><span class="line"># eg. grant select,update on *.* to &#39;test&#39;@&#39;%&#39; with grant option</span><br><span class="line"></span><br><span class="line">-- 回收权限</span><br><span class="line">REVOKE (ALL PRIVILEGES) ON databases.tablename FROM &#39;username&#39;@&#39;hostname&#39;</span><br><span class="line"># ALL PRIVILEGES -&gt; select , update , insert , delete and ...</span><br><span class="line"># eg. revoke update, grant option on *.* from &#39;test&#39;@&#39;%&#39;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>数据库新建&amp;删除</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查看</span><br><span class="line">SHOW DATABASES;</span><br><span class="line">-- 创建</span><br><span class="line">CREATE  DATABASE &#96;test&#96; DEFAULT CHARACTER SET utf8mb4;</span><br><span class="line">-- 删除</span><br><span class="line">DROP DATABASE &#96;test&#96;</span><br></pre></td></tr></table></figure><h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3></li></ol><blockquote><p>说明： 在上面创建的test数据库中创建三张表， teacher(教师表)， students(学生表)， class(班级表)</p><p>Teachers (t_id, name, age, sex, email, phone)</p><p>Students(stu_id, name, age, sex, class_id) </p><p>Class(id, name, t_id)   t_id -&gt; 班主任 name其实可以细化为 年级号、 班号啥的</p></blockquote><ol><li><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- teachers</span><br><span class="line">CREATE TABLE IF NOT EXISTS &#96;teachers&#96;(</span><br><span class="line">    &#96;t_id&#96; INT UNSIGNED  AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    &#96;name&#96; VARCHAR(30) NOT NULL DEFAULT &#39;&#39;,</span><br><span class="line">    &#96;sex&#96; TINYINT(1) NOT NULL DEFAULT 0 COMMENT &#39;0 -&gt; 女; 1 -&gt; 男&#39;,</span><br><span class="line">    &#96;age&#96; TINYINT NOT NULL DEFAULT 0,</span><br><span class="line">    &#96;phone&#96; VARCHAR(20) NOT NULL DEFAULT &#39;&#39;,</span><br><span class="line">    &#96;email&#96; VARCHAR(50) NOT NULL DEFAULT &#39;&#39;,</span><br><span class="line">    &#96;created_at&#96; TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">    &#96;updated_at&#96; TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line">-- class</span><br><span class="line">CREATE TABLE IF NOT EXISTS &#96;class&#96;(</span><br><span class="line">    &#96;id&#96; INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    &#96;name&#96; VARCHAR(30) NOT NULL DEFAULT &#39;&#39;,</span><br><span class="line">    &#96;t_id&#96; INT NOT NULL DEFAULT 0,</span><br><span class="line">    &#96;created_at&#96; TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">    &#96;updated_at&#96; TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- students;</span><br><span class="line">CREATE TABLE IF NOT EXISTS &#96;students&#96;(</span><br><span class="line">    &#96;stu_id&#96; INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    &#96;name&#96; VARCHAR(30) NOT NULL DEFAULT &#39;&#39;,</span><br><span class="line">    &#96;sex&#96; TINYINT(1) NOT NULL DEFAULT 0 COMMENT &#39;0 -&gt; 女; 1 -&gt; 男&#39;,</span><br><span class="line">    &#96;age&#96; TINYINT NOT NULL DEFAULT 0,</span><br><span class="line">    &#96;class_id&#96; INT NOT NULL DEFAULT 0,</span><br><span class="line">    &#96;created_at&#96; TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">    &#96;updated_at&#96; TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 查看创建的表</span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| class          |</span><br><span class="line">| students       |</span><br><span class="line">| teachers       |</span><br><span class="line">+----------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; DESC teachers;</span><br><span class="line">+------------+------------------+------+-----+-------------------+-----------------------------+</span><br><span class="line">| Field      | Type             | Null | Key | Default           | Extra                       |</span><br><span class="line">+------------+------------------+------+-----+-------------------+-----------------------------+</span><br><span class="line">| t_id       | int(10) unsigned | NO   | PRI | NULL              | auto_increment              |</span><br><span class="line">| name       | varchar(30)      | NO   |     |                   |                             |</span><br><span class="line">| sex        | tinyint(1)       | NO   |     | 0                 |                             |</span><br><span class="line">| age        | tinyint(4)       | NO   |     | 0                 |                             |</span><br><span class="line">| phone      | varchar(20)      | NO   |     |                   |                             |</span><br><span class="line">| email      | varchar(50)      | NO   |     |                   |                             |</span><br><span class="line">| created_at | timestamp        | NO   |     | CURRENT_TIMESTAMP |                             |</span><br><span class="line">| updated_at | timestamp        | NO   |     | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |</span><br><span class="line">+------------+------------------+------+-----+-------------------+-----------------------------+</span><br></pre></td></tr></table></figure></li><li><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 改表名</span><br><span class="line">ALTER TABLE &#96;table&#96; RENAME TO &#96;new_table_name&#96;;</span><br><span class="line"></span><br><span class="line">-- 添加字段</span><br><span class="line">ALTER TABLE &#96;table&#96; ADD [COLUMN] &#96;column&#96; ···</span><br><span class="line">-- ALTER TABLE &#96;table_name&#96; ADD COLUMN &#96;created_at&#96; TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP</span><br><span class="line"></span><br><span class="line">-- 修改字段</span><br><span class="line">ALTER TABLE &#96;table&#96; MODIFY [COLUMN] &#96;column&#96; ···</span><br><span class="line"></span><br><span class="line">-- 字段改名</span><br><span class="line">ALTER TABLE &#96;table&#96; CHANGE &#96;column&#96; &#96;new_column&#96; ···</span><br><span class="line"></span><br><span class="line">-- 删除字段</span><br><span class="line">ALTER TABLE &#96;table&#96; DROP COLUMN &#96;column&#96;</span><br></pre></td></tr></table></figure></li><li><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE &#96;table_name&#96;</span><br></pre></td></tr></table></figure></li></ol><h3 id="数据表的操作"><a href="#数据表的操作" class="headerlink" title="数据表的操作"></a>数据表的操作</h3><ul><li><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 向teacher表插入数据</span><br><span class="line">INSERT INTO &#96;teachers&#96;(&#96;name&#96;, &#96;sex&#96;, &#96;age&#96;) VALUES (&#39;teacher1&#39;, 0, 35),(&#39;teacher2&#39;, 0, 30),(&#39;teacher3&#39;, 1, 35),(&#39;teacher4&#39;, 0, 37),(&#39;teacher5&#39;, 0, 35),(&#39;teacher6&#39;, 1, 29),</span><br><span class="line">(&#39;teacher7&#39;, 0, 35),(&#39;teacher8&#39;, 0, 27),(&#39;teacher9&#39;, 1, 35),(&#39;teacher10&#39;, 0, 43);</span><br><span class="line"></span><br><span class="line">-- 向class表插入数据</span><br><span class="line">INSERT INTO &#96;class&#96;(&#96;name&#96;, &#96;t_id&#96;) VALUES(&#39;class1&#39;, 1),(&#39;class2&#39;, 7),(&#39;class3&#39;, 6),(&#39;class4&#39;, 9),(&#39;class5&#39;, 4);</span><br><span class="line"></span><br><span class="line">-- 向students表插入数据</span><br><span class="line">INSERT INTO &#96;students&#96;(&#96;name&#96;, &#96;sex&#96;, &#96;age&#96;, &#96;class_id&#96;) VALUES (&#39;stu1&#39;, 0, 17, 1),(&#39;stu2&#39;, 1, 16, 3),(&#39;stu3&#39;, 1, 17, 4),(&#39;stu4&#39;, 0, 16, 3),</span><br><span class="line">(&#39;stu5&#39;, 0, 17, 3),(&#39;stu6&#39;, 1, 17, 5),(&#39;stu6&#39;, 0, 16, 3),(&#39;stu8&#39;, 1, 18, 2),(&#39;stu9&#39;, 0, 17, 3),(&#39;stu10&#39;, 1, 16, 4),(&#39;stu11&#39;, 1, 17, 3),</span><br><span class="line">(&#39;stu12&#39;, 0, 17, 2),(&#39;stu13&#39;, 0, 18, 1),(&#39;stu14&#39;, 1, 17, 5),(&#39;stu15&#39;, 0, 18, 4),(&#39;stu16&#39;, 0, 17, 3),(&#39;stu17&#39;, 1, 18, 2),(&#39;stu17&#39;, 0, 17, 2),</span><br><span class="line">(&#39;stu19&#39;, 0, 17, 5),(&#39;stu20&#39;, 1, 18, 4),(&#39;stu21&#39;, 1, 16, 3),(&#39;stu22&#39;, 0, 17, 3),(&#39;stu23&#39;, 0, 17, 1),(&#39;stu24&#39;, 1, 16, 3),(&#39;stu25&#39;, 1, 17, 1),</span><br><span class="line">(&#39;stu26&#39;, 0, 18, 3),(&#39;stu27&#39;, 1, 17, 4),(&#39;stu28&#39;, 0, 16, 3),(&#39;stu29&#39;, 0, 17, 4),(&#39;stu39&#39;, 1, 18, 3);</span><br><span class="line"></span><br><span class="line">-- 创建好的表， 自己做一个备份吧，后面可能要还原数据</span><br></pre></td></tr></table></figure></li><li><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 简单删除</span><br><span class="line">DELETE FROM teachers WHERE t_id &#x3D; 10;</span><br></pre></td></tr></table></figure></li><li><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 简单更改</span><br><span class="line">UPDATE &#96;teachers&#96; SET email &#x3D; &#39;test@gmail.com&#39; WHERE &#96;name&#96; &#x3D; &#39;teacher3&#39;</span><br></pre></td></tr></table></figure></li><li><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 简单查询</span><br><span class="line">SELECT * FROM &#96;teachers&#96;; </span><br><span class="line"></span><br><span class="line">SELECT &#96;name&#96;, class_id FROM &#96;students&#96;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="按需完成相关操作"><a href="#按需完成相关操作" class="headerlink" title="按需完成相关操作"></a>按需完成相关操作</h3><ol><li><p>查询每个班的班主任信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM &#96;teachers&#96; WHERE t_id IN (</span><br><span class="line">   SELECT t_id FROM &#96;class&#96; </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">SELECT teachers.* FROM &#96;class&#96; JOIN &#96;teachers&#96; on class.t_id &#x3D; &#96;teachers&#96;.t_id ;</span><br></pre></td></tr></table></figure></li><li><p>查询每个班的人数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT a.id, a.&#96;name&#96;, count(b.class_id) FROM &#96;class&#96; AS a  LEFT JOIN &#96;students&#96; AS b ON a.id &#x3D; b.class_id GROUP BY a.id ;</span><br></pre></td></tr></table></figure></li><li><p>查询每个班主任所带班级的平均年龄, 包括班主任信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT a.t_id, a.&#96;name&#96;, a.&#96;age&#96;, a.&#96;sex&#96;, a.&#96;email&#96;, a.&#96;phone&#96;, b.&#96;name&#96; as class_name, avg(c.&#96;age&#96;) as class_avg_age FROM &#96;teachers&#96; as a</span><br><span class="line">JOIN &#96;class&#96; as b on a.t_id &#x3D; b.t_id</span><br><span class="line">JOIN &#96;students&#96; as c on b.id &#x3D; c.class_id</span><br><span class="line">GROUP BY a.t_id,b.id ;</span><br></pre></td></tr></table></figure></li><li><p>将teacher4老师所带班级的名叫stu6的学生的年纪修改为18岁</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 多表连接更新</span><br><span class="line">UPDATE teachers as a </span><br><span class="line">JOIN class as b on a.t_id &#x3D; b.t_id</span><br><span class="line">JOIN students as c on b.id &#x3D; c.class_id</span><br><span class="line">SET c.age &#x3D; 18</span><br><span class="line">WHERE a.&#96;name&#96; &#x3D; &#39;teacher4&#39; and c.&#96;name&#96; &#x3D; &#39;stu6&#39;</span><br></pre></td></tr></table></figure></li><li><p>将teacher6老师所带班级的名叫stu39的学生的记录删除</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 多表连接删除</span><br><span class="line">DELETE c from teachers as a </span><br><span class="line">JOIN class as b on a.t_id &#x3D; b.t_id</span><br><span class="line">JOIN students as c on b.id &#x3D; c.class_id</span><br><span class="line">WHERE a.&#96;name&#96; &#x3D; &#39;teacher6&#39; and c.&#96;name&#96; &#x3D; &#39;stu39&#39;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>mmp ， 先写这么多吧，后面用到了在加上。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 子模块</title>
      <link href="/2020/08/26/git-submodule/"/>
      <url>/2020/08/26/git-submodule/</url>
      
        <content type="html"><![CDATA[<blockquote><p>经常碰到这种情况：当你在一个Git 项目上工作时，你需要在其中使用另外一个Git 项目。也许它是一个第三方开发的Git 库或者是你独立开发和并在多个父项目中使用的。这个情况下一个常见的问题产生了：你想将两个项目单独处理但是又需要在其中一个中使用另外一个。 这时候 submodule 就上场了！</p></blockquote><a id="more"></a><h3 id="添加子模块"><a href="#添加子模块" class="headerlink" title="添加子模块"></a>添加子模块</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接clone，会在当前目录生成一个对应子目录存放仓库内容</span></span><br><span class="line">$ git submodule add &lt;submodule_url&gt; [path/submoduleName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化本地.gitmodules文件</span></span><br><span class="line">$ git submodule init  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步远端submodule源码</span></span><br><span class="line">$ git submodule update  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取主项目和所有子项目源码</span></span><br><span class="line">$ git <span class="built_in">clone</span> --recurse-submodules &lt;main_project_url&gt;</span><br></pre></td></tr></table></figure><h3 id="查看-amp-更新"><a href="#查看-amp-更新" class="headerlink" title="查看 &amp; 更新"></a>查看 &amp; 更新</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看子模块</span></span><br><span class="line">$ git submodule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新项目内子模块到最新版本</span></span><br><span class="line">$ git submodule update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新子模块为远程项目的最新版本</span></span><br><span class="line">$ git submodule update --remote</span><br></pre></td></tr></table></figure><h3 id="删除子模块"><a href="#删除子模块" class="headerlink" title="删除子模块"></a>删除子模块</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、 删除子模块文件夹</span></span><br><span class="line">$ git rm --cached &lt;submodule&gt;</span><br><span class="line">$ rm -rf &lt;submodule&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、删除.gitmodules文件中相关子模块信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、删除.git/config中的相关子模块信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、删除.git文件夹中的相关子模块文件</span></span><br><span class="line">$ rm -rf .git/modules/&lt;submodule&gt;</span><br></pre></td></tr></table></figure><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><ul><li><h4 id="向上同步"><a href="#向上同步" class="headerlink" title="向上同步"></a>向上同步</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当子模块有未被使用的新提交时（例如在 sub-module.git 中执行 git pull --rebase 拉取新的内容后），git 会给予提示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将子模块的内容同步到主仓库，只需要在主仓库中创建一个新的提交即可</span></span><br><span class="line">$ git add submodule</span><br><span class="line">$ git commit -m <span class="string">"message"</span></span><br></pre></td></tr></table></figure></li><li><h4 id="向下同步"><a href="#向下同步" class="headerlink" title="向下同步"></a>向下同步</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主要是更新</span></span><br><span class="line">$ git submodule update</span><br></pre></td></tr></table></figure></li></ul><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li>当子模块有提交的时候,没有push到远程仓库, 父级引用子模块的commit更新,并提交到远程仓库, 当别人拉取代码的时候就会报出子模块的commit不存在 <code>fatal: reference isn’t a tree</code> 。</li><li>如果你仅仅引用了别人的子模块的游离分支,然后在主仓库修改了子仓库的代码,之后使用<code>git submodule update</code>拉取了最新代码,那么你在子仓库游离分支做出的修改会被覆盖掉。</li><li>我们假设你一开始在主仓库并没有采用子模块的开发方式,而是在另外的开发分支使用了子仓库,那么当你从开发分支切回到没有采用子模块的分支的时候,子模块的目录并不会被Git自动删除,而是需要你手动的删除了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习篇</title>
      <link href="/2020/08/09/git-usage/"/>
      <url>/2020/08/09/git-usage/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文不是记录所有的命令， 会将部分命令做一个简易说明</p></blockquote><p>​    <img src="https://cdn.jsdelivr.net/gh/jingyucute/cdn-assets/2020/images/git-workflow.png" alt="git操作流程"></p><a id="more"></a><p>看懂上面的流程， 就可以大致知道自己要进行什么操作，以及怎样操作</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>   安装的话， 自己搜一下吧， 问题应该不大</p><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><p>​    </p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录下新建一个代码库 [新建一个目录， 初始化为代码库]</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程拷贝一个项目 , 克隆到本地</span></span><br><span class="line">$ git <span class="built_in">clone</span> &lt;git-repo-url&gt; [project-name]</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 config</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 config</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">"Your Name"</span></span><br><span class="line">$ git config [--global] user.email <span class="string">"email@example.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令别名</span></span><br><span class="line">$ git config --global alias.st status</span><br><span class="line">$ git config --global alias.co checkout</span><br><span class="line">$ git config --global alias.ci commit</span><br><span class="line"><span class="comment"># 个人喜欢将常用的 commit 简写为 ci，  checkout简写为 co</span></span><br><span class="line"><span class="comment"># --global 是全局配置， 不加上只能在对应的git 目录下使用</span></span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看工作区和暂存区的状态</span></span><br><span class="line">$ git status </span><br><span class="line"><span class="comment"># 将工作区的文件提交到暂存区</span></span><br><span class="line">$ git add .  </span><br><span class="line"><span class="comment"># 提交到本地仓库</span></span><br><span class="line">$ git commit -m <span class="string">"本次提交说明"</span></span><br><span class="line"><span class="comment"># add和commit的合并，便捷写法（未追踪的文件无法直接提交到暂存区/本地仓库）</span></span><br><span class="line">$ git commit -am <span class="string">"本次提交说明"</span>  </span><br><span class="line"><span class="comment"># 将本地分支和远程分支进行关联</span></span><br><span class="line">$ git push -u origin branchName </span><br><span class="line"><span class="comment"># 将本地仓库的文件推送到远程分支</span></span><br><span class="line">$ git push</span><br><span class="line"><span class="comment"># 拉取远程分支的代码</span></span><br><span class="line">$ git pull origin branchName </span><br><span class="line"><span class="comment"># 合并分支</span></span><br><span class="line">$ git merge branchName </span><br><span class="line"><span class="comment"># 查看本地拥有哪些分支</span></span><br><span class="line">$ git branch</span><br><span class="line"><span class="comment"># 查看所有分支（包括远程分支和本地分支）</span></span><br><span class="line">$ git branch -a </span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">$ git checkout branchName </span><br><span class="line"><span class="comment"># 临时将工作区文件的修改保存至堆栈中, 我个人是不太喜欢用stash的， 习惯是切换到另一个分支，保存结点。 毕竟不小心</span></span><br><span class="line"><span class="comment"># 删除 stash中的内容， 找回也挺麻烦的</span></span><br><span class="line">$ git stash</span><br><span class="line"><span class="comment"># 将之前保存至堆栈中的文件取出来</span></span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h3 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## rm</span></span><br><span class="line"><span class="comment"># 删除暂存区和工作区的文件</span></span><br><span class="line">$ git rm [filename]</span><br><span class="line"><span class="comment"># 只删除暂存区的文件，不会删除工作区的文件, 停止追踪文件(后面将其添加至gitignore)</span></span><br><span class="line">$ git rm --cached [filename]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## commit</span></span><br><span class="line"><span class="comment"># 补充提交, 提交至上一个结点中</span></span><br><span class="line">$ git commit --amend [message] </span><br><span class="line">$ git commit --amend -no-edit</span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## push &amp; pull &amp; fetch</span></span><br><span class="line"><span class="comment"># 将本地仓库的文件推送到远程分支</span></span><br><span class="line"><span class="comment"># 如果远程仓库没有这个分支，会新建一个同名的远程分支</span></span><br><span class="line"><span class="comment"># 如果省略远程分支名，则表示两者同名</span></span><br><span class="line">$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取并合并项目其他人员的一个分支 </span></span><br><span class="line">$ git pull origin branchname  </span><br><span class="line"><span class="comment"># 等同于 fetch + merge</span></span><br><span class="line">$ git fetch origin branchName</span><br><span class="line">$ git merge origin/branchName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强推， 覆盖远程结点</span></span><br><span class="line">$ git push -f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## branch</span></span><br><span class="line"><span class="comment"># 查看本地分支[-r 远程， -a 本地和远程]</span></span><br><span class="line">$ git branch [-r, -a]</span><br><span class="line"><span class="comment"># 新建分支, 可以指向某个提交结点</span></span><br><span class="line">$ git branch &lt;branchName&gt; [commit]</span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">$ git checkout &lt;branchName&gt;</span><br><span class="line"><span class="comment"># 新建并切换</span></span><br><span class="line">$ git checkout -b &lt;branchName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line"><span class="comment"># 删除本地 [-d 被删除的分支上有没有合并的结点会阻止, -D 强制删除分支 ]</span></span><br><span class="line">$ git branch [-d, -D] &lt;branchName&gt;</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push &lt;远程主机名&gt; :&lt;远程分支名&gt;</span><br><span class="line">$ git push &lt;远程主机名&gt; --delete &lt;远程分支名&gt;</span><br><span class="line">$ git branch -dr &lt;remote/branch&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## diff</span></span><br><span class="line"><span class="comment"># 查看工作区和暂存区所有文件的对比[单个文件的对比]</span></span><br><span class="line">$ git diff [fileName]</span><br><span class="line"><span class="comment"># 1.你修改了某个文件，但是没有提交到暂存区，这时候会有对比的内容</span></span><br><span class="line"><span class="comment"># 一旦提交到暂存区，就不会有对比的内容(因为暂存区已经更新)</span></span><br><span class="line"><span class="comment"># 2.如果你新建了一个文件，但是没有提交到暂存区，这时候 diff 是没有结果的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看暂存区与上次提交到本地仓库的快照（即最新提交到本地仓库的快照）的对比</span></span><br><span class="line">$ git diff --cached/--staged</span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"><span class="comment"># 查看本地两个分支的所有的对比[单个文件的对比]</span></span><br><span class="line">$ git diff &lt;branchName1&gt; &lt;branchName2&gt; [fileName]</span><br><span class="line"><span class="comment"># 查看远程分支和远程分支[本地分支]的对比 或 单个文件</span></span><br><span class="line">$ git diff &lt;远程主机名/branchname1&gt; &lt;远程主机名/branchname2 | branchname2&gt; [filenName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看两个 commit 的对比</span></span><br><span class="line">$ git diff commit1 commit2  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个有意思的命令, 查看自己写了多少代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## blame 谁动了你的面包, 甩锅大法</span></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [fileName]</span><br><span class="line"></span><br><span class="line"><span class="comment">## log</span></span><br><span class="line"><span class="comment"># 查看提交历史</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline  </span><br><span class="line">          --grep=<span class="string">"关键字"</span></span><br><span class="line">          --graph </span><br><span class="line">          --all      </span><br><span class="line">          --author <span class="string">"username"</span>     </span><br><span class="line">          --reverse </span><br><span class="line">          -num</span><br><span class="line">          -p</span><br><span class="line">          --before=  1  day/1  week/1  <span class="string">"2019-06-06"</span> </span><br><span class="line">          --after= <span class="string">"2019-06-06"</span></span><br><span class="line">          --<span class="built_in">stat</span> </span><br><span class="line">          --abbrev-commit </span><br><span class="line">          --pretty=format:<span class="string">"xxx"</span></span><br><span class="line">          </span><br><span class="line"><span class="comment"># oneline -&gt; 将日志记录一行一行的显示</span></span><br><span class="line"><span class="comment"># grep="关键字" -&gt; 查找日志记录中(commit提交时的注释)与关键字有关的记录</span></span><br><span class="line"><span class="comment"># graph -&gt; 记录图形化显示 ！！！    </span></span><br><span class="line"><span class="comment"># all -&gt; 将所有记录都详细的显示出来</span></span><br><span class="line"><span class="comment"># author "username" -&gt; 查找这个作者提交的记录</span></span><br><span class="line"><span class="comment"># reverse -&gt; commit 提交记录顺序翻转      </span></span><br><span class="line"><span class="comment"># before -&gt; 查找规定的时间(如:1天/1周)之前的记录   </span></span><br><span class="line"><span class="comment"># num -&gt; git log -10 显示最近10次提交 ！！！    </span></span><br><span class="line"><span class="comment"># stat -&gt; 显示每次更新的文件修改统计信息，会列出具体文件列表 ！！！</span></span><br><span class="line"><span class="comment"># abbrev-commit -&gt; 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符 ！！！</span></span><br><span class="line"><span class="comment"># pretty=format:"xxx" -&gt;  可以定制要显示的记录格式 ！！！</span></span><br><span class="line"><span class="comment"># p -&gt; 显示每次提交所引入的差异（按 补丁 的格式输出）！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用</span></span><br><span class="line">$ git <span class="built_in">log</span> --graph [--<span class="built_in">stat</span>]</span><br><span class="line"><span class="comment"># 查看本地 git 命令历史, 常用来恢复某些失误的操作</span></span><br><span class="line">$ git reflog</span><br><span class="line"></span><br><span class="line"><span class="comment">## show</span></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## tag</span></span><br><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"><span class="comment"># 新建一个tag在指定commit, 可以指定说明文字</span></span><br><span class="line">$ git tag [tag] [commit] [-m <span class="string">"message"</span>]</span><br><span class="line"><span class="comment"># 查看单个标签具体信息</span></span><br><span class="line">$ git show &lt;tagname&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送一个本地标签</span></span><br><span class="line">$ git push &lt;远程主机名&gt; &lt;tagname&gt;</span><br><span class="line"><span class="comment"># 推送全部未推送过的本地标签</span></span><br><span class="line">$ git push &lt;远程主机名&gt; --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"><span class="comment"># 删除远程tag, 有点像删除远程分支</span></span><br><span class="line">$ git push &lt;远程主机名&gt; :refs/tags/&lt;tagname&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">## remote</span></span><br><span class="line"><span class="comment"># 查看所有远程主机</span></span><br><span class="line">$ git remote</span><br><span class="line"><span class="comment"># 查看关联的远程仓库的详细信息</span></span><br><span class="line">$ git remote -v </span><br><span class="line"><span class="comment"># 删除远程仓库的 “关联”</span></span><br><span class="line">$ git remote rm &lt;远程主机名&gt; </span><br><span class="line"><span class="comment"># 添加远程仓库的 “关联”</span></span><br><span class="line">$ git remote add &lt;远程主机名&gt; &lt;remote-url&gt;</span><br><span class="line"><span class="comment"># 设置远程仓库的 “关联”</span></span><br><span class="line">$ git remote <span class="built_in">set</span>-url &lt;远程主机名&gt; &lt;newurl&gt;</span><br></pre></td></tr></table></figure><h3 id="单读讲讲"><a href="#单读讲讲" class="headerlink" title="单读讲讲"></a>单读讲讲</h3><ul><li><h4 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h4><ul><li><p><code>merge</code></p><p><img src="https://cdn.jsdelivr.net/gh/jingyucute/cdn-assets/2020/images/merge.png" alt="merge方式"></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将另外一个分支合并到当前分支，主要是合并到master</span></span><br><span class="line">$ git merge &lt;branchName&gt; [--fast-forward | --no-ff | --squash]</span><br><span class="line"><span class="comment"># --fast-forward: 会在当前分支的提交历史中添加进被合并分支的提交历史</span></span><br><span class="line"><span class="comment"># --no-ff: 会生成一个新的提交，让当前分支的提交历史不会那么乱</span></span><br><span class="line"><span class="comment"># --squash: 不会生成新的提交，会将被合并分支多次提交的内容直接存到工作区和暂存区，由开发者手动去提交，这样当前分支最终只会多出一条提交记录，不会掺杂被合并分支的提交历史</span></span><br></pre></td></tr></table></figure></li><li><p><code>rebase</code></p><p>关于rebase 的示意图，  <a href="https://blog.csdn.net/gtlbtnq9mr3/article/details/80222523" target="_blank" rel="noopener">看看这篇文章吧</a></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将master分支中的修改添加到master分支上(保证当前分支的修改， 是基于master分支上的修改)</span></span><br><span class="line">$ git checkout &lt;branchName&gt;</span><br><span class="line">$ git rebase master</span><br><span class="line"><span class="comment"># 或者直接使用</span></span><br><span class="line">$ git rebase &lt;branchName1&gt; &lt;branchName2&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对当前分支提交的 startpoint -&gt; endpoint (前开后闭) 提交记录进行整理</span></span><br><span class="line">$ git rebase -i  [startpoint]  [endpoint]</span><br><span class="line"><span class="comment"># pick：保留该commit（缩写:p）</span></span><br><span class="line"><span class="comment"># reword：保留该commit，但我需要修改该commit的注释（缩写:r）</span></span><br><span class="line"><span class="comment"># edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）</span></span><br><span class="line"><span class="comment"># squash：将该commit和前一个commit合并（缩写:s）</span></span><br><span class="line"><span class="comment"># fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）</span></span><br><span class="line"><span class="comment"># exec：执行shell命令（缩写:x）</span></span><br><span class="line"><span class="comment"># drop：我要丢弃该commit（缩写:d）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择特定的结点到指定分支(区间前开后闭), 建议使用 cherry-pick</span></span><br><span class="line">$ git rebase [startpoint] [endpoint] --onto master</span><br><span class="line"><span class="comment"># 注意: 添加过去的结点， 还处于游离状态(HEAD没有处于最新结点) ， 可以新建一个分支或直接使用 reset --hard</span></span><br></pre></td></tr></table></figure></li><li><p><code>cherry-pick</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将提交的结点 添加到当前分支，会产生一个新的提交(哈希值不一样)</span></span><br><span class="line">$ git cherry-pick &lt;commitHash&gt;</span><br><span class="line"><span class="comment"># 将另外一个分支上最新提交的结点添加到当前分支</span></span><br><span class="line">$ git cherry-pick &lt;branchName&gt;</span><br><span class="line"><span class="comment"># 转移多个提交</span></span><br><span class="line">$ git cherry-pick &lt;HashA&gt; &lt;HashB&gt;</span><br><span class="line"><span class="comment"># 转移一系列提交（区间， 左开右闭）</span></span><br><span class="line">$ git cherry-pick &lt;HashA&gt;^..&lt;HashB&gt;</span><br></pre></td></tr></table></figure><p>关于<code>cherry-pick</code>, <a href="https://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html" target="_blank" rel="noopener">参考这里</a></p></li></ul></li><li><h4 id="撤销-amp-回退"><a href="#撤销-amp-回退" class="headerlink" title="撤销&amp;回退"></a>撤销&amp;回退</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 原来的命令</span></span><br><span class="line"><span class="comment"># 撤销工作区修改的文件, 还未提交到暂存区</span></span><br><span class="line">$ git checkout filname</span><br><span class="line"><span class="comment"># 撤销暂存区的文件</span></span><br><span class="line">$ git reset HEAD filename</span><br><span class="line"></span><br><span class="line"><span class="comment">## checkout</span></span><br><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout &lt;filename&gt;</span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"><span class="comment"># 检出结点, 标签</span></span><br><span class="line">$ git checkout[&lt;commitid&gt; | &lt;tag&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment">## reset</span></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变, 软回退</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致, 硬回退</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment">## revert</span></span><br><span class="line"><span class="comment"># 生成一个撤销指定提交版本的新提交</span></span><br><span class="line">$ git revert &lt;commit_id&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新命令</span></span><br><span class="line"><span class="comment">## restore &amp; switch</span></span><br><span class="line"><span class="comment"># 主要还是为了分离 checkout的功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支 = git checkout &lt;branchName&gt;</span></span><br><span class="line">$ git switch &lt;branchName&gt;</span><br><span class="line"><span class="comment"># 创建并切换到新建分支 = git checkout -b &lt;newbranch&gt;</span></span><br><span class="line">$ git switch -c &lt;newBranch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销工作区修改的文件 = git checkout &lt;fileName&gt;</span></span><br><span class="line">$ git restore &lt;fileName&gt;</span><br><span class="line"><span class="comment"># 撤销暂存区的文件 = git reset &lt;fileName&gt;</span></span><br><span class="line">$ git restore --staged &lt;fileName&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 进阶篇之Compose</title>
      <link href="/2020/08/02/docker/compose/"/>
      <url>/2020/08/02/docker/compose/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>Compose</code> 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。</p></blockquote><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>Compose</code> 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。 <code>Compose</code>代码目前在 <a href="https://github.com/docker/compose" target="_blank" rel="noopener">https://github.com/docker/compose</a> 上开源。</p><h3 id="安装与卸载"><a href="#安装与卸载" class="headerlink" title="安装与卸载"></a>安装与卸载</h3><ul><li><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><p>Mac/Windows</p><p><code>Docker Desktop for Mac/Windows</code> 自带 <code>docker-compose</code> 二进制文件，安装 Docker 之后可以直接使用。</p></li><li><p>Ubuntu</p><p>1、通过下载二进制包</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>2、 pip安装</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo pip install -U docker-compose</span><br></pre></td></tr></table></figure><p>3、bash补全命令</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ curl -L https://raw.githubusercontent.com/docker/compose/1.25.5/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p>1、删除二进制包文件</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>2、pip移除</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo pip uninstall docker-compose</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用以及说明"><a href="#使用以及说明" class="headerlink" title="使用以及说明"></a>使用以及说明</h3><ul><li><h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><p>首先介绍几个术语。</p><ul><li>服务 (<code>service</code>)：一个应用容器，实际上可以运行多个相同镜像的实例。</li><li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元。</li></ul><p>可见，一个项目可以由多个服务（容器）关联而成，<code>Compose</code> 面向项目进行管理。</p></li><li><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><ul><li><h5 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker-compose [-f=&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure></li><li><h5 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h5><p><code>-f, --file FILE</code> 指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</p><p><code>-p, --project-name NAME</code> 指定项目名称，默认将使用所在目录名称作为项目名。</p><p><code>--x-networking</code> 使用 Docker 的可拔插网络后端特性</p><p><code>--x-network-driver DRIVER</code> 指定网络后端的驱动，默认为<code>bridge</code></p><p><code>--verbose</code> 输出更多调试信息。</p><p><code>-v, --version</code> 打印版本并退出。</p><ul><li><h5 id="build"><a href="#build" class="headerlink" title="build"></a>build</h5><p>格式为 <code>docker-compose build [options] [SERVICE...]</code>。</p><p>构建（重新构建）项目中的服务容器。服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。</p><p>选项包括：</p><ul><li><code>--force-rm</code> 删除构建过程中的临时容器。</li><li><code>--no-cache</code> 构建镜像过程中不使用 cache（这将加长构建过程）。</li><li><code>--pull</code> 始终尝试通过 pull 来获取更新版本的镜像。</li></ul></li><li><h5 id="config"><a href="#config" class="headerlink" title="config"></a>config</h5><p>验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。</p></li></ul></li><li><h5 id="down"><a href="#down" class="headerlink" title="down"></a>down</h5><p>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</p></li><li><h5 id="start"><a href="#start" class="headerlink" title="start"></a>start</h5><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p><p>启动已经存在的服务容器。</p></li><li><h5 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h5><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p><p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时(默认为 10 秒)。</li></ul></li><li><h5 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h5><p>进入指定容器</p></li><li><h5 id="images"><a href="#images" class="headerlink" title="images"></a>images</h5><p> 列出 Compose 文件中包含的镜像。</p></li><li><h5 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h5><p> 格式为 <code>docker-compose kill [options] [SERVICE...]</code>。</p><p> 通过发送 <code>SIGKILL</code> 信号来强制停止服务容器。</p></li><li><h5 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h5><p> 格式为 <code>docker-compose logs [options] [SERVICE...]</code>。</p><p> 该命令在调试问题的时候十分有用。</p></li><li><h5 id="pause"><a href="#pause" class="headerlink" title="pause"></a>pause</h5><p> 格式为 <code>docker-compose pause [SERVICE...]</code>。</p><p> 暂停一个服务容器。</p></li><li><h5 id="unpause"><a href="#unpause" class="headerlink" title="unpause"></a>unpause</h5><p>格式为 <code>docker-compose unpause [SERVICE...]</code>。</p><p>恢复处于暂停状态中的服务。</p></li><li><h5 id="port"><a href="#port" class="headerlink" title="port"></a>port</h5><p>格式为 <code>docker-compose port [options] SERVICE PRIVATE_PORT</code>。</p><p>打印某个容器端口所映射的公共端口。</p></li><li><h5 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h5><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p><p>列出项目中目前的所有容器。</p></li><li><h5 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h5><p>格式为 <code>docker-compose pull [options] [SERVICE...]</code>。</p><p>拉取服务依赖的镜像。</p><p>选项：</p><ul><li><code>--ignore-pull-failures</code> 忽略拉取镜像过程中的错误。</li></ul></li><li><h5 id="push"><a href="#push" class="headerlink" title="push"></a>push</h5><p>推送服务依赖的镜像到 Docker 镜像仓库。</p></li><li><h5 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h5><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p><p>重启项目中的服务。</p><ul><li><h5 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h5><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p><p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p><p>选项：</p><ul><li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li><li><code>-v</code> 删除容器所挂载的数据卷。</li></ul></li><li><h5 id="run"><a href="#run" class="headerlink" title="run"></a>run</h5><p>格式为 <code>docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]</code>。</p><p>在指定服务上执行一个命令。</p><p>选项：</p><ul><li><code>-d</code> 后台运行容器。</li><li><code>--name NAME</code> 为容器指定一个名字。</li><li><code>--entrypoint CMD</code> 覆盖默认的容器启动指令。</li><li><code>-e KEY=VAL</code> 设置环境变量值，可多次使用选项来设置多个环境变量。</li><li><code>-u, --user=&quot;&quot;</code> 指定运行容器的用户名或者 uid。</li><li><code>--no-deps</code> 不自动启动关联的服务容器。</li><li><code>--rm</code> 运行命令后自动删除容器，<code>d</code> 模式下将忽略。</li><li><code>-p, --publish=[]</code> 映射容器端口到本地主机。</li><li><code>--service-ports</code> 配置服务端口并映射到本地主机。</li><li><code>-T</code> 不分配伪 tty，意味着依赖 tty 的指令将无法运行。</li></ul></li><li><h5 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h5><p>格式为 <code>docker-compose scale [options] [SERVICE=NUM...]</code>。</p><p>设置指定服务运行的容器个数。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过 service=num 的参数来设置数量</span></span><br><span class="line">$ docker-compose scale web=3 db=2</span><br><span class="line"><span class="comment"># 将启动 3 个容器运行 web 服务，2 个容器运行 db 服务</span></span><br></pre></td></tr></table></figure><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul></li><li><h5 id="top"><a href="#top" class="headerlink" title="top"></a>top</h5><p>查看各个服务容器内运行的进程。</p></li><li><h5 id="up"><a href="#up" class="headerlink" title="up"></a>up</h5><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p><p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p><p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，<code>docker-compose up -d</code>(生产环境下使用)，将会在后台启动并运行所有的容器。</p><p>如果用户不希望容器被停止并重新创建，可以使用 <code>docker-compose up --no-recreate</code>, 只会启动处于停止状态的容器，而忽略已经运行的服务; 如果用户只想重新部署某个服务，可以使用 <code>docker-compose up --no-deps -d &lt;SERVICE_NAME&gt;</code> 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。</p><p>选项：</p><ul><li><code>-d</code> 在后台运行服务容器。</li><li><code>--no-color</code> 不使用颜色来区分不同的服务的控制台输出。</li><li><code>--no-deps</code> 不启动服务所链接的容器。</li><li><code>--force-recreate</code> 强制重新创建容器，不能与 <code>--no-recreate</code> 同时使用。</li><li><code>--no-recreate</code> 如果容器已经存在了，则不重新创建，不能与 <code>--force-recreate</code> 同时使用。</li><li><code>--no-build</code> 不自动构建缺失的服务镜像。</li><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul></li><li><h5 id="version"><a href="#version" class="headerlink" title="version"></a>version</h5><p>格式为 <code>docker-compose version</code>。</p><p>打印版本信息。</p></li></ul></li></ul></li></ul><h3 id="Compose-模板文件"><a href="#Compose-模板文件" class="headerlink" title="Compose 模板文件"></a>Compose 模板文件</h3><p>  ​    大部分指令跟 <code>docker run</code> 相关参数的含义都是类似的。默认的模板文件名称为 <code>docker-compose.yml</code>，格式为 YAML 格式。</p><p>  每个服务都必须通过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile）等来自动构建生成镜像。</p><ul><li><h4 id="build-1"><a href="#build-1" class="headerlink" title="build"></a>build</h4><p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）</p><p><code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./dir</span></span><br></pre></td></tr></table></figure><p>也可以使用<code>context</code> 指令指定 <code>Dockerfile</code> 所在文件夹的路径， <code>dockerfile</code> 指令指定 <code>Dockerfile</code> 文件名， <code>arg</code> 指令指定构建镜像时的变量</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./dir</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile-alternate</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">buildno:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p> <code>cache_from</code> 指定构建镜像的缓存</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">  <span class="attr">cache_from:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">alpine:latest</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">corp/web_app:3.14</span></span><br></pre></td></tr></table></figure></li><li><h4 id="cap-add-cap-drop"><a href="#cap-add-cap-drop" class="headerlink" title="cap_add, cap_drop"></a>cap_add, cap_drop</h4><p>指定容器的内核能力（capacity）分配</p></li></ul><ul><li><h4 id="command"><a href="#command" class="headerlink" title="command"></a>command</h4><p>覆盖容器启动后默认执行的命令。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">echo</span> <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure></li><li><h4 id="cgroup-parent"><a href="#cgroup-parent" class="headerlink" title="cgroup_parent"></a>cgroup_parent</h4><p>指定父 <code>cgroup</code> 组，意味着将继承该组的资源限制。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建了一个 cgroup 组名称为 cgroups_1</span></span><br><span class="line"><span class="attr">cgroup_parent:</span> <span class="string">cgroups_1</span></span><br></pre></td></tr></table></figure></li><li><h4 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a>container_name</h4><p>指定容器名称。默认将会使用 <code>项目名称_服务名称_序号</code> 这样的格式。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">container_name:</span> <span class="string">docker-web-container</span></span><br></pre></td></tr></table></figure><p>注意: 指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。</p></li><li><h4 id="devices"><a href="#devices" class="headerlink" title="devices"></a>devices</h4><p>指定设备映射关系。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">devices:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"/dev/ttyUSB1:/dev/ttyUSB0"</span></span><br></pre></td></tr></table></figure></li><li><h4 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a>depends_on</h4><p>解决容器的依赖、启动先后的问题。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure><p>例子中会先启动 <code>redis</code> <code>db</code> 再启动 <code>web</code> , <code>web</code> 服务不会等待 <code>redis</code> <code>db</code> 「完全启动」之后才启动。</p></li><li><h4 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h4><p>自定义 <code>DNS</code> 服务器。可以是一个值，也可以是一个列表。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dns:</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br></pre></td></tr></table></figure></li><li><h4 id="dns-search"><a href="#dns-search" class="headerlink" title="dns_search"></a>dns_search</h4><p>配置 <code>DNS</code> 搜索域。可以是一个值，也可以是一个列表。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dns_search:</span> <span class="string">example.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dns_search:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">domain1.example.com</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">domain2.example.com</span></span><br></pre></td></tr></table></figure></li><li><h4 id="tmpfs"><a href="#tmpfs" class="headerlink" title="tmpfs"></a>tmpfs</h4><p>挂载一个 tmpfs 文件系统到容器。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tmpfs:</span> <span class="string">/run</span></span><br><span class="line"><span class="attr">tmpfs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/run</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/tmp</span></span><br></pre></td></tr></table></figure></li><li><h4 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a>env_file</h4><p>从文件中获取环境变量，可以为单独的文件路径或列表。</p><p>如果通过 <code>docker-compose -f FILE</code> 方式来指定 Compose 模板文件，则 <code>env_file</code> 中变量的路径会基于模板文件路径。</p><p>如果有变量名称与 <code>environment</code> 指令冲突，则按照惯例，以后者为准。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env_file:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./common.env</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./apps/web.env</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/opt/secrets.env</span></span><br></pre></td></tr></table></figure></li><li><h4 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h4><p>设置环境变量。可以使用数组或字典两种格式。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">  <span class="attr">SESSION_SECRET:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SESSION_SECRET</span></span><br></pre></td></tr></table></figure></li><li><h4 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h4><p>暴露端口，但不映射到宿主机，只被连接的服务访问。</p><p>仅可以指定内部端口为参数</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">expose:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"3000"</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"8000"</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><h4 id="extra-hosts"><a href="#extra-hosts" class="headerlink" title="extra_hosts"></a>extra_hosts</h4><p>指定额外的 host 名称映射信息</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">extra_hosts:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"googledns:8.8.8.8"</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"dockerhub:52.1.157.61"</span></span><br></pre></td></tr></table></figure><p>会在启动后的服务容器中 <code>/etc/hosts</code> 文件中添加如下两条条目。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8.8.8.8 googledns</span><br><span class="line">52.1.157.61 dockerhub</span><br></pre></td></tr></table></figure></li><li><h4 id="image"><a href="#image" class="headerlink" title="image"></a>image</h4><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code> 将会尝试拉取这个镜像。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">ubuntu</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">orchardup/postgresql</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">a4bc65fd</span></span><br></pre></td></tr></table></figure></li><li><h4 id="labels"><a href="#labels" class="headerlink" title="labels"></a>labels</h4><p>为容器添加 Docker 元数据（metadata）信息。例如可以为容器添加辅助说明信息。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">labels:</span></span><br><span class="line">  <span class="attr">com.startupteam.description:</span> <span class="string">"webapp for a startup team"</span></span><br><span class="line">  <span class="attr">com.startupteam.department:</span> <span class="string">"devops department"</span></span><br><span class="line">  <span class="attr">com.startupteam.release:</span> <span class="string">"rc3 for v1.0"</span></span><br></pre></td></tr></table></figure></li><li><h4 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h4><p>配置日志选项。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="comment"># 目前支持三种日志驱动类型 json-file syslog none</span></span><br><span class="line">  <span class="attr">driver:</span> <span class="string">syslog</span></span><br><span class="line">  <span class="attr">options:</span></span><br><span class="line">    <span class="attr">syslog-address:</span> <span class="string">"tcp://192.168.0.42:123"</span></span><br><span class="line">  <span class="comment"># options:</span></span><br><span class="line">  <span class="comment">#   max-size: "200k"</span></span><br><span class="line">  <span class="comment">#   max-file: "10"</span></span><br></pre></td></tr></table></figure></li><li><h4 id="network-mode"><a href="#network-mode" class="headerlink" title="network_mode"></a>network_mode</h4><p>设置网络模式。使用和 <code>docker run</code> 的 <code>--network</code> 参数一样的值。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">network_mode:</span> <span class="string">"bridge"</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">"host"</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">"none"</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">"service:[service name]"</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">"container:[container name/id]"</span></span><br></pre></td></tr></table></figure></li><li><h4 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h4><p>配置容器连接的网络。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">some-service:</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">some-network</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">other-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">some-network:</span></span><br><span class="line">  <span class="attr">other-network:</span></span><br></pre></td></tr></table></figure></li><li><h4 id="pid"><a href="#pid" class="headerlink" title="pid"></a>pid</h4><p>跟主机系统共享进程命名空间。打开该选项的容器之间，以及容器和宿主机系统之间可以通过进程 ID 来相互访问和操作。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pid:</span> <span class="string">"host"</span></span><br></pre></td></tr></table></figure></li><li><h4 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h4><p>暴露端口信息。</p><p>使用宿主端口：容器端口 <code>(HOST:CONTAINER)</code> 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"3000"</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"8000:8000"</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"49100:22"</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"127.0.0.1:8001:8001"</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><h4 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h4><p>数据卷所挂载路径设置。可以设置为宿主机路径(<code>HOST:CONTAINER</code>)或者数据卷名称(<code>VOLUME:CONTAINER</code>)，并且可以设置访问模式 （<code>HOST:CONTAINER:ro</code>）。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cache/:/tmp/cache</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">~/configs:/etc/configs/:ro</span></span><br></pre></td></tr></table></figure><p>如果路径为数据卷名称，必须在文件中配置数据卷。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">my_src:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_data:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql_data:</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 基础篇</title>
      <link href="/2020/07/31/docker/basic/"/>
      <url>/2020/07/31/docker/basic/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Docker是一种运行在Linux和Windows上的软件，用于创建、管理和编排容器</p></blockquote><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><ul><li><p>移除旧版本</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get remove docker \</span><br><span class="line">               docker-engine \</span><br><span class="line">               docker.io</span><br></pre></td></tr></table></figure></li><li><p>Apt 安装</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装https传输的软件包和ca证书</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加软件源的 GPG 密钥</span></span><br><span class="line">$ curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向 source.list 中添加 Docker 软件源</span></span><br><span class="line">$ sudo add-apt-repository \</span><br><span class="line">    <span class="string">"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string">    <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">    stable"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># $ sudo add-apt-repository \</span></span><br><span class="line"><span class="comment">#    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="comment">#    $(lsb_release -cs) \</span></span><br><span class="line"><span class="comment">#    stable"</span></span><br></pre></td></tr></table></figure></li><li><p>Docker CE 安装、启动</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以通过脚本自动化安装</span></span><br><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh --mirror Aliyun</span><br><span class="line"><span class="comment"># $ sudo sh get-docker.sh --mirror AzureChinaCloud</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>建立docker用户组</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立用户组</span></span><br><span class="line">$ sudo groupadd docker</span><br><span class="line"><span class="comment"># 将当前用户添加到docker组</span></span><br><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h4><ul><li><p>HomeBrew</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ brew cask install docker</span><br></pre></td></tr></table></figure></li><li><p>手动下载安装</p><p>如果需要手动下载，请点击以下链接下载 <a href="https://download.docker.com/mac/stable/Docker.dmg" target="_blank" rel="noopener">Stable</a> 或 <a href="https://download.docker.com/mac/edge/Docker.dmg" target="_blank" rel="noopener">Edge</a> 版本的 Docker Desktop for Mac。</p><p>如同 macOS 其它软件一样，安装也非常简单，双击下载的 <code>.dmg</code> 文件，然后将那只叫 <a href="https://www.docker.com/blog/call-me-moby-dock/" target="_blank" rel="noopener">Moby</a> 的鲸鱼图标拖拽到 <code>Application</code> 文件夹即可（其间需要输入用户密码）。</p><p><img src="https://gblobscdn.gitbook.com/assets%2F-M5xTVjmK7ax94c8ZQcm%2F-M5xT_hHX2g5ldlyp9nm%2F-M5xTlJn9xt8Kl8BbiGG%2Finstall-mac-dmg.png?alt=media" alt="img"></p></li></ul></li></ul><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><ul><li><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker search ubuntu</span><br></pre></td></tr></table></figure></li><li><h4 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 docker (image)  pull &lt;Registry&gt;/&lt;userName of Orgnization&gt;/&lt;Repository&gt;:&lt;Tag&gt;</span></span><br><span class="line"><span class="comment"># eg</span></span><br><span class="line">$ docker pull ubuntu:latest</span><br></pre></td></tr></table></figure></li><li><h4 id="列举镜像"><a href="#列举镜像" class="headerlink" title="列举镜像"></a>列举镜像</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列举格式 $ docker images &lt;repository&gt;:&lt;tag&gt;</span></span><br><span class="line"><span class="comment"># filter 参数过滤， 列举所有tag 为latest的镜像 (dangling, before, since, label, reference)</span></span><br><span class="line">$ docker image ls --filter reference=<span class="string">"*:latest"</span></span><br><span class="line"><span class="comment"># 格式化显示, 注意格式(大小写、标点)</span></span><br><span class="line">$ docker images --format <span class="string">"&#123;&#123;.Repository&#125;&#125;: &#123;&#123;.Size&#125;&#125;"</span></span><br><span class="line">$ docker image ls --format <span class="string">"table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Repository&#125;&#125;\t&#123;&#123;.Tag&#125;&#125;"</span></span><br><span class="line"><span class="comment"># 删除悬虚镜像</span></span><br><span class="line">$ docker image prune</span><br></pre></td></tr></table></figure></li><li><h4 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除格式， 其中镜像是镜像ID(长或短)、镜像名、镜像摘要</span></span><br><span class="line">$ docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有名为redis的镜像</span></span><br><span class="line">$ docker rmi $(docker image ls -q redis)</span><br></pre></td></tr></table></figure></li><li><h4 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h4><p>当我们运行一个容器的时候（如果不使用卷的话），我们做的任何文件修改都会被记录于容器存储层里。而 Docker 提供了一个 <code>docker commit</code> 命令，可以将容器的存储层保存下来成为镜像。换句话说，就是在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 产看容器内的变化</span></span><br><span class="line"><span class="comment"># 格式 docker diff &lt;容器ID或容器名&gt;</span></span><br><span class="line">$ docker diff webserver</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">  <span class="comment"># 格式 $ docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]</span></span><br><span class="line">  <span class="comment"># 例如, 在nginx容器中修改内容后</span></span><br><span class="line">  $ docker commit \</span><br><span class="line">      --author <span class="string">"jingyucute@gmail.com"</span> \</span><br><span class="line">      --message <span class="string">"update content"</span> \</span><br><span class="line">      webserver \</span><br><span class="line">      nginx:v2</span><br><span class="line">  <span class="comment"># 或者简写</span></span><br><span class="line">$ docker commit \</span><br><span class="line">      -a=<span class="string">"jingyucute@gmail.com"</span> \</span><br><span class="line">    -m=<span class="string">"update content"</span> \</span><br><span class="line">      webserver \</span><br><span class="line">    nginx:v2</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 产看镜像内的提交记录</span></span><br><span class="line"><span class="comment"># 格式 docker history &lt;仓库名&gt;[:&lt;标签&gt;</span></span><br><span class="line">$ docker <span class="built_in">history</span> nginx:v2</span><br></pre></td></tr></table></figure><p><strong>特别注意</strong></p><p><code>docker commit</code> 命令除了学习之外，还有一些特殊的应用场合，比如被入侵后保存现场等。但是，不要使用 <code>docker commit</code> 定制镜像，定制镜像应该使用 <code>Dockerfile</code> 来完成。使用 <code>docker commit</code> 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为 <strong>黑箱镜像</strong>，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体的操作。这种黑箱镜像的维护工作是非常痛苦的。</p></li><li><h4 id="使用Dockerfile制作镜像"><a href="#使用Dockerfile制作镜像" class="headerlink" title="使用Dockerfile制作镜像"></a>使用Dockerfile制作镜像</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 docker build [选项] &lt;上下文路径/URL/-&gt;</span></span><br><span class="line">$ docker build -t &lt;repository&gt;:&lt;tag&gt; .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接从Git repo中构建</span></span><br><span class="line">$ docker build https://github.com/twang2218/gitlab-ce-zh.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用给定的 tar 压缩包构建， 下载后会自动解压</span></span><br><span class="line">$ docker build http://server/context.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准输入构建</span></span><br><span class="line">$ docker build - &lt; context.tar.gz</span><br><span class="line"></span><br><span class="line">$ docker build - &lt; Dockerfile</span><br><span class="line"></span><br><span class="line">$ cat Dockerfile | docker build -</span><br></pre></td></tr></table></figure></li></ul><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><ul><li><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看正在运行的容器, 加上-a参数表示查看所有的容器(包括退出的)</span></span><br><span class="line">$ docker container ls [-a]</span><br><span class="line">$ docker ps [-a]</span><br></pre></td></tr></table></figure></li><li><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从镜像中创建并启动一个容器 , 参数自己查吧</span></span><br><span class="line"><span class="comment"># 格式 docker &lt;container&gt; run [--options]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互式运行ubuntu容器</span></span><br><span class="line"><span class="comment"># -i: 交互式操作。</span></span><br><span class="line"><span class="comment"># -t: 终端。</span></span><br><span class="line"><span class="comment"># ubuntu: ubuntu 镜像。</span></span><br><span class="line"><span class="comment"># /bin/bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash</span></span><br><span class="line">$ docker run -it ubuntu --name myOS /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 守护态运行一个容器 </span></span><br><span class="line"><span class="comment"># 格式 docker &lt;container&gt; run -d </span></span><br><span class="line">$ docker run -d ubuntu /bin/sh -c <span class="string">"while true; do echo hello world; sleep 1; done"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动一个停止了的容器</span></span><br><span class="line"><span class="comment"># 格式 docker &lt;container&gt; start &lt;Container-name-or-ID&gt;</span></span><br><span class="line">$ docker start myOS</span><br></pre></td></tr></table></figure></li><li><h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 docker &lt;container&gt; restart  &lt;Container-name-or-ID&gt;</span></span><br><span class="line">$ docker restart myOS</span><br></pre></td></tr></table></figure></li><li><h4 id="查看容器输出"><a href="#查看容器输出" class="headerlink" title="查看容器输出"></a>查看容器输出</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 docker &lt;container&gt; logs  &lt;Container-name-or-ID&gt;</span></span><br><span class="line">$ docker logs myOS</span><br></pre></td></tr></table></figure></li><li><h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 docker &lt;container&gt; stop  &lt;Container-name-or-ID&gt;</span></span><br><span class="line">$ docker stop myOS</span><br></pre></td></tr></table></figure></li><li><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除的容器不能是运行状态，可以先停止再删除, 也可以通过加上 -f 参数强删(不推荐)</span></span><br><span class="line"><span class="comment"># 格式 docker container rm &lt;Container-name-or-ID&gt; [-f]</span></span><br><span class="line">$ docker rm &lt;Container-name-or-ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清楚所有停止状态的容器</span></span><br><span class="line">$ docker container prune</span><br></pre></td></tr></table></figure></li><li><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 两种方式, 推荐使用方式二</span></span><br><span class="line"><span class="comment"># 方式一 docker attach &lt;Container-name-or-ID&gt;</span></span><br><span class="line"><span class="comment"># 这种方式退出终端，会导致容器停止</span></span><br><span class="line">$ docker attach myOS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式一 docker attach &lt;Container-name-or-ID&gt;</span></span><br><span class="line"><span class="comment"># 这种方式退出终端，会导致容器停止</span></span><br><span class="line">$ docker attach myOS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二 docker exec -it &lt;Container-name-or-ID&gt; bash</span></span><br><span class="line"><span class="comment"># 这种方式退出终端，容器不会停止</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it myOS bash</span><br></pre></td></tr></table></figure></li></ul><h3 id="Dockerfile参数说明"><a href="#Dockerfile参数说明" class="headerlink" title="Dockerfile参数说明"></a>Dockerfile参数说明</h3><ul><li><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。<code>FROM</code> 就是指定 <strong>基础镜像</strong>，因此一个 <code>Dockerfile</code> 中 <code>FROM</code> 是必备的指令，并且必须是第一条指令。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><p><code>RUN</code> 指令是用来执行命令行命令的。通常有两种形式：</p><p>​    shell格式 <code>RUN &lt;命令&gt;</code>  (常用格式)</p>  <figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure><p>​    exec格式 <code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code> . 这种形式好比函数调用</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">"./test.php"</span>, <span class="string">"dev"</span>, <span class="string">"offline"</span>] </span></span><br><span class="line"><span class="comment"># ====</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ./test.php dev offline</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>这里的RUN要尽量少， 多了会导致镜像臃肿， 因为镜像是按照层来构建的，一个<code>RUN</code>就是一层。所以可以使用 <code>&amp;&amp;</code> 来链接命令，使用 <code>\</code>来换行</p><p>举个例子：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:stretch</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y gcc libc6-dev make wget</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/redis</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> make -C /usr/src/redis</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> make -C /usr/src/redis install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------&gt; </span></span><br><span class="line"><span class="keyword">FROM</span> debian:stretch</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> buildDeps=<span class="string">'gcc libc6-dev make wget'</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y <span class="variable">$buildDeps</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mkdir -p /usr/src/redis \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; make -C /usr/src/redis \</span></span><br><span class="line"><span class="bash">    &amp;&amp; make -C /usr/src/redis install \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/* \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm redis.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -r /usr/src/redis \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get purge -y --auto-remove <span class="variable">$buildDeps</span></span></span><br></pre></td></tr></table></figure></li><li><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p><code>COPY</code>指令将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件/目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;</span></span><br><span class="line"><span class="comment"># COPY [--chown=&lt;user&gt;:&lt;group&gt;] ["&lt;源路径1&gt;",... "&lt;目标路径&gt;"] </span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> hom?.txt /mydir/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变文件的所属用户和用户组 --chown=&lt;user&gt;:&lt;group&gt;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --chown=55:mygroup files* /mydir/</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致(同样需求下， 推荐使用<code>COPY</code>)。</p><ul><li>ADD 的优点：在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;。</li><li>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</li></ul><p>在 <code>COPY</code> 和 <code>ADD</code> 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 改变文件的所属用户和用户组 --chown=&lt;user&gt;:&lt;group&gt;</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> --chown=55:mygroup files* /mydir/</span></span><br></pre></td></tr></table></figure></li><li><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p><code>CMD</code> 指令的格式和 <code>RUN</code> 相似。 </p><ul><li>CMD 在docker run 时运行。</li><li>RUN 是在 docker build。</li></ul><p><code>CMD</code>也有两种形式</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shell 格式：CMD &lt;命令&gt;</span></span><br><span class="line"><span class="comment"># exec 格式：CMD ["可执行文件", "参数1", "参数2"...]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$HOME</span></span></span><br><span class="line"><span class="comment"># ====</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"sh"</span>, <span class="string">"-c"</span>, <span class="string">"echo <span class="variable">$HOME</span>"</span> ]</span></span><br></pre></td></tr></table></figure><p>Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 <code>systemd</code> 去启动后台服务，容器内没有后台服务的概念。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CMD service nginx start</span></span><br><span class="line"><span class="comment"># 这个命令是将nginx作为后台服务来运行的， 应该写为一下形式</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span>]</span></span><br></pre></td></tr></table></figure></li><li><h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p><code>ENTRYPOINT</code> 的格式和 <code>RUN</code> 指令格式一样，分为 <code>exec</code> 格式和 <code>shell</code> 格式。</p><p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在运行时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定。</p><p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令。就可以理解为<code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 ENTRYPOINT ["&lt;executeable&gt;","&lt;param1&gt;","&lt;param2&gt;",...]</span></span><br></pre></td></tr></table></figure></li><li><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 ENV &lt;key&gt; &lt;value&gt; </span></span><br><span class="line"><span class="comment">#     ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span></span><br><span class="line">ENV NODE_VERSION 7.2.0</span><br><span class="line">RUN curl -SLO <span class="string">"https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz"</span> \</span><br><span class="line">  &amp;&amp; curl -SLO <span class="string">"https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/SHASUMS256.txt.asc"</span></span><br></pre></td></tr></table></figure></li><li><h4 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h4><p><code>ARG</code> 构建参数和 <code>ENV</code> 的效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 ARG &lt;参数名&gt;[=&lt;默认值&gt;]</span></span><br></pre></td></tr></table></figure><p>该默认值可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p></li><li><h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p>容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 VOLUME ["&lt;路径1&gt;", "&lt;路径2&gt;"...]</span></span><br><span class="line"><span class="comment">#     VOLUME &lt;路径&gt;</span></span><br><span class="line">VOLUME /data</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -v mydata:/data</span><br></pre></td></tr></table></figure><p>在这行命令中，就使用了 <code>mydata</code> 这个命名卷挂载到了 <code>/data</code> 这个位置，替代了 <code>Dockerfile</code> 中定义的匿名卷的挂载配置。</p></li><li><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p><code>EXPOSE</code> 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。</p><ul><li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li><li>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li></ul><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</span></span><br></pre></td></tr></table></figure><p>要将 <code>EXPOSE</code> 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code> 区分开来。<code>-p</code>，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 <code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p></li><li><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>使用 <code>WORKDIR</code> 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 格式 WORKDIR &lt;工作目录路径&gt;</span><br></pre></td></tr></table></figure><p><strong>谈一下误区</strong></p><p>初学者将<code>Dockerfile</code> 等同于 Shell 脚本来书写，会出现一下错误</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"hello"</span> &gt; world.txt</span></span><br></pre></td></tr></table></figure><p>将这个 <code>Dockerfile</code> 进行构建镜像运行后，会发现找不到 <code>/app/world.txt</code> 文件，或者其内容不是 <code>hello</code>。</p><p><strong>原因</strong>: <em>在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；在 <code>Dockerfile</code> 中，这两行 <code>RUN</code> 命令的执行环境根本不同，是两个完全不同的容器</em></p><p>每一个 <code>RUN</code> 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 <code>RUN cd /app</code> 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。</p></li><li><h4 id="USRE"><a href="#USRE" class="headerlink" title="USRE"></a>USRE</h4><p><code>USER</code> 指令和 <code>WORKDIR</code> 相似，都是改变环境状态并影响以后的层。<code>WORKDIR</code> 是改变工作目录，<code>USER</code> 则是改变之后层的执行 <code>RUN</code>, <code>CMD</code> 以及 <code>ENTRYPOINT</code> 这类命令的身份(用户和用户组必须提前已经存在)。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 USER &lt;用户名&gt;[:&lt;用户组&gt;]</span></span><br></pre></td></tr></table></figure></li></ul><p>- </p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用工具网址</title>
      <link href="/2020/07/28/tool-assistant/"/>
      <url>/2020/07/28/tool-assistant/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里记录一些常用的工具、网址等等</p></blockquote><a id="more"></a><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><hr><ul><li><a href="https://next.itellyou.cn/" target="_blank" rel="noopener">我告诉你</a></li><li><a href="https://favicon.io/" target="_blank" rel="noopener">简易图标制作</a></li><li><a href="https://icons8.cn/" target="_blank" rel="noopener">svg简易制作</a></li><li><a href="https://tool.lu/" target="_blank" rel="noopener">一个很有意思的小站</a></li></ul><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><hr><ul><li><p>Typora</p></li><li><p>V2rayU</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Helper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm 使用说明</title>
      <link href="/2020/07/15/nvm-usage/"/>
      <url>/2020/07/15/nvm-usage/</url>
      
        <content type="html"><![CDATA[<blockquote><p>简介</p><p> Nvm （Node Version Manager） 是node.js 的版本管理器，用它可以方便的在机器上安装并维护多个node版本。</p></blockquote><a id="more"></a><h2 id="1、安装和更新"><a href="#1、安装和更新" class="headerlink" title="1、安装和更新"></a>1、安装和更新</h2><h3 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h3><p>  下载并执行</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure><p>   或者</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure><p>  然后配置环境变量，将下面的内容添加到配置文件(<code>~/.bash_profile</code>，<code>~/.zshrc</code>，<code>~/.profile</code>，或<code>~/.bashrc</code>)</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$([ -z "$&#123;XDG_CONFIG_HOME-&#125;" ] &amp;&amp; printf %s "$&#123;HOME&#125;/.nvm" || printf %s "$&#123;XDG_CONFIG_HOME&#125;/nvm")</span>"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> <span class="comment"># This loads nvm</span></span><br></pre></td></tr></table></figure><h3 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h3><p> 1、克隆远程仓库到本地</p><p> 先 <code>cd ~</code> 切换到家目录， 然后执行<code>git clone https://github.com/nvm-sh/nvm.git .nvm</code></p><p> 2、进入到.nvm目录，切换到最近的版本</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.nvm</span><br><span class="line">git checkout v0.35.3</span><br></pre></td></tr></table></figure><p>3、 激活nvm</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bash nvm.sh</span><br></pre></td></tr></table></figure><p>4、 配置环境变量，文件位置同上，导入内容如下</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure><h3 id="nvm更新"><a href="#nvm更新" class="headerlink" title="nvm更新"></a>nvm更新</h3><p> 1、切换到<code>$NVM_DIR</code> (上面在环境变量中配置过了)</p><p> 2、拉取最新的提交节点</p><p> 3、切换到最新的版本</p><p> 4、激活新版本</p><p>可以直接在命令行中执行一下内容</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">  <span class="built_in">cd</span> <span class="string">"<span class="variable">$NVM_DIR</span>"</span></span><br><span class="line">  git fetch --tags origin</span><br><span class="line">  git checkout `git describe --abbrev=0 --tags --match <span class="string">"v[0-9]*"</span> $(git rev-list --tags --max-count=1)`</span><br><span class="line">) &amp;&amp; bash <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span></span><br></pre></td></tr></table></figure><h2 id="2、相关使用"><a href="#2、相关使用" class="headerlink" title="2、相关使用"></a>2、相关使用</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看已经安装的版本</span></span><br><span class="line">nvm ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看可以安装的所有版本</span></span><br><span class="line">nvm ls-remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有长期支持版本（LTS）</span></span><br><span class="line">nvm ls-remote --lts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看最新lts</span></span><br><span class="line">nvm version-remote --lts    nvm version-remote lts/erbium</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新lts</span></span><br><span class="line">nvm install --lts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装或卸载指定node版本</span></span><br><span class="line">nvm install v12.18.2    nvm uninstall v12.18.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用node</span></span><br><span class="line">nvm use v12.18.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置或取消别名</span></span><br><span class="line">nvm <span class="built_in">alias</span> product v12.18.2     nvm <span class="built_in">unalias</span> product</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装io.js</span></span><br><span class="line">nvm install iojs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看node安装位置</span></span><br><span class="line">nvm <span class="built_in">which</span> v12.18.2</span><br></pre></td></tr></table></figure><blockquote><p>本文参考地址</p><p><a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">https://github.com/nvm-sh/nvm</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nvm </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora快捷键使用(Mac)</title>
      <link href="/2020/06/25/typora-usage/"/>
      <url>/2020/06/25/typora-usage/</url>
      
        <content type="html"><![CDATA[<blockquote><p>简介</p><p>刚开始搭建自己的博客， 学习了一下Markdown语法和Typora，这里记录了一下相关快捷键的使用。</p></blockquote><a id="more"></a><h1 id="1、基本操作"><a href="#1、基本操作" class="headerlink" title="1、基本操作"></a>1、基本操作</h1><h2 id="1-1-生成目录"><a href="#1-1-生成目录" class="headerlink" title="1.1 生成目录"></a>1.1 生成目录</h2><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[toc]</span><br></pre></td></tr></table></figure></li><li><p>效果图</p><p>[toc]</p></li></ul><h2 id="1-2-标题"><a href="#1-2-标题" class="headerlink" title="1.2 标题"></a>1.2 标题</h2><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#     一级标题</span><br><span class="line">##    二级标题</span><br><span class="line">###   三级标题</span><br><span class="line">####  四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">######六级标题</span><br></pre></td></tr></table></figure></li><li><p>快捷键</p><p>Command + [1, 2, 3, 4, 5, 6] 分别对应几级标题</p></li></ul><h2 id="1-3-引用"><a href="#1-3-引用" class="headerlink" title="1.3 引用"></a>1.3 引用</h2><ul><li><p>语法</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 引用内容1</span></span><br><span class="line"><span class="code">&gt;&gt; 引用内容2</span></span><br><span class="line"><span class="code">&gt;&gt; 引用内容3</span></span><br></pre></td></tr></table></figure></li><li><p>快捷键</p><p>Command + Option + Q</p></li><li><p>效果图</p><blockquote><p>引用内容1</p><blockquote><p>引用内容2</p><blockquote><p>引用内容3</p></blockquote></blockquote></blockquote></li></ul><h2 id="1-4-文本居中"><a href="#1-4-文本居中" class="headerlink" title="1.4 文本居中"></a>1.4 文本居中</h2><ul><li><p>语法</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span>居中文本<span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>效果图 </p> <center>居中文本</center></li></ul><h1 id="2-、code使用"><a href="#2-、code使用" class="headerlink" title="2 、code使用"></a>2 、code使用</h1><h2 id="2-1-单行代码"><a href="#2-1-单行代码" class="headerlink" title="2.1 单行代码"></a>2.1 单行代码</h2><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;String str &#x3D; &quot;Hello Typora&quot;;&#96;</span><br><span class="line">&#96;&#96;String str &#x3D; &quot;Hello Typora&quot;;&#96;&#96;</span><br></pre></td></tr></table></figure></li><li><p>效果图</p><p><code>String str = &quot;Hello Typora&quot;;</code></p></li></ul><h2 id="2-2-多行代码"><a href="#2-2-多行代码" class="headerlink" title="2.2 多行代码"></a>2.2 多行代码</h2><ul><li><p>语法</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入 <span class="code">```</span>[language] + enter</span><br><span class="line">或者 <span class="code">```</span> + enter , 然后选择语言类型</span><br></pre></td></tr></table></figure></li><li><p>快捷键</p><p>Command + Option + C</p></li><li><p>效果图</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">3</span>;</span><br><span class="line">count&lt;&lt;<span class="string">"a="</span>&lt;&lt;a&lt;&lt;<span class="string">", b="</span>&lt;&lt;b&lt;&lt;<span class="string">", c="</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></li></ul><h1 id="3、列表"><a href="#3、列表" class="headerlink" title="3、列表"></a>3、列表</h1><h2 id="3-1-无序列表"><a href="#3-1-无序列表" class="headerlink" title="3.1 无序列表"></a>3.1 无序列表</h2><ul><li><p>语法</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>(+) [space]</span><br><span class="line"><span class="bullet">- </span>(+) [space]</span><br><span class="line"><span class="bullet">+ </span>(+) [space]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>快捷键</p><p>Command + Option + U</p></li><li><p>效果图</p><ul><li>类别一</li><li>类别二</li><li>类别三</li></ul></li></ul><h2 id="3-2-有序列表"><a href="#3-2-有序列表" class="headerlink" title="3.2 有序列表"></a>3.2 有序列表</h2><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. (+) [space]</span><br><span class="line">2. (+) [space]</span><br><span class="line">3. (+) [space]</span><br></pre></td></tr></table></figure></li><li><p>快捷键</p><p>Command + Option + O</p></li><li><p>效果图</p><ol><li>类别1</li><li>类别2</li><li>类别3</li></ol></li></ul><h2 id="3-3-任务列表"><a href="#3-3-任务列表" class="headerlink" title="3.3 任务列表"></a>3.3 任务列表</h2><ul><li><p>语法</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">形式: - [ ] 文本   为未选中文本</span><br><span class="line"><span class="bullet"> - </span>[x] 文本   为选中文本</span><br><span class="line">注意: -和[之间有空格, [和]之间有空格, ]和文本之间有空格</span><br></pre></td></tr></table></figure></li><li><p>快捷键</p><p>Command + Option + X</p></li><li><p>效果图</p><ul><li><input checked="" disabled="" type="checkbox"> 钓鱼</li><li><input checked="" disabled="" type="checkbox"> 编程</li><li><input checked="" disabled="" type="checkbox"> 散步</li><li><input disabled="" type="checkbox"> 游戏</li><li><input disabled="" type="checkbox"> 电影</li></ul></li></ul><h2 id="3-4-表格"><a href="#3-4-表格" class="headerlink" title="3.4 表格"></a>3.4 表格</h2><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|姓名|性别|年龄|手机号|</span><br><span class="line">|:---|:--:|:--:|:---:|</span><br><span class="line">|张三|男|21|18975346876|</span><br><span class="line">|李四|女|23|17789548964|</span><br><span class="line">|王五|男|25|15876513546|</span><br></pre></td></tr></table></figure></li><li><p>快捷键</p><p>Command + Option + T</p></li><li><p>效果图</p><table><thead><tr><th align="left">姓名</th><th align="center">性别</th><th align="center">年龄</th><th align="center">手机号</th></tr></thead><tbody><tr><td align="left">张三</td><td align="center">男</td><td align="center">21</td><td align="center">18975346876</td></tr><tr><td align="left">李四</td><td align="center">女</td><td align="center">23</td><td align="center">17789548964</td></tr><tr><td align="left">王五</td><td align="center">男</td><td align="center">25</td><td align="center">15876513546</td></tr></tbody></table></li></ul><h1 id="4、链接"><a href="#4、链接" class="headerlink" title="4、链接"></a>4、链接</h1><h2 id="4-1-图片"><a href="#4-1-图片" class="headerlink" title="4.1 图片"></a>4.1 图片</h2><ul><li><p>语法</p><ul><li><p>本地图片</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">直接拖进来</span><br></pre></td></tr></table></figure></li><li><p>网络图片</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">杭州西湖.jpg</span>](<span class="link">https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1593110861170&amp;di=6651925eaab36bfeb23347aa51a12cb7&amp;imgtype=0&amp;src=http%3A%2F%2Fa3.att.hudong.com%2F14%2F75%2F01300000164186121366756803686.jpg</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>效果图</p><ul><li><p>本地 </p><img src="/Users/jingyu/work/local/yjy_blog/public/assets/images/timg.jpeg" alt="timg" style="zoom:25%;" /></li><li><p>网络</p><p> <img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593110861170&di=6651925eaab36bfeb23347aa51a12cb7&imgtype=0&src=http%3A%2F%2Fa3.att.hudong.com%2F14%2F75%2F01300000164186121366756803686.jpg" alt="杭州西湖" title="西湖美景"></p></li></ul></li></ul><h2 id="4-2-文本链接"><a href="#4-2-文本链接" class="headerlink" title="4.2 文本链接"></a>4.2 文本链接</h2><ul><li><p>语法</p><ul><li><p>不显示链接网址</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[百度](https:&#x2F;&#x2F;www.baidu.com)</span><br></pre></td></tr></table></figure></li><li><p>只显示链接url</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;https:&#x2F;&#x2F;www.baidu.com&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>快捷键</p><p>Command + K</p></li><li><p>效果图</p><ul><li><p>不显示地址</p><p><a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a></p></li><li><p>只显示url</p><p><a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a></p></li></ul></li></ul><h1 id="5、其它快捷键"><a href="#5、其它快捷键" class="headerlink" title="5、其它快捷键"></a>5、其它快捷键</h1><h2 id="5-1-斜体"><a href="#5-1-斜体" class="headerlink" title="5.1 斜体"></a>5.1 斜体</h2><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体文字1*</span><br><span class="line">_斜体文字2_</span><br></pre></td></tr></table></figure></li><li><p>快捷键</p><p>Command + I</p></li><li><p>效果图</p><p><em>斜体文字1</em></p><p><em>斜体文字2</em></p></li></ul><h2 id="5-2-粗体"><a href="#5-2-粗体" class="headerlink" title="5.2 粗体"></a>5.2 粗体</h2><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**粗体文字1**</span><br><span class="line">__粗体文字2__</span><br></pre></td></tr></table></figure></li><li><p>快捷键</p><p>Command + B</p></li><li><p>效果图</p><p><strong>粗体文字1</strong></p><p><strong>粗体文字2</strong></p></li></ul><h2 id="5-3-加粗斜体"><a href="#5-3-加粗斜体" class="headerlink" title="5.3 加粗斜体"></a>5.3 加粗斜体</h2><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***加粗斜体文字1***</span><br><span class="line">___加粗斜体文字2___</span><br></pre></td></tr></table></figure></li><li><p>效果图</p><p><strong><em>加粗斜体文字1</em></strong></p><p><strong><em>加粗斜体文字2</em></strong></p></li></ul><h2 id="5-4-下划线"><a href="#5-4-下划线" class="headerlink" title="5.4 下划线"></a>5.4 下划线</h2><ul><li><p>语法</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线文字<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>快捷键</p><p>Command + U</p></li><li><p>效果图</p><p><u>下划线文字</u></p></li></ul><h2 id="5-5-删除线"><a href="#5-5-删除线" class="headerlink" title="5.5 删除线"></a>5.5 删除线</h2><ul><li><p>语法</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">~~删除文字~~</span><br></pre></td></tr></table></figure></li><li><p>快捷键</p><p>Control + Shift + `</p></li><li><p>效果图</p><p><del>删除文字</del></p></li></ul><h2 id="5-6-分割线"><a href="#5-6-分割线" class="headerlink" title="5.6 分割线"></a>5.6 分割线</h2><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--- (+) [enter]</span><br><span class="line">*** (+) [enter]</span><br></pre></td></tr></table></figure></li><li><p>快捷键</p><p>Command (+) Option (+) -</p></li><li><p>效果图</p><hr></li></ul><h2 id="5-7-脚注"><a href="#5-7-脚注" class="headerlink" title="5.7 脚注"></a>5.7 脚注</h2><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Typora1[^1]</span><br><span class="line">Typora2[^2]</span><br></pre></td></tr></table></figure></li><li><p>快捷键</p><p>Command + Option + R</p></li><li><p>效果图</p><p>Typora<a href="Typora1">^1</a></p><p>Typora2<a href="Typora2">^2</a></p></li></ul><h2 id="5-8-符号输入"><a href="#5-8-符号输入" class="headerlink" title="5.8 符号输入"></a>5.8 符号输入</h2><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\\   反斜线</span><br><span class="line">\&#96;   反引号</span><br><span class="line">\*   星号</span><br><span class="line">\_   底线</span><br><span class="line">\&#123; \&#125;  花括号</span><br><span class="line">\[ \]  方括号</span><br><span class="line">\( \)  括弧</span><br><span class="line">\#   井字号</span><br><span class="line">\+   加号</span><br><span class="line">\-   减号</span><br><span class="line">\.   英文句点</span><br><span class="line">\!   惊叹号</span><br></pre></td></tr></table></figure></li><li><p>效果图</p><p>\</p></li></ul><h2 id="5-9-特殊字符"><a href="#5-9-特殊字符" class="headerlink" title="5.9 特殊字符"></a>5.9 特殊字符</h2><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;copy;      版权      </span><br><span class="line">&amp;reg;       注册商标</span><br><span class="line">&amp;trade;     商标</span><br><span class="line">&amp;nbsp;      空格</span><br><span class="line">&amp;       和号</span><br><span class="line">&quot;      引号</span><br><span class="line">&amp;apos;      撇号</span><br><span class="line">&lt;        小于号</span><br><span class="line">&gt;        大于号</span><br><span class="line">&amp;ne;        不等号</span><br><span class="line">&amp;le;        小于等于</span><br><span class="line">&amp;ge;        大于等于</span><br><span class="line">&amp;cent;      分</span><br><span class="line">&amp;pound;     磅</span><br><span class="line">&amp;euro;      欧元</span><br><span class="line">&amp;yen;       元</span><br><span class="line">&amp;sect;      节</span><br><span class="line">&amp;times;     乘号</span><br><span class="line">&amp;divide;    除号</span><br><span class="line">&amp;plusmn;    正负号</span><br></pre></td></tr></table></figure></li><li><p>效果图</p><p>&copy;</p><p>&pound;</p><p>&apos;</p><p>&euro;</p></li></ul><h2 id="5-10-表情"><a href="#5-10-表情" class="headerlink" title="5.10 表情"></a>5.10 表情</h2><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:smiley:</span><br></pre></td></tr></table></figure></li><li><p>效果图</p><p>:smile:</p><p>:unamused:</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
