<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo搭建个人博客</title>
    <url>/2023/02/21/hexo-theme-use/</url>
    <content><![CDATA[<blockquote>
<p>本文记录使用Hexo快速搭建个人博客</p>
</blockquote>
<span id="more"></span>

<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><h4 id="node"><a href="#node" class="headerlink" title="node"></a>node</h4><p>个人习惯使用nvm管理node版本，参考</p>
<h4 id="node包安装"><a href="#node包安装" class="headerlink" title="node包安装"></a>node包安装</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install -g yarn hexo-cli</span></span><br></pre></td></tr></table></figure></div>
<h3 id="博客项目"><a href="#博客项目" class="headerlink" title="博客项目"></a>博客项目</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init blog</span></span><br></pre></td></tr></table></figure></div>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo s</span></span><br></pre></td></tr></table></figure></div>
<p>截图<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/jingyucute/cdn-assets/picgo/202302211233167.png"
                      alt="2023-02-21_10-12" style="zoom:80%;" 
                ></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/jingyucute/cdn-assets/picgo/202302211234581.png"
                      alt="2023-02-21_10-14" style="zoom: 40%;" 
                >

<p>这样，一个简单的博客就搭建好了。然而，这还不够，我们还可以设置一个主题</p>
<h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><p>我们可以从<a class="link"   href="https://hexo.io/themes/" >hexo主题 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>上选择一个自己喜欢的主题进行下载，我选择的是redefine。</p>
<p>要修改主题的配置，只需要创建<code>_config.[theme].yml</code>文件，对主题中的配置进行覆盖</p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add hexo-theme-redefine</span></span><br></pre></td></tr></table></figure></div>

<h4 id="创建-config-redefine-yml"><a href="#创建-config-redefine-yml" class="headerlink" title="创建_config.redefine.yml"></a>创建<code>_config.redefine.yml</code></h4><p>填充下面的内容</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">redefine</span></span><br></pre></td></tr></table></figure></div>

<h4 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo s --config _config.yml,_config.redefine.yml</span></span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/jingyucute/cdn-assets/picgo/202302211316456.png"
                      alt="2023-02-21_10-47" style="zoom:40%;" 
                >

<p>这样，主题也就切换成功了</p>
<h3 id="个人主题配置"><a href="#个人主题配置" class="headerlink" title="个人主题配置"></a>个人主题配置</h3><p>redefine主题的修改，可以参考<a class="link"   href="https://redefine-docs.ohevan.com/docs/intro" >官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="主题中需要的node包"><a href="#主题中需要的node包" class="headerlink" title="主题中需要的node包"></a>主题中需要的node包</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add hexo-theme-redefine hexo-wordcount hexo-generator-searchdb</span></span><br></pre></td></tr></table></figure></div>

<h4 id="config-redefine-yml"><a href="#config-redefine-yml" class="headerlink" title="_config.redefine.yml"></a><code>_config.redefine.yml</code></h4><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#  1. Prepare install</span></span><br><span class="line"><span class="comment">#  yarn add hexo-theme-redefine hexo-wordcount hexo-generator-searchdb</span></span><br><span class="line"><span class="comment">#  2. 删除原先生成的categories tags, 重新生成</span></span><br><span class="line"><span class="comment">#   rm -rf source/categories source/tags</span></span><br><span class="line"><span class="comment">#   hexo new page categories</span></span><br><span class="line"><span class="comment">#   hexo new page tags</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">redefine</span></span><br><span class="line"><span class="attr">theme_config:</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment">#  Your basic info</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">base_info:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&quot;Yaurora&#x27;s Blog&quot;</span> <span class="comment"># Site title</span></span><br><span class="line">    <span class="attr">author:</span> <span class="string">Yaurora</span> <span class="comment"># Author name</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://jingyu.life</span> <span class="comment"># Site url</span></span><br><span class="line">    <span class="comment"># Logo image (You can use local image, image external link or don’t fill)</span></span><br><span class="line">    <span class="attr">logo_img:</span> <span class="comment"># logo image on the left of the navigation bar</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Theme style settings</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">style:</span></span><br><span class="line">    <span class="comment"># Theme primary color</span></span><br><span class="line">    <span class="attr">primary_color:</span> <span class="string">&#x27;#005080&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Avatar (You can use local image or image external link)</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">&#x27;https://cdn.jsdelivr.net/gh/jingyucute/cdn-assets/avatar/young.jpg&#x27;</span> <span class="comment"># avatar of the author</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Favicon (You can use local image or image external link)</span></span><br><span class="line">    <span class="attr">favicon:</span> <span class="string">&#x27;https://cdn.jsdelivr.net/gh/jingyucute/cdn-assets/favicon/favicon.ico&#x27;</span> <span class="comment"># favicon of the site</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Article image align position</span></span><br><span class="line">    <span class="attr">article_img_align:</span> <span class="string">center</span> <span class="comment"># value: left | center</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Right side width</span></span><br><span class="line">    <span class="attr">right_side_width:</span> <span class="string">210px</span> <span class="comment">#sidebar width, for toc</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Content area max width</span></span><br><span class="line">    <span class="attr">content_max_width:</span> <span class="string">1000px</span> <span class="comment">#content max width, for article</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#navigation bar background color (from left to right)</span></span><br><span class="line">    <span class="attr">nav_color:</span></span><br><span class="line">      <span class="attr">left:</span> <span class="string">&#x27;#f78736&#x27;</span> <span class="comment">#left side</span></span><br><span class="line">      <span class="attr">right:</span> <span class="string">&#x27;#367df7&#x27;</span> <span class="comment">#right side</span></span><br><span class="line">      <span class="attr">transparency:</span> <span class="number">35</span> <span class="comment">#percent (10-99)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Mouse hover</span></span><br><span class="line">    <span class="attr">hover:</span></span><br><span class="line">      <span class="attr">shadow:</span> <span class="literal">true</span> <span class="comment"># shadow effect when the mouse hover</span></span><br><span class="line">      <span class="attr">scale:</span> <span class="literal">false</span> <span class="comment"># scale effect when the mouse hover</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># First screen</span></span><br><span class="line">    <span class="attr">first_screen:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">background_image:</span></span><br><span class="line">        <span class="attr">light:</span> <span class="string">https://evan.beee.top/img/wallhaven-wqery6-light.webp</span> <span class="comment"># background image of the first screen, use relative path or external link (if your website is in subdirectory, use external link)</span></span><br><span class="line">        <span class="attr">dark:</span> <span class="string">https://evan.beee.top/img/wallhaven-wqery6-dark.webp</span> <span class="comment"># background image of the first screen, use relative path or external link (if your website is in subdirectory, use external link)</span></span><br><span class="line">      <span class="attr">title_color:</span></span><br><span class="line">        <span class="attr">light:</span> <span class="string">&#x27;#fff&#x27;</span> <span class="comment"># first screen title color (light mode)</span></span><br><span class="line">        <span class="attr">dark:</span> <span class="string">&#x27;#d1d1b6&#x27;</span> <span class="comment"># first screen title color (dark mode)</span></span><br><span class="line">      <span class="attr">font_sizes:</span></span><br><span class="line">        <span class="attr">title:</span> <span class="number">2.</span><span class="string">8rem</span> <span class="comment"># first screen title font size</span></span><br><span class="line">        <span class="attr">subtitle:</span> <span class="number">1.</span><span class="string">5rem</span> <span class="comment"># first screen subtitle font size</span></span><br><span class="line">      <span class="attr">line_height:</span> <span class="number">1.2</span> <span class="comment"># first screen title line height</span></span><br><span class="line">      <span class="attr">title:</span> <span class="string">&#x27;悟&#x27;</span> <span class="comment"># the title in the middle of the first screen. HTML supported (e.g. svg html code of your logo)</span></span><br><span class="line">      <span class="attr">subtitle:</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">list:</span></span><br><span class="line">          [</span><br><span class="line">            <span class="string">&#x27;A % B = A - (A / B) * B&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;目之所及,皆是回忆; 心之所想,皆是过往; 眼之所看,皆是遗憾.&#x27;</span></span><br><span class="line">          ]</span><br><span class="line">      <span class="attr">custom_font:</span> <span class="comment"># custom font for the first screen</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">font_family:</span> <span class="comment"># the font family name of the url below</span></span><br><span class="line">        <span class="attr">font_url:</span> <span class="comment"># The url to the font file</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Scroll style settings</span></span><br><span class="line">    <span class="attr">scroll:</span></span><br><span class="line">      <span class="attr">progress_bar:</span> <span class="comment"># reading progress bar</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">percent:</span> <span class="comment"># reading progress percent</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Social contact link</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">social_contact:</span> <span class="comment"># social contact icons in the first screen, you can add more by using fontawesome icon names</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">https://github.com/jingyucute</span> <span class="comment"># your GitHub URL</span></span><br><span class="line">      <span class="attr">instagram:</span> <span class="comment"># your Instagram URL</span></span><br><span class="line">      <span class="attr">zhihu:</span> <span class="comment"># your ZhiHu URL</span></span><br><span class="line">      <span class="attr">twitter:</span> <span class="comment"># your twitter URL</span></span><br><span class="line">      <span class="attr">email:</span> <span class="string">jingyucute@gmail.com</span> <span class="comment"># your email</span></span><br><span class="line">      <span class="comment"># ...... # you can add more</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Navigation menu</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">menu:</span> <span class="comment">#you can customize, i18n files are in the theme&#x27;s languages folder. fa-regular recommended</span></span><br><span class="line">    <span class="attr">Home:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fa-regular</span> <span class="string">fa-house</span> <span class="comment"># can be empty</span></span><br><span class="line"></span><br><span class="line">    <span class="string">文章:</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fa-regular</span> <span class="string">fa-archive</span></span><br><span class="line">      <span class="attr">submenus:</span></span><br><span class="line">        <span class="attr">Archives:</span> <span class="string">/archives</span></span><br><span class="line">        <span class="string">分类:</span> <span class="string">/categories</span></span><br><span class="line">        <span class="string">标签:</span> <span class="string">/tags</span></span><br><span class="line">    <span class="comment"># Status:</span></span><br><span class="line">    <span class="comment">#   path: https://status.evanluo.top/</span></span><br><span class="line">    <span class="comment">#   icon: fa-regular fa-chart-bar</span></span><br><span class="line">    <span class="attr">Links:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/friends</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fa-regular</span> <span class="string">fa-link</span></span><br><span class="line">    <span class="attr">About:</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fa-regular</span> <span class="string">fa-user</span></span><br><span class="line">      <span class="attr">submenus:</span></span><br><span class="line">        <span class="attr">Me:</span> <span class="string">/about</span></span><br><span class="line">        <span class="attr">Github:</span> <span class="string">https://github.com/jingyucute</span></span><br><span class="line">        <span class="string">书籍:</span> <span class="string">/books</span></span><br><span class="line">    <span class="comment"># Links:</span></span><br><span class="line">    <span class="comment">#   icon: fa-regular fa-link</span></span><br><span class="line">    <span class="comment">#   submenus:</span></span><br><span class="line">    <span class="comment">#     Link1: /link1</span></span><br><span class="line">    <span class="comment">#     Link2: /link2</span></span><br><span class="line">    <span class="comment">#     Link3: /link3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...... # you can add more</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Home page article block display settings</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">home_article:</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">auto</span> <span class="comment"># date format in home page article block, value: auto | relative | YYYY-MM-DD | YYYY.MM.DD HH:mm:ss | DD/MM/YYYY | and etc. Support moment js format, see: https://momentjscom.readthedocs.io/en/latest/moment/04-displaying/01-format/</span></span><br><span class="line">    <span class="attr">category:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># show category in home page article block</span></span><br><span class="line">      <span class="attr">limit:</span> <span class="number">3</span> <span class="comment"># max number of categories shown in home page article block</span></span><br><span class="line">    <span class="attr">tag:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># show tags in home page article block</span></span><br><span class="line">      <span class="attr">limit:</span> <span class="number">3</span> <span class="comment"># max number of tags shown in home page article block</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Post page Settings</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="comment"># Post word count</span></span><br><span class="line">    <span class="comment"># Dependencies: hexo-wordcount (npm install hexo-wordcount)</span></span><br><span class="line">    <span class="comment"># See: https://github.com/willin/hexo-wordcount</span></span><br><span class="line">    <span class="attr">word_count:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">wordcount:</span> <span class="literal">true</span> <span class="comment"># word count, one article</span></span><br><span class="line">      <span class="attr">min2read:</span> <span class="literal">true</span> <span class="comment"># time to read, one article</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Author label</span></span><br><span class="line">    <span class="attr">author_label:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">auto:</span> <span class="literal">false</span> <span class="comment"># if true, show Lv1, Lv2, Lv3... , If false, show custom label</span></span><br><span class="line">      <span class="comment"># label array item can be one or more</span></span><br><span class="line">      <span class="attr">custom_label_list:</span> [<span class="string">&#x27;lol&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Code copy</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">code_block:</span></span><br><span class="line">    <span class="attr">copy:</span> <span class="literal">true</span> <span class="comment"># enable code copy button</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span> <span class="comment"># mac | simple</span></span><br><span class="line">    <span class="attr">custom_font:</span> <span class="comment"># custom font family, default: Ubuntu Mono</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">font_family:</span> <span class="comment"># font family name</span></span><br><span class="line">      <span class="attr">font_url:</span> <span class="comment"># font url</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Table of Contents in the Sidebar</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">toc:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">    <span class="attr">number:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">    <span class="attr">expand_all:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If true, open TOC every time when you enter the article page</span></span><br><span class="line">    <span class="attr">init_open:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Post copyright info</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">copyright_info:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Website count</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">website_count:</span></span><br><span class="line">    <span class="comment"># busuanzi</span></span><br><span class="line">    <span class="comment"># See: http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line">    <span class="attr">busuanzi_count:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">site_uv:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">site_pv:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">page_pv:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Local Search</span></span><br><span class="line">  <span class="comment"># Dependencies: hexo-generator-searchdb</span></span><br><span class="line">  <span class="comment"># See: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment">## 配合安装 hexo-generator-searchdb</span></span><br><span class="line">  <span class="attr">local_search:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否在页面加载时预加载搜索数据</span></span><br><span class="line">    <span class="attr">preload:</span> <span class="literal">true</span> <span class="comment"># Preload the search data when the page loads</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## 需要设置 local_search.enable = true</span></span><br><span class="line">  <span class="attr">search:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">search.json</span></span><br><span class="line">    <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">    <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">striptags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Comment plugin</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">comment:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">waline</span> <span class="comment"># values: waline | gitalk | twikoo</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Waline</span></span><br><span class="line">    <span class="comment"># See: https://waline.js.org/guide/get-started.html</span></span><br><span class="line">    <span class="attr">waline:</span></span><br><span class="line">      <span class="attr">serverUrl:</span> <span class="comment"># Waline server url(vercel) example: https://example.example.com</span></span><br><span class="line">      <span class="attr">lang:</span> <span class="string">zh-CN</span> <span class="comment"># Waline language, default: zh-CN. See: https://waline.js.org/guide/client/i18n.html</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Gitalk</span></span><br><span class="line">    <span class="comment"># See: https://github.com/gitalk/gitalk</span></span><br><span class="line">    <span class="attr">gitalk:</span></span><br><span class="line">      <span class="attr">github_id:</span> <span class="comment"># GitHub repo owner</span></span><br><span class="line">      <span class="attr">repository:</span> <span class="comment"># Repository name to store issues</span></span><br><span class="line">      <span class="attr">client_id:</span> <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">      <span class="attr">client_secret:</span> <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Twikoo</span></span><br><span class="line">    <span class="comment"># See: https://github.com/imaegoo/twikoo</span></span><br><span class="line">    <span class="attr">twikoo:</span></span><br><span class="line">      <span class="attr">visitor:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">version:</span> <span class="number">1.6</span><span class="number">.10</span> <span class="comment"># Twikoo version, do not modify if you dont know what it is</span></span><br><span class="line">      <span class="attr">env_id:</span> <span class="comment"># Vercel or Tencent Cloud Function environment ID</span></span><br><span class="line">      <span class="attr">region:</span> <span class="comment"># environment region. If select Guangzhou, fill in &quot;ap-guangzhou&quot;. (optional)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Friend Links page</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">friend_links:</span></span><br><span class="line">    <span class="attr">columns:</span> <span class="number">3</span> <span class="comment"># number of columns. 2 or 3</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># RSS</span></span><br><span class="line">  <span class="comment"># Dependencies: hexo-generator-feed</span></span><br><span class="line">  <span class="comment"># See: https://github.com/hexojs/hexo-generator-feed</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">rss:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">feed:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Lazyload image</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">lazyload:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># CDN</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">cdn:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">jsdelivr</span> <span class="comment"># values: jsdelivr | unpkg | aliyun</span></span><br><span class="line">    <span class="comment"># aliyun cdn is funded by myself, so if you want to make it work longer, please donate to me.</span></span><br><span class="line">    <span class="comment"># For donation, please see https://github.com/EvanNotFound/hexo-theme-redefine/blob/dev/DONATION.md</span></span><br><span class="line">    <span class="comment"># Thank you for your support.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># PJAX</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">pjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Article recommendation (transplant from Volantis)</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">recommended_article:</span> <span class="comment"># 文章推荐，需要 npm install nodejieba</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">推荐阅读</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-solid</span> <span class="string">fa-bookmark</span></span><br><span class="line">    <span class="attr">max_count:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">placeholder_img:</span> <span class="string">https://evan.beee.top/img/wallhaven-wqery6-light.webp</span></span><br><span class="line">    <span class="comment"># 不展示文章推荐：</span></span><br><span class="line">    <span class="comment"># front-matter 使用 skip_recommended_article: true 关闭</span></span><br><span class="line">    <span class="comment"># 不在以下文件夹文章中展示文章推荐 根目录是source/</span></span><br><span class="line">    <span class="attr">skip_dirs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">wiki/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Fontawesome</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">fontawesome:</span> <span class="comment"># select fontawesome versions you want to use, in order to reduce the loading time, select as few as possible</span></span><br><span class="line">    <span class="attr">thin:</span> <span class="literal">false</span> <span class="comment"># use fontawesome thin version or not</span></span><br><span class="line">    <span class="attr">light:</span> <span class="literal">false</span> <span class="comment"># use fontawesome light version or not</span></span><br><span class="line">    <span class="attr">duotone:</span> <span class="literal">false</span> <span class="comment"># use fontawesome duotone version or not</span></span><br><span class="line">    <span class="attr">sharp_solid:</span> <span class="literal">false</span> <span class="comment"># use fontawesome sharp-solid version or not</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Footer settings</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">footer:</span></span><br><span class="line">    <span class="attr">runtime:</span> <span class="literal">true</span> <span class="comment"># show website running time or not</span></span><br><span class="line">    <span class="attr">start_time:</span> <span class="number">2020</span><span class="string">/05/01</span> <span class="number">00</span><span class="string">:00:00</span> <span class="comment"># the starting time of your website, format: yyyy/mm/dd hh:mm:ss</span></span><br><span class="line">    <span class="attr">customize:</span> <span class="comment"># customize footer message, can be html code</span></span><br><span class="line">    <span class="attr">icp:</span> <span class="comment"># ICP record number of your website, Can be null</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">number:</span> <span class="comment"># ICP record number</span></span><br><span class="line">      <span class="attr">url:</span> <span class="comment"># ICP record url</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Custom html code</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">inject:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">head:</span> <span class="comment"># inject code into &lt;head&gt; tag</span></span><br><span class="line">      <span class="bullet">-</span></span><br><span class="line">      <span class="bullet">-</span></span><br><span class="line">    <span class="attr">footer:</span> <span class="comment"># inject code into &lt;footer&gt; tag</span></span><br><span class="line">      <span class="bullet">-</span></span><br><span class="line">      <span class="bullet">-</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Theme plugins</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="attr">aplayer:</span> <span class="comment"># APlayer (fixed version)</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">audio:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="comment"># audio name</span></span><br><span class="line">          <span class="attr">artist:</span> <span class="comment"># audio artist</span></span><br><span class="line">          <span class="attr">url:</span> <span class="comment"># audio url</span></span><br><span class="line">          <span class="attr">cover:</span> <span class="comment"># audio cover url</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span></span><br><span class="line">          <span class="attr">artist:</span></span><br><span class="line">          <span class="attr">url:</span></span><br><span class="line">          <span class="attr">cover:</span></span><br><span class="line">    <span class="attr">mermaid:</span> <span class="comment"># Mermaid JS</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># enable mermaid or not</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">&#x27;9.3.0&#x27;</span> <span class="comment"># default v9.3.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Redefine Theme version (Please dont modify it)</span></span><br><span class="line">  <span class="comment"># Please go to github to update the latest version frequently</span></span><br><span class="line">  <span class="comment"># Github: https://github.com/EvanNotFound/hexo-theme-redefine</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># version: 1.2.1 #DELETE THIS LINE IN YOUR _config.redefine.yml</span></span><br></pre></td></tr></table></figure></div>



<h3 id="多说一点"><a href="#多说一点" class="headerlink" title="多说一点"></a>多说一点</h3><p>自己很久没有更新博客了，已经忘了之前是怎样更新主题配置文件的具体内容了<br>之前还是使用克隆的方式，将主题下载下来，然后更新其配置文件，所以不留存记录，容易忘记。hexo5之后可以通过npm来管理，使得配置主题特别灵活，可以随时切换主题<br>个人是特别青睐<a class="link"   href="https://github.com/volantis-x/hexo-theme-volantis/" >hexo-theme-volantis <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>这个主题的，改天将这个主题配置一下</p>
<h3 id="volantis主题配置"><a href="#volantis主题配置" class="headerlink" title="volantis主题配置"></a>volantis主题配置</h3><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 源文件中的配置，不适合全部拷贝</span></span><br><span class="line"><span class="comment">### 使用局部覆盖的方式</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">&#x27;volantis&#x27;</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">https:///cdn.jsdelivr.net/gh/jingyucute/cdn-assets/favicon/favicon.ico</span></span><br><span class="line"><span class="comment"># 在页面上加入一些元素或脚本，可以在这写，也可以抽出来.</span></span><br><span class="line"><span class="comment"># yaml 文件若能支持引用其他文件该多好</span></span><br><span class="line"><span class="attr">import:</span></span><br><span class="line">  <span class="attr">head_begin:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;meta</span> <span class="string">name=&quot;theme-color&quot;</span> <span class="string">content=&quot;#ffffff&quot;&gt;</span></span><br><span class="line">  <span class="attr">head_end:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;meta</span> <span class="string">name=&quot;hello&quot;</span> <span class="string">content=&quot;world&quot;&gt;</span></span><br><span class="line">  <span class="attr">body_begin:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script&gt;console.log(&quot;Welcome</span> <span class="string">to</span> <span class="string">Yaurora&#x27;s</span> <span class="string">Blog&quot;)&lt;/script&gt;</span></span><br><span class="line">  <span class="attr">body_end:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 覆盖主题配置文件中的内容</span></span><br><span class="line"><span class="attr">theme_config:</span></span><br><span class="line">  <span class="attr">cover:</span></span><br><span class="line">    <span class="attr">height_scheme:</span> <span class="string">half</span> <span class="comment">#  full, half</span></span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">dock</span> <span class="comment"># search (搜索), dock (坞), featured (精选), focus (焦点)</span></span><br><span class="line">    <span class="comment"># 设置在哪些页面使用封面 默认就主页，若想在其他页面显示，对应改为true, 或者在front-matter中使用 cover:true</span></span><br><span class="line">    <span class="attr">display:</span></span><br><span class="line">      <span class="attr">home:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">archive:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">others:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;悟&#x27;</span></span><br><span class="line">    <span class="attr">subtitle:</span> <span class="string">&#x27;目之所及,皆是回忆; 心之所想,皆是过往; 眼之所看,皆是遗憾. &lt;br /&gt; &lt;span style=&quot;display:block;text-align:center;&quot;&gt;A % B = A - (A / B) * B&lt;/span&gt;&#x27;</span></span><br><span class="line">    <span class="attr">features:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">navbar:</span></span><br><span class="line">    <span class="attr">visiable:</span> <span class="string">auto</span> <span class="comment"># always, auto</span></span><br><span class="line">    <span class="attr">logo:</span> <span class="comment"># choose [img] or [icon + title]</span></span><br><span class="line">      <span class="attr">img:</span> <span class="comment"># https://gcore.jsdelivr.net/gh/volantis-x/cdn-org/blog/Logo-NavBar@3x.png</span></span><br><span class="line">      <span class="attr">icon:</span></span><br><span class="line">      <span class="attr">title:</span> <span class="string">Yaurora&#x27;Blog</span></span><br><span class="line">    <span class="attr">menu:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">首页</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fa-solid</span> <span class="string">fa-house</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">文章</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fa-solid</span> <span class="string">fa-rss</span></span><br><span class="line">        <span class="attr">rows:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">归档</span></span><br><span class="line">            <span class="attr">icon:</span> <span class="string">fa-solid</span> <span class="string">fa-archive</span></span><br><span class="line">            <span class="attr">url:</span> <span class="string">/archives/</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">分类</span></span><br><span class="line">            <span class="attr">icon:</span> <span class="string">fa-solid</span> <span class="string">fa-folder-open</span></span><br><span class="line">            <span class="attr">url:</span> <span class="string">/categories</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">标签</span></span><br><span class="line">            <span class="attr">icon:</span> <span class="string">fa-solid</span> <span class="string">fa-tags</span></span><br><span class="line">            <span class="attr">url:</span> <span class="string">/tags</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">友链</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fa-solid</span> <span class="string">fa-link</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/friends</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">关于</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fa-solid</span> <span class="string">fa-info-circle</span></span><br><span class="line">        <span class="attr">rows:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Me</span></span><br><span class="line">            <span class="attr">icon:</span> <span class="string">fa-solid</span> <span class="string">fa-user</span></span><br><span class="line">            <span class="attr">url:</span> <span class="string">/about</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Github</span></span><br><span class="line">            <span class="attr">icon:</span> <span class="string">fa-solid</span> <span class="string">fa-github</span></span><br><span class="line">            <span class="attr">url:</span> <span class="string">https://github.com/jingyucute</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Book</span></span><br><span class="line">            <span class="attr">icon:</span> <span class="string">fa-solid</span> <span class="string">fa-book-open</span></span><br><span class="line">            <span class="attr">url:</span> <span class="string">/books</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hr</span></span><br><span class="line">          <span class="comment"># - name: 背景音乐</span></span><br><span class="line">          <span class="comment">#   icon: fa-solid fa-compact-disc</span></span><br><span class="line">    <span class="attr">search:</span> <span class="string">&#x27;关键字检索&#x27;</span> <span class="comment"># placeholder</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">custom_css:</span></span><br><span class="line">    <span class="attr">max_width:</span> <span class="string">1080px</span></span><br><span class="line">    <span class="attr">font_smoothing:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">cursor:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">volantis-static/media/cursor/text.png</span> <span class="comment"># https://gcore.jsdelivr.net/gh/inkss/common@1/cursor/text.png</span></span><br><span class="line">      <span class="attr">pointer:</span> <span class="string">volantis-static/media/cursor/pointer.png</span> <span class="comment"># https://gcore.jsdelivr.net/gh/inkss/common@1/cursor/pointer.png</span></span><br><span class="line">      <span class="attr">default:</span> <span class="string">volantis-static/media/cursor/left_ptr.png</span> <span class="comment"># https://gcore.jsdelivr.net/gh/inkss/common@1/cursor/left_ptr.png</span></span><br><span class="line">      <span class="attr">not-allowed:</span> <span class="string">volantis-static/media/cursor/circle.png</span> <span class="comment"># https://gcore.jsdelivr.net/gh/inkss/common@1/cursor/circle.png</span></span><br><span class="line">      <span class="attr">zoom-out:</span> <span class="string">volantis-static/media/cursor/zoom-out.png</span> <span class="comment"># https://gcore.jsdelivr.net/gh/inkss/common@1/cursor/zoom-out.png</span></span><br><span class="line">      <span class="attr">zoom-in:</span> <span class="string">volantis-static/media/cursor/zoom-in.png</span> <span class="comment"># https://gcore.jsdelivr.net/gh/inkss/common@1/cursor/zoom-in.png</span></span><br><span class="line">      <span class="attr">grab:</span> <span class="string">volantis-static/media/cursor/openhand.png</span> <span class="comment"># https</span></span><br><span class="line">    <span class="comment"># 导航栏样式</span></span><br><span class="line">    <span class="attr">navbar:</span></span><br><span class="line">      <span class="attr">height:</span> <span class="string">64px</span></span><br><span class="line">      <span class="attr">width:</span> <span class="string">auto</span> <span class="comment"># auto, max</span></span><br><span class="line">      <span class="attr">effect:</span> [<span class="string">shadow</span>, <span class="string">blur</span>]</span><br><span class="line">    <span class="comment"># 滚动条样式</span></span><br><span class="line">    <span class="attr">scrollbar:</span></span><br><span class="line">      <span class="attr">size:</span> <span class="string">4px</span></span><br><span class="line">      <span class="attr">border:</span> <span class="string">2px</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">&#x27;#2196f3&#x27;</span></span><br><span class="line">      <span class="attr">hover:</span> <span class="string">&#x27;#ff5722&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">body:</span></span><br><span class="line">      <span class="attr">effect:</span> [<span class="string">shadow</span>] <span class="comment"># [shadow, floatable, blur]</span></span><br><span class="line">      <span class="attr">highlight:</span></span><br><span class="line">        <span class="attr">language:</span> <span class="literal">true</span> <span class="comment"># show language of codeblock</span></span><br><span class="line">        <span class="attr">copy_btn:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">text_align:</span> <span class="comment"># left, right, justify, center</span></span><br><span class="line">        <span class="attr">h1:</span> <span class="string">left</span></span><br><span class="line">        <span class="attr">h2:</span> <span class="string">left</span></span><br><span class="line">        <span class="attr">h3:</span> <span class="string">left</span></span><br><span class="line">        <span class="attr">h4:</span> <span class="string">left</span></span><br><span class="line">        <span class="attr">h5:</span> <span class="string">left</span></span><br><span class="line">        <span class="attr">h6:</span> <span class="string">left</span></span><br><span class="line">        <span class="attr">p:</span> <span class="string">justify</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">gap:</span></span><br><span class="line">      <span class="attr">h2:</span> <span class="string">48px</span> <span class="comment"># Spacing above H2 (only px unit)</span></span><br><span class="line">      <span class="attr">h3:</span> <span class="string">24px</span> <span class="comment"># Spacing above H3 (only px unit)</span></span><br><span class="line">      <span class="attr">h4:</span> <span class="string">16px</span> <span class="comment"># Spacing above H4 (only px unit)</span></span><br><span class="line">      <span class="attr">p:</span> <span class="string">1em</span> <span class="comment"># Paragraph spacing between paragraphs</span></span><br><span class="line">      <span class="attr">line_height:</span> <span class="number">1.6</span> <span class="comment"># normal, 1.5, 1.75, 2 ...</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">site_footer:</span></span><br><span class="line">    <span class="comment"># layout of footer: [aplayer, social, license, info, copyright]</span></span><br><span class="line">    <span class="attr">layout:</span> [<span class="string">aplayer</span>, <span class="string">social</span>, <span class="string">license</span>, <span class="string">info</span>, <span class="string">copyright</span>]</span><br><span class="line">    <span class="attr">social:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-rss</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">atom.xml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-envelope</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">mailto:jingyucute@gmail.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">https://github.com/jingyucute</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-headphones-alt</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">https://music.163.com/#/user/home?id=360214433</span></span><br><span class="line">    <span class="attr">copyright:</span> <span class="string">&#x27;[Copyright © 2020-2023 Yaurora](/)&#x27;</span></span><br><span class="line">    <span class="comment"># You can add your own property here. (Support markdown, for example: br: &#x27;&lt;br&gt;&#x27;)</span></span><br><span class="line">    <span class="attr">br:</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">sidebar:</span></span><br><span class="line">    <span class="attr">widget_library:</span></span><br><span class="line">      <span class="attr">blogger:</span></span><br><span class="line">        <span class="attr">shape:</span> <span class="string">circle</span> <span class="comment"># circle, rectangle</span></span><br><span class="line">        <span class="attr">avatar:</span> <span class="string">https://cdn.jsdelivr.net/gh/jingyucute/cdn-assets/avatar/young.jpg</span></span><br><span class="line">        <span class="attr">social:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="comment"># APlayer is only available in mainland China.</span></span><br><span class="line">    <span class="comment"># APlayer config: https://github.com/metowolf/MetingJS</span></span><br><span class="line">    <span class="attr">aplayer:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># Required</span></span><br><span class="line">      <span class="attr">server:</span> <span class="string">netease</span> <span class="comment"># netease, tencent, kugou, xiami, baidu</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">playlist</span> <span class="comment"># song, playlist, album, search, artist</span></span><br><span class="line">      <span class="attr">id:</span> <span class="number">5090178889</span> <span class="comment"># song id / playlist id / album id / search keyword</span></span><br><span class="line">      <span class="comment"># Optional</span></span><br><span class="line">      <span class="attr">fixed:</span> <span class="literal">false</span> <span class="comment"># enable fixed mode</span></span><br><span class="line">      <span class="attr">theme:</span> <span class="string">&#x27;#1BCDFC&#x27;</span> <span class="comment"># main color</span></span><br><span class="line">      <span class="attr">autoplay:</span> <span class="literal">false</span> <span class="comment"># audio autoplay</span></span><br><span class="line">      <span class="attr">order:</span> <span class="string">list</span> <span class="comment"># player play order, values: &#x27;list&#x27;, &#x27;random&#x27;</span></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">all</span> <span class="comment"># player loop play, values: &#x27;all&#x27;, &#x27;one&#x27;, &#x27;none&#x27;</span></span><br><span class="line">      <span class="attr">volume:</span> <span class="number">0.3</span> <span class="comment"># default volume, notice that player will remember user setting, default volume will not work after user set volume themselves</span></span><br><span class="line">      <span class="attr">list_max_height:</span> <span class="string">320px</span> <span class="comment"># list max height</span></span><br><span class="line">      <span class="attr">list_folded:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">autoHide:</span> <span class="literal">true</span> <span class="comment"># hide automaticaly</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 基础篇</title>
    <url>/2020/07/31/docker/basic/</url>
    <content><![CDATA[<blockquote>
<p>Docker是一种运行在Linux和Windows上的软件，用于创建、管理和编排容器</p>
</blockquote>
<span id="more"></span>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li><h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><ul>
<li><p>移除旧版本</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get remove docker \</span><br><span class="line">               docker-engine \</span><br><span class="line">               docker.io</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Apt 安装</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装https传输的软件包和ca证书</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加软件源的 GPG 密钥</span></span><br><span class="line">$ curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向 source.list 中添加 Docker 软件源</span></span><br><span class="line">$ sudo add-apt-repository \</span><br><span class="line">    <span class="string">&quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string">    <span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">    stable&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># $ sudo add-apt-repository \</span></span><br><span class="line"><span class="comment">#    &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="comment">#    $(lsb_release -cs) \</span></span><br><span class="line"><span class="comment">#    stable&quot;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Docker CE 安装、启动</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以通过脚本自动化安装</span></span><br><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh --mirror Aliyun</span><br><span class="line"><span class="comment"># $ sudo sh get-docker.sh --mirror AzureChinaCloud</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>建立docker用户组</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立用户组</span></span><br><span class="line">$ sudo groupadd docker</span><br><span class="line"><span class="comment"># 将当前用户添加到docker组</span></span><br><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><h4 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h4><ul>
<li><p>HomeBrew</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">$ brew cask install docker</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>手动下载安装</p>
<p>如果需要手动下载，请点击以下链接下载 <a class="link"   href="https://download.docker.com/mac/stable/Docker.dmg" >Stable <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 或 <a class="link"   href="https://download.docker.com/mac/edge/Docker.dmg" >Edge <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 版本的 Docker Desktop for Mac。</p>
<p>如同 macOS 其它软件一样，安装也非常简单，双击下载的 <code>.dmg</code> 文件，然后将那只叫 <a class="link"   href="https://www.docker.com/blog/call-me-moby-dock/" >Moby <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 的鲸鱼图标拖拽到 <code>Application</code> 文件夹即可（其间需要输入用户密码）。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gblobscdn.gitbook.com/assets%2F-M5xTVjmK7ax94c8ZQcm%2F-M5xT_hHX2g5ldlyp9nm%2F-M5xTlJn9xt8Kl8BbiGG%2Finstall-mac-dmg.png?alt=media"
                      alt="img"
                ></p>
</li>
</ul>
</li>
</ul>
<h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><ul>
<li><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker search ubuntu</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 docker (image)  pull &lt;Registry&gt;/&lt;userName of Orgnization&gt;/&lt;Repository&gt;:&lt;Tag&gt;</span></span><br><span class="line"><span class="comment"># eg</span></span><br><span class="line">$ docker pull ubuntu:latest</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="列举镜像"><a href="#列举镜像" class="headerlink" title="列举镜像"></a>列举镜像</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列举格式 $ docker images &lt;repository&gt;:&lt;tag&gt;</span></span><br><span class="line"><span class="comment"># filter 参数过滤， 列举所有tag 为latest的镜像 (dangling, before, since, label, reference)</span></span><br><span class="line">$ docker image <span class="built_in">ls</span> --filter reference=<span class="string">&quot;*:latest&quot;</span></span><br><span class="line"><span class="comment"># 格式化显示, 注意格式(大小写、标点)</span></span><br><span class="line">$ docker images --format <span class="string">&quot;&#123;&#123;.Repository&#125;&#125;: &#123;&#123;.Size&#125;&#125;&quot;</span></span><br><span class="line">$ docker image <span class="built_in">ls</span> --format <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Repository&#125;&#125;\t&#123;&#123;.Tag&#125;&#125;&quot;</span></span><br><span class="line"><span class="comment"># 删除悬虚镜像</span></span><br><span class="line">$ docker image prune</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除格式， 其中镜像是镜像ID(长或短)、镜像名、镜像摘要</span></span><br><span class="line">$ docker image <span class="built_in">rm</span> [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有名为redis的镜像</span></span><br><span class="line">$ docker rmi $(docker image <span class="built_in">ls</span> -q redis)</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h4><p>当我们运行一个容器的时候（如果不使用卷的话），我们做的任何文件修改都会被记录于容器存储层里。而 Docker 提供了一个 <code>docker commit</code> 命令，可以将容器的存储层保存下来成为镜像。换句话说，就是在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 产看容器内的变化</span></span><br><span class="line"><span class="comment"># 格式 docker diff &lt;容器ID或容器名&gt;</span></span><br><span class="line">$ docker diff webserver</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">  <span class="comment"># 格式 $ docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]</span></span><br><span class="line">  <span class="comment"># 例如, 在nginx容器中修改内容后</span></span><br><span class="line">  $ docker commit \</span><br><span class="line">      --author <span class="string">&quot;jingyucute@gmail.com&quot;</span> \</span><br><span class="line">      --message <span class="string">&quot;update content&quot;</span> \</span><br><span class="line">      webserver \</span><br><span class="line">      nginx:v2</span><br><span class="line">  <span class="comment"># 或者简写</span></span><br><span class="line">$ docker commit \</span><br><span class="line">      -a=<span class="string">&quot;jingyucute@gmail.com&quot;</span> \</span><br><span class="line">    -m=<span class="string">&quot;update content&quot;</span> \</span><br><span class="line">      webserver \</span><br><span class="line">    nginx:v2</span><br><span class="line">  </span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 产看镜像内的提交记录</span></span><br><span class="line"><span class="comment"># 格式 docker history &lt;仓库名&gt;[:&lt;标签&gt;</span></span><br><span class="line">$ docker <span class="built_in">history</span> nginx:v2</span><br></pre></td></tr></table></figure></div>

<p><strong>特别注意</strong></p>
<p><code>docker commit</code> 命令除了学习之外，还有一些特殊的应用场合，比如被入侵后保存现场等。但是，不要使用 <code>docker commit</code> 定制镜像，定制镜像应该使用 <code>Dockerfile</code> 来完成。使用 <code>docker commit</code> 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为 <strong>黑箱镜像</strong>，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体的操作。这种黑箱镜像的维护工作是非常痛苦的。</p>
</li>
<li><h4 id="使用Dockerfile制作镜像"><a href="#使用Dockerfile制作镜像" class="headerlink" title="使用Dockerfile制作镜像"></a>使用Dockerfile制作镜像</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 docker build [选项] &lt;上下文路径/URL/-&gt;</span></span><br><span class="line">$ docker build -t &lt;repository&gt;:&lt;tag&gt; .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接从Git repo中构建</span></span><br><span class="line">$ docker build https://github.com/twang2218/gitlab-ce-zh.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用给定的 tar 压缩包构建， 下载后会自动解压</span></span><br><span class="line">$ docker build http://server/context.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准输入构建</span></span><br><span class="line">$ docker build - &lt; context.tar.gz</span><br><span class="line"></span><br><span class="line">$ docker build - &lt; Dockerfile</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> Dockerfile | docker build -</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><ul>
<li><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看正在运行的容器, 加上-a参数表示查看所有的容器(包括退出的)</span></span><br><span class="line">$ docker container <span class="built_in">ls</span> [-a]</span><br><span class="line">$ docker ps [-a]</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从镜像中创建并启动一个容器 , 参数自己查吧</span></span><br><span class="line"><span class="comment"># 格式 docker &lt;container&gt; run [--options]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互式运行ubuntu容器</span></span><br><span class="line"><span class="comment"># -i: 交互式操作。</span></span><br><span class="line"><span class="comment"># -t: 终端。</span></span><br><span class="line"><span class="comment"># ubuntu: ubuntu 镜像。</span></span><br><span class="line"><span class="comment"># /bin/bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash</span></span><br><span class="line">$ docker run -it ubuntu --name myOS /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 守护态运行一个容器 </span></span><br><span class="line"><span class="comment"># 格式 docker &lt;container&gt; run -d </span></span><br><span class="line">$ docker run -d ubuntu /bin/sh -c <span class="string">&quot;while true; do echo hello world; sleep 1; done&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动一个停止了的容器</span></span><br><span class="line"><span class="comment"># 格式 docker &lt;container&gt; start &lt;Container-name-or-ID&gt;</span></span><br><span class="line">$ docker start myOS</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 docker &lt;container&gt; restart  &lt;Container-name-or-ID&gt;</span></span><br><span class="line">$ docker restart myOS</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="查看容器输出"><a href="#查看容器输出" class="headerlink" title="查看容器输出"></a>查看容器输出</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 docker &lt;container&gt; logs  &lt;Container-name-or-ID&gt;</span></span><br><span class="line">$ docker logs myOS</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 docker &lt;container&gt; stop  &lt;Container-name-or-ID&gt;</span></span><br><span class="line">$ docker stop myOS</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除的容器不能是运行状态，可以先停止再删除, 也可以通过加上 -f 参数强删(不推荐)</span></span><br><span class="line"><span class="comment"># 格式 docker container rm &lt;Container-name-or-ID&gt; [-f]</span></span><br><span class="line">$ docker <span class="built_in">rm</span> &lt;Container-name-or-ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清楚所有停止状态的容器</span></span><br><span class="line">$ docker container prune</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 两种方式, 推荐使用方式二</span></span><br><span class="line"><span class="comment"># 方式一 docker attach &lt;Container-name-or-ID&gt;</span></span><br><span class="line"><span class="comment"># 这种方式退出终端，会导致容器停止</span></span><br><span class="line">$ docker attach myOS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式一 docker attach &lt;Container-name-or-ID&gt;</span></span><br><span class="line"><span class="comment"># 这种方式退出终端，会导致容器停止</span></span><br><span class="line">$ docker attach myOS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二 docker exec -it &lt;Container-name-or-ID&gt; bash</span></span><br><span class="line"><span class="comment"># 这种方式退出终端，容器不会停止</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it myOS bash</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="Dockerfile参数说明"><a href="#Dockerfile参数说明" class="headerlink" title="Dockerfile参数说明"></a>Dockerfile参数说明</h3><ul>
<li><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。<code>FROM</code> 就是指定 <strong>基础镜像</strong>，因此一个 <code>Dockerfile</code> 中 <code>FROM</code> 是必备的指令，并且必须是第一条指令。</p>
<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><p><code>RUN</code> 指令是用来执行命令行命令的。通常有两种形式：</p>
<p>​	shell格式 <code>RUN &lt;命令&gt;</code>  (常用格式)</p>
  <div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27;</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure></div>

<p>​	exec格式 <code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code> . 这种形式好比函数调用</p>
<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;./test.php&quot;</span>, <span class="string">&quot;dev&quot;</span>, <span class="string">&quot;offline&quot;</span>] </span></span><br><span class="line"><span class="comment"># ====</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> ./test.php dev offline</span></span><br></pre></td></tr></table></figure></div>

<p><strong>注意</strong></p>
<p>这里的RUN要尽量少， 多了会导致镜像臃肿， 因为镜像是按照层来构建的，一个<code>RUN</code>就是一层。所以可以使用 <code>&amp;&amp;</code> 来链接命令，使用 <code>\</code>来换行</p>
<p>举个例子：</p>
<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:stretch</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y gcc libc6-dev make wget</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /usr/src/redis</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> make -C /usr/src/redis</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> make -C /usr/src/redis install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------&gt; </span></span><br><span class="line"><span class="keyword">FROM</span> debian:stretch</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> buildDeps=<span class="string">&#x27;gcc libc6-dev make wget&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install -y <span class="variable">$buildDeps</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">mkdir</span> -p /usr/src/redis \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; make -C /usr/src/redis \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; make -C /usr/src/redis install \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/* \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> redis.tar.gz \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -r /usr/src/redis \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get purge -y --auto-remove <span class="variable">$buildDeps</span></span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p><code>COPY</code>指令将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件&#x2F;目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置</p>
<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;</span></span><br><span class="line"><span class="comment"># COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;] </span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> hom?.txt /mydir/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变文件的所属用户和用户组 --chown=&lt;user&gt;:&lt;group&gt;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --<span class="built_in">chown</span>=55:mygroup files* /mydir/</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致(同样需求下， 推荐使用<code>COPY</code>)。</p>
<ul>
<li>ADD 的优点：在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;。</li>
<li>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</li>
</ul>
<p>在 <code>COPY</code> 和 <code>ADD</code> 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code></p>
<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 改变文件的所属用户和用户组 --chown=&lt;user&gt;:&lt;group&gt;</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> --<span class="built_in">chown</span>=55:mygroup files* /mydir/</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p><code>CMD</code> 指令的格式和 <code>RUN</code> 相似。 </p>
<ul>
<li>CMD 在docker run 时运行。</li>
<li>RUN 是在 docker build。</li>
</ul>
<p><code>CMD</code>也有两种形式</p>
<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shell 格式：CMD &lt;命令&gt;</span></span><br><span class="line"><span class="comment"># exec 格式：CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="variable">$HOME</span></span></span><br><span class="line"><span class="comment"># ====</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo <span class="variable">$HOME</span>&quot;</span> ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 <code>systemd</code> 去启动后台服务，容器内没有后台服务的概念。</p>
<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CMD service nginx start</span></span><br><span class="line"><span class="comment"># 这个命令是将nginx作为后台服务来运行的， 应该写为一下形式</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p><code>ENTRYPOINT</code> 的格式和 <code>RUN</code> 指令格式一样，分为 <code>exec</code> 格式和 <code>shell</code> 格式。</p>
<p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在运行时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定。</p>
<p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令。就可以理解为<code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 ENTRYPOINT [&quot;&lt;executeable&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...]</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 ENV &lt;key&gt; &lt;value&gt; </span></span><br><span class="line"><span class="comment">#     ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span></span><br><span class="line">ENV NODE_VERSION 7.2.0</span><br><span class="line">RUN curl -SLO <span class="string">&quot;https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz&quot;</span> \</span><br><span class="line">  &amp;&amp; curl -SLO <span class="string">&quot;https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/SHASUMS256.txt.asc&quot;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h4><p><code>ARG</code> 构建参数和 <code>ENV</code> 的效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 ARG &lt;参数名&gt;[=&lt;默认值&gt;]</span></span><br></pre></td></tr></table></figure></div>

<p>该默认值可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p>
</li>
<li><h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p>容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</span></span><br><span class="line"><span class="comment">#     VOLUME &lt;路径&gt;</span></span><br><span class="line">VOLUME /data</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -v mydata:/data </span><br></pre></td></tr></table></figure></div>

<p>在这行命令中，就使用了 <code>mydata</code> 这个命名卷挂载到了 <code>/data</code> 这个位置，替代了 <code>Dockerfile</code> 中定义的匿名卷的挂载配置。</p>
</li>
<li><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p><code>EXPOSE</code> 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。</p>
<ul>
<li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li>
<li>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li>
</ul>
<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</span></span><br></pre></td></tr></table></figure></div>

<p>要将 <code>EXPOSE</code> 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code> 区分开来。<code>-p</code>，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 <code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p>
</li>
<li><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>使用 <code>WORKDIR</code> 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 格式 WORKDIR &lt;工作目录路径&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>谈一下误区</strong></p>
<p>初学者将<code>Dockerfile</code> 等同于 Shell 脚本来书写，会出现一下错误</p>
<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> &gt; world.txt</span></span><br></pre></td></tr></table></figure></div>

<p>将这个 <code>Dockerfile</code> 进行构建镜像运行后，会发现找不到 <code>/app/world.txt</code> 文件，或者其内容不是 <code>hello</code>。</p>
<p><strong>原因</strong>: <em>在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；在 <code>Dockerfile</code> 中，这两行 <code>RUN</code> 命令的执行环境根本不同，是两个完全不同的容器</em></p>
<p>每一个 <code>RUN</code> 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 <code>RUN cd /app</code> 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。</p>
</li>
<li><h4 id="USRE"><a href="#USRE" class="headerlink" title="USRE"></a>USRE</h4><p><code>USER</code> 指令和 <code>WORKDIR</code> 相似，都是改变环境状态并影响以后的层。<code>WORKDIR</code> 是改变工作目录，<code>USER</code> 则是改变之后层的执行 <code>RUN</code>, <code>CMD</code> 以及 <code>ENTRYPOINT</code> 这类命令的身份(用户和用户组必须提前已经存在)。</p>
<div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式 USER &lt;用户名&gt;[:&lt;用户组&gt;]</span></span><br></pre></td></tr></table></figure></div>


</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 进阶篇之Compose</title>
    <url>/2020/08/02/docker/compose/</url>
    <content><![CDATA[<blockquote>
<p><code>Compose</code> 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。</p>
</blockquote>
<span id="more"></span>

<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>Compose</code> 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。 <code>Compose</code>代码目前在 <a class="link"   href="https://github.com/docker/compose" >https://github.com/docker/compose <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 上开源。</p>
<h3 id="安装与卸载"><a href="#安装与卸载" class="headerlink" title="安装与卸载"></a>安装与卸载</h3><ul>
<li><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul>
<li><p>Mac&#x2F;Windows</p>
<p><code>Docker Desktop for Mac/Windows</code> 自带 <code>docker-compose</code> 二进制文件，安装 Docker 之后可以直接使用。</p>
</li>
<li><p>Ubuntu</p>
<p>1、通过下载二进制包</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">$ sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></div>

<p>2、 pip安装</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo pip install -U docker-compose</span><br></pre></td></tr></table></figure></div>

<p>3、bash补全命令</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">$ curl -L https://raw.githubusercontent.com/docker/compose/1.25.5/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p>1、删除二进制包文件</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">rm</span> /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></div>

<p>2、pip移除</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo pip uninstall docker-compose</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="使用以及说明"><a href="#使用以及说明" class="headerlink" title="使用以及说明"></a>使用以及说明</h3><ul>
<li><h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><p>首先介绍几个术语。</p>
<ul>
<li>服务 (<code>service</code>)：一个应用容器，实际上可以运行多个相同镜像的实例。</li>
<li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元。</li>
</ul>
<p>可见，一个项目可以由多个服务（容器）关联而成，<code>Compose</code> 面向项目进行管理。</p>
</li>
<li><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><ul>
<li><h5 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h5><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker-compose [-f=&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure></div>
</li>
<li><h5 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h5><p><code>-f, --file FILE</code> 指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</p>
<p><code>-p, --project-name NAME</code> 指定项目名称，默认将使用所在目录名称作为项目名。</p>
<p><code>--x-networking</code> 使用 Docker 的可拔插网络后端特性</p>
<p><code>--x-network-driver DRIVER</code> 指定网络后端的驱动，默认为<code>bridge</code></p>
<p><code>--verbose</code> 输出更多调试信息。</p>
<p><code>-v, --version</code> 打印版本并退出。</p>
</li>
<li><h5 id="build"><a href="#build" class="headerlink" title="build"></a>build</h5><p>格式为 <code>docker-compose build [options] [SERVICE...]</code>。</p>
<p>构建（重新构建）项目中的服务容器。服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。</p>
<p>选项包括：</p>
<ul>
<li><code>--force-rm</code> 删除构建过程中的临时容器。</li>
<li><code>--no-cache</code> 构建镜像过程中不使用 cache（这将加长构建过程）。</li>
<li><code>--pull</code> 始终尝试通过 pull 来获取更新版本的镜像。</li>
</ul>
</li>
<li><h5 id="config"><a href="#config" class="headerlink" title="config"></a>config</h5><p>验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。</p>
</li>
<li><h5 id="down"><a href="#down" class="headerlink" title="down"></a>down</h5><p>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</p>
</li>
<li><h5 id="start"><a href="#start" class="headerlink" title="start"></a>start</h5><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p>
<p>启动已经存在的服务容器。</p>
</li>
<li><h5 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h5><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p>
<p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p>
<p>选项：</p>
<ul>
<li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时(默认为 10 秒)。</li>
</ul>
</li>
<li><h5 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h5><p>进入指定容器</p>
</li>
<li><h5 id="images"><a href="#images" class="headerlink" title="images"></a>images</h5><p> 列出 Compose 文件中包含的镜像。</p>
</li>
<li><h5 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h5><p> 格式为 <code>docker-compose kill [options] [SERVICE...]</code>。</p>
<p> 通过发送 <code>SIGKILL</code> 信号来强制停止服务容器。</p>
</li>
<li><h5 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h5><p> 格式为 <code>docker-compose logs [options] [SERVICE...]</code>。</p>
<p> 该命令在调试问题的时候十分有用。</p>
</li>
<li><h5 id="pause"><a href="#pause" class="headerlink" title="pause"></a>pause</h5><p> 格式为 <code>docker-compose pause [SERVICE...]</code>。</p>
<p> 暂停一个服务容器。</p>
</li>
<li><h5 id="unpause"><a href="#unpause" class="headerlink" title="unpause"></a>unpause</h5><p>格式为 <code>docker-compose unpause [SERVICE...]</code>。</p>
<p>恢复处于暂停状态中的服务。</p>
</li>
<li><h5 id="port"><a href="#port" class="headerlink" title="port"></a>port</h5><p>格式为 <code>docker-compose port [options] SERVICE PRIVATE_PORT</code>。</p>
<p>打印某个容器端口所映射的公共端口。</p>
</li>
<li><h5 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h5><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p>
<p>列出项目中目前的所有容器。</p>
</li>
<li><h5 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h5><p>格式为 <code>docker-compose pull [options] [SERVICE...]</code>。</p>
<p>拉取服务依赖的镜像。</p>
<p>选项：</p>
<ul>
<li><code>--ignore-pull-failures</code> 忽略拉取镜像过程中的错误。</li>
</ul>
</li>
<li><h5 id="push"><a href="#push" class="headerlink" title="push"></a>push</h5><p>推送服务依赖的镜像到 Docker 镜像仓库。</p>
</li>
<li><h5 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h5><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p>
<p>重启项目中的服务。</p>
</li>
<li><h5 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h5><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p>
<p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p>
<p>选项：</p>
<ul>
<li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li>
<li><code>-v</code> 删除容器所挂载的数据卷。</li>
</ul>
</li>
<li><h5 id="run"><a href="#run" class="headerlink" title="run"></a>run</h5><p>格式为 <code>docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]</code>。</p>
<p>在指定服务上执行一个命令。</p>
<p>选项：</p>
<ul>
<li><code>-d</code> 后台运行容器。</li>
<li><code>--name NAME</code> 为容器指定一个名字。</li>
<li><code>--entrypoint CMD</code> 覆盖默认的容器启动指令。</li>
<li><code>-e KEY=VAL</code> 设置环境变量值，可多次使用选项来设置多个环境变量。</li>
<li><code>-u, --user=&quot;&quot;</code> 指定运行容器的用户名或者 uid。</li>
<li><code>--no-deps</code> 不自动启动关联的服务容器。</li>
<li><code>--rm</code> 运行命令后自动删除容器，<code>d</code> 模式下将忽略。</li>
<li><code>-p, --publish=[]</code> 映射容器端口到本地主机。</li>
<li><code>--service-ports</code> 配置服务端口并映射到本地主机。</li>
<li><code>-T</code> 不分配伪 tty，意味着依赖 tty 的指令将无法运行。</li>
</ul>
</li>
<li><h5 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h5><p>格式为 <code>docker-compose scale [options] [SERVICE=NUM...]</code>。</p>
<p>设置指定服务运行的容器个数。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过 service=num 的参数来设置数量</span></span><br><span class="line">$ docker-compose scale web=3 db=2</span><br><span class="line"><span class="comment"># 将启动 3 个容器运行 web 服务，2 个容器运行 db 服务</span></span><br></pre></td></tr></table></figure></div>

<p>选项：</p>
<ul>
<li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li>
</ul>
</li>
<li><h5 id="top"><a href="#top" class="headerlink" title="top"></a>top</h5><p>查看各个服务容器内运行的进程。</p>
</li>
<li><h5 id="up"><a href="#up" class="headerlink" title="up"></a>up</h5><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p>
<p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p>
<p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，<code>docker-compose up -d</code>(生产环境下使用)，将会在后台启动并运行所有的容器。</p>
<p>如果用户不希望容器被停止并重新创建，可以使用 <code>docker-compose up --no-recreate </code>, 只会启动处于停止状态的容器，而忽略已经运行的服务; 如果用户只想重新部署某个服务，可以使用 <code>docker-compose up --no-deps -d &lt;SERVICE_NAME&gt;</code> 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。</p>
<p>选项：</p>
<ul>
<li><code>-d</code> 在后台运行服务容器。</li>
<li><code>--no-color</code> 不使用颜色来区分不同的服务的控制台输出。</li>
<li><code>--no-deps</code> 不启动服务所链接的容器。</li>
<li><code>--force-recreate</code> 强制重新创建容器，不能与 <code>--no-recreate</code> 同时使用。</li>
<li><code>--no-recreate</code> 如果容器已经存在了，则不重新创建，不能与 <code>--force-recreate</code> 同时使用。</li>
<li><code>--no-build</code> 不自动构建缺失的服务镜像。</li>
<li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li>
</ul>
</li>
<li><h5 id="version"><a href="#version" class="headerlink" title="version"></a>version</h5><p>格式为 <code>docker-compose version</code>。</p>
<p>打印版本信息。</p>
</li>
</ul>
<h3 id="Compose-模板文件"><a href="#Compose-模板文件" class="headerlink" title="Compose 模板文件"></a>Compose 模板文件</h3><p>​	大部分指令跟 <code>docker run</code> 相关参数的含义都是类似的。默认的模板文件名称为 <code>docker-compose.yml</code>，格式为 YAML 格式。</p>
<p>每个服务都必须通过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile）等来自动构建生成镜像。</p>
<ul>
<li><h4 id="build-1"><a href="#build-1" class="headerlink" title="build"></a>build</h4><p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）</p>
<p><code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./dir</span></span><br></pre></td></tr></table></figure></div>

<p>也可以使用<code>context</code> 指令指定 <code>Dockerfile</code> 所在文件夹的路径， <code>dockerfile</code> 指令指定 <code>Dockerfile</code> 文件名， <code>arg</code> 指令指定构建镜像时的变量</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./dir</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile-alternate</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">buildno:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<p> <code>cache_from</code> 指定构建镜像的缓存</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">  <span class="attr">cache_from:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">alpine:latest</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">corp/web_app:3.14</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="cap-add-cap-drop"><a href="#cap-add-cap-drop" class="headerlink" title="cap_add, cap_drop"></a>cap_add, cap_drop</h4><p>指定容器的内核能力（capacity）分配</p>
</li>
<li><h4 id="command"><a href="#command" class="headerlink" title="command"></a>command</h4><p>覆盖容器启动后默认执行的命令。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">echo</span> <span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="cgroup-parent"><a href="#cgroup-parent" class="headerlink" title="cgroup_parent"></a>cgroup_parent</h4><p>指定父 <code>cgroup</code> 组，意味着将继承该组的资源限制。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建了一个 cgroup 组名称为 cgroups_1</span></span><br><span class="line"><span class="attr">cgroup_parent:</span> <span class="string">cgroups_1</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a>container_name</h4><p>指定容器名称。默认将会使用 <code>项目名称_服务名称_序号</code> 这样的格式。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">container_name:</span> <span class="string">docker-web-container</span></span><br></pre></td></tr></table></figure></div>

<p>注意: 指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。</p>
</li>
<li><h4 id="devices"><a href="#devices" class="headerlink" title="devices"></a>devices</h4><p>指定设备映射关系。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">devices:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;/dev/ttyUSB1:/dev/ttyUSB0&quot;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a>depends_on</h4><p>解决容器的依赖、启动先后的问题。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure></div>

<p>例子中会先启动 <code>redis</code> <code>db</code> 再启动 <code>web</code> , <code>web</code> 服务不会等待 <code>redis</code> <code>db</code> 「完全启动」之后才启动。</p>
</li>
<li><h4 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h4><p>自定义 <code>DNS</code> 服务器。可以是一个值，也可以是一个列表。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dns:</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="dns-search"><a href="#dns-search" class="headerlink" title="dns_search"></a>dns_search</h4><p>配置 <code>DNS</code> 搜索域。可以是一个值，也可以是一个列表。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dns_search:</span> <span class="string">example.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dns_search:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">domain1.example.com</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">domain2.example.com</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="tmpfs"><a href="#tmpfs" class="headerlink" title="tmpfs"></a>tmpfs</h4><p>挂载一个 tmpfs 文件系统到容器。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tmpfs:</span> <span class="string">/run</span></span><br><span class="line"><span class="attr">tmpfs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/run</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/tmp</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a>env_file</h4><p>从文件中获取环境变量，可以为单独的文件路径或列表。</p>
<p>如果通过 <code>docker-compose -f FILE</code> 方式来指定 Compose 模板文件，则 <code>env_file</code> 中变量的路径会基于模板文件路径。</p>
<p>如果有变量名称与 <code>environment</code> 指令冲突，则按照惯例，以后者为准。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env_file:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./common.env</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./apps/web.env</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/opt/secrets.env</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h4><p>设置环境变量。可以使用数组或字典两种格式。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">  <span class="attr">SESSION_SECRET:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SESSION_SECRET</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h4><p>暴露端口，但不映射到宿主机，只被连接的服务访问。</p>
<p>仅可以指定内部端口为参数</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">expose:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;8000&quot;</span></span><br></pre></td></tr></table></figure></div>


</li>
<li><h4 id="extra-hosts"><a href="#extra-hosts" class="headerlink" title="extra_hosts"></a>extra_hosts</h4><p>指定额外的 host 名称映射信息</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">extra_hosts:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;googledns:8.8.8.8&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;dockerhub:52.1.157.61&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>会在启动后的服务容器中 <code>/etc/hosts</code> 文件中添加如下两条条目。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">8.8.8.8 googledns</span><br><span class="line">52.1.157.61 dockerhub</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="image"><a href="#image" class="headerlink" title="image"></a>image</h4><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code> 将会尝试拉取这个镜像。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">ubuntu</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">orchardup/postgresql</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">a4bc65fd</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="labels"><a href="#labels" class="headerlink" title="labels"></a>labels</h4><p>为容器添加 Docker 元数据（metadata）信息。例如可以为容器添加辅助说明信息。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">labels:</span></span><br><span class="line">  <span class="attr">com.startupteam.description:</span> <span class="string">&quot;webapp for a startup team&quot;</span></span><br><span class="line">  <span class="attr">com.startupteam.department:</span> <span class="string">&quot;devops department&quot;</span></span><br><span class="line">  <span class="attr">com.startupteam.release:</span> <span class="string">&quot;rc3 for v1.0&quot;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h4><p>配置日志选项。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="comment"># 目前支持三种日志驱动类型 json-file syslog none</span></span><br><span class="line">  <span class="attr">driver:</span> <span class="string">syslog</span></span><br><span class="line">  <span class="attr">options:</span></span><br><span class="line">    <span class="attr">syslog-address:</span> <span class="string">&quot;tcp://192.168.0.42:123&quot;</span></span><br><span class="line">  <span class="comment"># options:</span></span><br><span class="line">  <span class="comment">#   max-size: &quot;200k&quot;</span></span><br><span class="line">  <span class="comment">#   max-file: &quot;10&quot;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="network-mode"><a href="#network-mode" class="headerlink" title="network_mode"></a>network_mode</h4><p>设置网络模式。使用和 <code>docker run</code> 的 <code>--network</code> 参数一样的值。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;bridge&quot;</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;host&quot;</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;none&quot;</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;service:[service name]&quot;</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;container:[container name/id]&quot;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h4><p>配置容器连接的网络。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">some-service:</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">some-network</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">other-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">some-network:</span></span><br><span class="line">  <span class="attr">other-network:</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="pid"><a href="#pid" class="headerlink" title="pid"></a>pid</h4><p>跟主机系统共享进程命名空间。打开该选项的容器之间，以及容器和宿主机系统之间可以通过进程 ID 来相互访问和操作。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pid:</span> <span class="string">&quot;host&quot;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h4><p>暴露端口信息。</p>
<p>使用宿主端口：容器端口 <code>(HOST:CONTAINER)</code> 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;49100:22&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:8001:8001&quot;</span></span><br></pre></td></tr></table></figure></div>


</li>
<li><h4 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h4><p>数据卷所挂载路径设置。可以设置为宿主机路径(<code>HOST:CONTAINER</code>)或者数据卷名称(<code>VOLUME:CONTAINER</code>)，并且可以设置访问模式 （<code>HOST:CONTAINER:ro</code>）。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cache/:/tmp/cache</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">~/configs:/etc/configs/:ro</span></span><br></pre></td></tr></table></figure></div>

<p>如果路径为数据卷名称，必须在文件中配置数据卷。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">my_src:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_data:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql_data:</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>git 子模块</title>
    <url>/2020/08/26/git/git-submodule/</url>
    <content><![CDATA[<blockquote>
<p>经常碰到这种情况：当你在一个Git 项目上工作时，你需要在其中使用另外一个Git 项目。也许它是一个第三方开发的Git 库或者是你独立开发和并在多个父项目中使用的。这个情况下一个常见的问题产生了：你想将两个项目单独处理但是又需要在其中一个中使用另外一个。 这时候 submodule 就上场了！</p>
</blockquote>
<span id="more"></span>

<h3 id="添加子模块"><a href="#添加子模块" class="headerlink" title="添加子模块"></a>添加子模块</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接clone，会在当前目录生成一个对应子目录存放仓库内容</span></span><br><span class="line">$ git submodule add &lt;submodule_url&gt; [path/submoduleName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化本地.gitmodules文件</span></span><br><span class="line">$ git submodule init  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步远端submodule源码</span></span><br><span class="line">$ git submodule update  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取主项目和所有子项目源码</span></span><br><span class="line">$ git <span class="built_in">clone</span> --recurse-submodules &lt;main_project_url&gt;  </span><br></pre></td></tr></table></figure></div>

<h3 id="查看-amp-更新"><a href="#查看-amp-更新" class="headerlink" title="查看 &amp; 更新"></a>查看 &amp; 更新</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看子模块</span></span><br><span class="line">$ git submodule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新项目内子模块到最新版本</span></span><br><span class="line">$ git submodule update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新子模块为远程项目的最新版本</span></span><br><span class="line">$ git submodule update --remote</span><br></pre></td></tr></table></figure></div>

<h3 id="删除子模块"><a href="#删除子模块" class="headerlink" title="删除子模块"></a>删除子模块</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、 删除子模块文件夹</span></span><br><span class="line">$ git <span class="built_in">rm</span> --cached &lt;submodule&gt;</span><br><span class="line">$ <span class="built_in">rm</span> -rf &lt;submodule&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、删除.gitmodules文件中相关子模块信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、删除.git/config中的相关子模块信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、删除.git文件夹中的相关子模块文件</span></span><br><span class="line">$ <span class="built_in">rm</span> -rf .git/modules/&lt;submodule&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><ul>
<li><h4 id="向上同步"><a href="#向上同步" class="headerlink" title="向上同步"></a>向上同步</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当子模块有未被使用的新提交时（例如在 sub-module.git 中执行 git pull --rebase 拉取新的内容后），git 会给予提示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将子模块的内容同步到主仓库，只需要在主仓库中创建一个新的提交即可</span></span><br><span class="line">$ git add submodule</span><br><span class="line">$ git commit -m <span class="string">&quot;message&quot;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="向下同步"><a href="#向下同步" class="headerlink" title="向下同步"></a>向下同步</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主要是更新</span></span><br><span class="line">$ git submodule update</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol>
<li>当子模块有提交的时候,没有push到远程仓库, 父级引用子模块的commit更新,并提交到远程仓库, 当别人拉取代码的时候就会报出子模块的commit不存在 <code>fatal: reference isn’t a tree</code> 。</li>
<li>如果你仅仅引用了别人的子模块的游离分支,然后在主仓库修改了子仓库的代码,之后使用<code>git submodule update</code>拉取了最新代码,那么你在子仓库游离分支做出的修改会被覆盖掉。</li>
<li>我们假设你一开始在主仓库并没有采用子模块的开发方式,而是在另外的开发分支使用了子仓库,那么当你从开发分支切回到没有采用子模块的分支的时候,子模块的目录并不会被Git自动删除,而是需要你手动的删除了。</li>
</ol>
]]></content>
      <categories>
        <category>开发</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>git学习篇</title>
    <url>/2020/08/09/git/git-usage/</url>
    <content><![CDATA[<blockquote>
<p>本文不是记录所有的命令， 会将部分命令做一个简易说明</p>
</blockquote>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/jingyucute/cdn-assets/2020/images/git-workflow.png"
                      alt="git操作流程"
                ></p>
<span id="more"></span>

<p>看懂上面的流程， 就可以大致知道自己要进行什么操作，以及怎样操作</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>   安装的话， 自己搜一下吧， 问题应该不大</p>
<h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><p>​	</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录下新建一个代码库 [新建一个目录， 初始化为代码库]</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程拷贝一个项目 , 克隆到本地</span></span><br><span class="line">$ git <span class="built_in">clone</span> &lt;git-repo-url&gt; [project-name]</span><br></pre></td></tr></table></figure></div>



<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 config</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 config</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">$ git config [--global] user.email <span class="string">&quot;email@example.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令别名</span></span><br><span class="line">$ git config --global alias.st status</span><br><span class="line">$ git config --global alias.co checkout</span><br><span class="line">$ git config --global alias.ci commit</span><br><span class="line"><span class="comment"># 个人喜欢将常用的 commit 简写为 ci，  checkout简写为 co</span></span><br><span class="line"><span class="comment"># --global 是全局配置， 不加上只能在对应的git 目录下使用</span></span><br></pre></td></tr></table></figure></div>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看工作区和暂存区的状态</span></span><br><span class="line">$ git status </span><br><span class="line"><span class="comment"># 将工作区的文件提交到暂存区</span></span><br><span class="line">$ git add .  </span><br><span class="line"><span class="comment"># 提交到本地仓库</span></span><br><span class="line">$ git commit -m <span class="string">&quot;本次提交说明&quot;</span></span><br><span class="line"><span class="comment"># add和commit的合并，便捷写法（未追踪的文件无法直接提交到暂存区/本地仓库）</span></span><br><span class="line">$ git commit -am <span class="string">&quot;本次提交说明&quot;</span>  </span><br><span class="line"><span class="comment"># 将本地分支和远程分支进行关联</span></span><br><span class="line">$ git push -u origin branchName </span><br><span class="line"><span class="comment"># 将本地仓库的文件推送到远程分支</span></span><br><span class="line">$ git push</span><br><span class="line"><span class="comment"># 拉取远程分支的代码</span></span><br><span class="line">$ git pull origin branchName </span><br><span class="line"><span class="comment"># 合并分支</span></span><br><span class="line">$ git merge branchName </span><br><span class="line"><span class="comment"># 查看本地拥有哪些分支</span></span><br><span class="line">$ git branch</span><br><span class="line"><span class="comment"># 查看所有分支（包括远程分支和本地分支）</span></span><br><span class="line">$ git branch -a </span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">$ git checkout branchName </span><br><span class="line"><span class="comment"># 临时将工作区文件的修改保存至堆栈中, 我个人是不太喜欢用stash的， 习惯是切换到另一个分支，保存结点。 毕竟不小心</span></span><br><span class="line"><span class="comment"># 删除 stash中的内容， 找回也挺麻烦的</span></span><br><span class="line">$ git stash</span><br><span class="line"><span class="comment"># 将之前保存至堆栈中的文件取出来</span></span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure></div>

<h3 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## rm</span></span><br><span class="line"><span class="comment"># 删除暂存区和工作区的文件</span></span><br><span class="line">$ git <span class="built_in">rm</span> [filename]</span><br><span class="line"><span class="comment"># 只删除暂存区的文件，不会删除工作区的文件, 停止追踪文件(后面将其添加至gitignore)</span></span><br><span class="line">$ git <span class="built_in">rm</span> --cached [filename]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## commit</span></span><br><span class="line"><span class="comment"># 补充提交, 提交至上一个结点中</span></span><br><span class="line">$ git commit --amend [message] </span><br><span class="line">$ git commit --amend -no-edit</span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## push &amp; pull &amp; fetch</span></span><br><span class="line"><span class="comment"># 将本地仓库的文件推送到远程分支</span></span><br><span class="line"><span class="comment"># 如果远程仓库没有这个分支，会新建一个同名的远程分支</span></span><br><span class="line"><span class="comment"># 如果省略远程分支名，则表示两者同名</span></span><br><span class="line">$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取并合并项目其他人员的一个分支 </span></span><br><span class="line">$ git pull origin branchname  </span><br><span class="line"><span class="comment"># 等同于 fetch + merge</span></span><br><span class="line">$ git fetch origin branchName</span><br><span class="line">$ git merge origin/branchName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强推， 覆盖远程结点</span></span><br><span class="line">$ git push -f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## branch</span></span><br><span class="line"><span class="comment"># 查看本地分支[-r 远程， -a 本地和远程]</span></span><br><span class="line">$ git branch [-r, -a]</span><br><span class="line"><span class="comment"># 新建分支, 可以指向某个提交结点</span></span><br><span class="line">$ git branch &lt;branchName&gt; [commit]</span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">$ git checkout &lt;branchName&gt;</span><br><span class="line"><span class="comment"># 新建并切换</span></span><br><span class="line">$ git checkout -b &lt;branchName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line"><span class="comment"># 删除本地 [-d 被删除的分支上有没有合并的结点会阻止, -D 强制删除分支 ]</span></span><br><span class="line">$ git branch [-d, -D] &lt;branchName&gt;</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push &lt;远程主机名&gt; :&lt;远程分支名&gt;</span><br><span class="line">$ git push &lt;远程主机名&gt; --delete &lt;远程分支名&gt;</span><br><span class="line">$ git branch -dr &lt;remote/branch&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## diff</span></span><br><span class="line"><span class="comment"># 查看工作区和暂存区所有文件的对比[单个文件的对比]</span></span><br><span class="line">$ git diff [fileName]</span><br><span class="line"><span class="comment"># 1.你修改了某个文件，但是没有提交到暂存区，这时候会有对比的内容</span></span><br><span class="line"><span class="comment"># 一旦提交到暂存区，就不会有对比的内容(因为暂存区已经更新)</span></span><br><span class="line"><span class="comment"># 2.如果你新建了一个文件，但是没有提交到暂存区，这时候 diff 是没有结果的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看暂存区与上次提交到本地仓库的快照（即最新提交到本地仓库的快照）的对比</span></span><br><span class="line">$ git diff --cached/--staged</span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"><span class="comment"># 查看本地两个分支的所有的对比[单个文件的对比]</span></span><br><span class="line">$ git diff &lt;branchName1&gt; &lt;branchName2&gt; [fileName]</span><br><span class="line"><span class="comment"># 查看远程分支和远程分支[本地分支]的对比 或 单个文件</span></span><br><span class="line">$ git diff &lt;远程主机名/branchname1&gt; &lt;远程主机名/branchname2 | branchname2&gt; [filenName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看两个 commit 的对比</span></span><br><span class="line">$ git diff commit1 commit2  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个有意思的命令, 查看自己写了多少代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## blame 谁动了你的面包, 甩锅大法</span></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [fileName]</span><br><span class="line"></span><br><span class="line"><span class="comment">## log</span></span><br><span class="line"><span class="comment"># 查看提交历史</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline  </span><br><span class="line">          --grep=<span class="string">&quot;关键字&quot;</span></span><br><span class="line">          --graph </span><br><span class="line">          --all      </span><br><span class="line">          --author <span class="string">&quot;username&quot;</span>     </span><br><span class="line">          --reverse </span><br><span class="line">          -num</span><br><span class="line">          -p</span><br><span class="line">          --before=  1  day/1  week/1  <span class="string">&quot;2019-06-06&quot;</span> </span><br><span class="line">          --after= <span class="string">&quot;2019-06-06&quot;</span></span><br><span class="line">          --<span class="built_in">stat</span> </span><br><span class="line">          --abbrev-commit </span><br><span class="line">          --pretty=format:<span class="string">&quot;xxx&quot;</span></span><br><span class="line">          </span><br><span class="line"><span class="comment"># oneline -&gt; 将日志记录一行一行的显示</span></span><br><span class="line"><span class="comment"># grep=&quot;关键字&quot; -&gt; 查找日志记录中(commit提交时的注释)与关键字有关的记录</span></span><br><span class="line"><span class="comment"># graph -&gt; 记录图形化显示 ！！！    </span></span><br><span class="line"><span class="comment"># all -&gt; 将所有记录都详细的显示出来</span></span><br><span class="line"><span class="comment"># author &quot;username&quot; -&gt; 查找这个作者提交的记录</span></span><br><span class="line"><span class="comment"># reverse -&gt; commit 提交记录顺序翻转      </span></span><br><span class="line"><span class="comment"># before -&gt; 查找规定的时间(如:1天/1周)之前的记录   </span></span><br><span class="line"><span class="comment"># num -&gt; git log -10 显示最近10次提交 ！！！    </span></span><br><span class="line"><span class="comment"># stat -&gt; 显示每次更新的文件修改统计信息，会列出具体文件列表 ！！！</span></span><br><span class="line"><span class="comment"># abbrev-commit -&gt; 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符 ！！！</span></span><br><span class="line"><span class="comment"># pretty=format:&quot;xxx&quot; -&gt;  可以定制要显示的记录格式 ！！！</span></span><br><span class="line"><span class="comment"># p -&gt; 显示每次提交所引入的差异（按 补丁 的格式输出）！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用</span></span><br><span class="line">$ git <span class="built_in">log</span> --graph [--<span class="built_in">stat</span>]</span><br><span class="line"><span class="comment"># 查看本地 git 命令历史, 常用来恢复某些失误的操作</span></span><br><span class="line">$ git reflog</span><br><span class="line"></span><br><span class="line"><span class="comment">## show</span></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## tag</span></span><br><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"><span class="comment"># 新建一个tag在指定commit, 可以指定说明文字</span></span><br><span class="line">$ git tag [tag] [commit] [-m <span class="string">&quot;message&quot;</span>]</span><br><span class="line"><span class="comment"># 查看单个标签具体信息</span></span><br><span class="line">$ git show &lt;tagname&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送一个本地标签</span></span><br><span class="line">$ git push &lt;远程主机名&gt; &lt;tagname&gt;</span><br><span class="line"><span class="comment"># 推送全部未推送过的本地标签</span></span><br><span class="line">$ git push &lt;远程主机名&gt; --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"><span class="comment"># 删除远程tag, 有点像删除远程分支</span></span><br><span class="line">$ git push &lt;远程主机名&gt; :refs/tags/&lt;tagname&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">## remote</span></span><br><span class="line"><span class="comment"># 查看所有远程主机</span></span><br><span class="line">$ git remote</span><br><span class="line"><span class="comment"># 查看关联的远程仓库的详细信息</span></span><br><span class="line">$ git remote -v </span><br><span class="line"><span class="comment"># 删除远程仓库的 “关联”</span></span><br><span class="line">$ git remote <span class="built_in">rm</span> &lt;远程主机名&gt; </span><br><span class="line"><span class="comment"># 添加远程仓库的 “关联”</span></span><br><span class="line">$ git remote add &lt;远程主机名&gt; &lt;remote-url&gt;</span><br><span class="line"><span class="comment"># 设置远程仓库的 “关联”</span></span><br><span class="line">$ git remote set-url &lt;远程主机名&gt; &lt;newurl&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="单读讲讲"><a href="#单读讲讲" class="headerlink" title="单读讲讲"></a>单读讲讲</h3><ul>
<li><h4 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h4><ul>
<li><p><code>merge</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/jingyucute/cdn-assets/2020/images/merge.png"
                      alt="merge方式"
                ></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将另外一个分支合并到当前分支，主要是合并到master</span></span><br><span class="line">$ git merge &lt;branchName&gt; [--fast-forward | --no-ff | --squash]</span><br><span class="line"><span class="comment"># --fast-forward: 会在当前分支的提交历史中添加进被合并分支的提交历史</span></span><br><span class="line"><span class="comment"># --no-ff: 会生成一个新的提交，让当前分支的提交历史不会那么乱</span></span><br><span class="line"><span class="comment"># --squash: 不会生成新的提交，会将被合并分支多次提交的内容直接存到工作区和暂存区，由开发者手动去提交，这样当前分支最终只会多出一条提交记录，不会掺杂被合并分支的提交历史</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>rebase</code></p>
<p>关于rebase 的示意图，  <a class="link"   href="https://blog.csdn.net/gtlbtnq9mr3/article/details/80222523" >看看这篇文章吧 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将master分支中的修改添加到master分支上(保证当前分支的修改， 是基于master分支上的修改)</span></span><br><span class="line">$ git checkout &lt;branchName&gt;</span><br><span class="line">$ git rebase master</span><br><span class="line"><span class="comment"># 或者直接使用</span></span><br><span class="line">$ git rebase &lt;branchName1&gt; &lt;branchName2&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对当前分支提交的 startpoint -&gt; endpoint (前开后闭) 提交记录进行整理</span></span><br><span class="line">$ git rebase -i  [startpoint]  [endpoint]</span><br><span class="line"><span class="comment"># pick：保留该commit（缩写:p）</span></span><br><span class="line"><span class="comment"># reword：保留该commit，但我需要修改该commit的注释（缩写:r）</span></span><br><span class="line"><span class="comment"># edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）</span></span><br><span class="line"><span class="comment"># squash：将该commit和前一个commit合并（缩写:s）</span></span><br><span class="line"><span class="comment"># fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）</span></span><br><span class="line"><span class="comment"># exec：执行shell命令（缩写:x）</span></span><br><span class="line"><span class="comment"># drop：我要丢弃该commit（缩写:d）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择特定的结点到指定分支(区间前开后闭), 建议使用 cherry-pick</span></span><br><span class="line">$ git rebase [startpoint] [endpoint] --onto master</span><br><span class="line"><span class="comment"># 注意: 添加过去的结点， 还处于游离状态(HEAD没有处于最新结点) ， 可以新建一个分支或直接使用 reset --hard</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>cherry-pick</code></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将提交的结点 添加到当前分支，会产生一个新的提交(哈希值不一样)</span></span><br><span class="line">$ git cherry-pick &lt;commitHash&gt;</span><br><span class="line"><span class="comment"># 将另外一个分支上最新提交的结点添加到当前分支</span></span><br><span class="line">$ git cherry-pick &lt;branchName&gt;</span><br><span class="line"><span class="comment"># 转移多个提交</span></span><br><span class="line">$ git cherry-pick &lt;HashA&gt; &lt;HashB&gt;</span><br><span class="line"><span class="comment"># 转移一系列提交（区间， 左开右闭）</span></span><br><span class="line">$ git cherry-pick &lt;HashA&gt;^..&lt;HashB&gt;</span><br></pre></td></tr></table></figure></div>

<p>关于<code>cherry-pick</code>, <a class="link"   href="https://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html" >参考这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
</li>
<li><h4 id="撤销-amp-回退"><a href="#撤销-amp-回退" class="headerlink" title="撤销&amp;回退"></a>撤销&amp;回退</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 原来的命令</span></span><br><span class="line"><span class="comment"># 撤销工作区修改的文件, 还未提交到暂存区</span></span><br><span class="line">$ git checkout filname</span><br><span class="line"><span class="comment"># 撤销暂存区的文件</span></span><br><span class="line">$ git reset HEAD filename</span><br><span class="line"></span><br><span class="line"><span class="comment">## checkout</span></span><br><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout &lt;filename&gt;</span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"><span class="comment"># 检出结点, 标签</span></span><br><span class="line">$ git checkout[&lt;commitid&gt; | &lt;tag&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment">## reset</span></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变, 软回退</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致, 硬回退</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment">## revert</span></span><br><span class="line"><span class="comment"># 生成一个撤销指定提交版本的新提交</span></span><br><span class="line">$ git revert &lt;commit_id&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新命令</span></span><br><span class="line"><span class="comment">## restore &amp; switch</span></span><br><span class="line"><span class="comment"># 主要还是为了分离 checkout的功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支 = git checkout &lt;branchName&gt;</span></span><br><span class="line">$ git switch &lt;branchName&gt;</span><br><span class="line"><span class="comment"># 创建并切换到新建分支 = git checkout -b &lt;newbranch&gt;</span></span><br><span class="line">$ git switch -c &lt;newBranch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销工作区修改的文件 = git checkout &lt;fileName&gt;</span></span><br><span class="line">$ git restore &lt;fileName&gt;</span><br><span class="line"><span class="comment"># 撤销暂存区的文件 = git reset &lt;fileName&gt;</span></span><br><span class="line">$ git restore --staged &lt;fileName&gt;</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Gvm-Go版本管理工具</title>
    <url>/2023/03/13/go/gvm-usage/</url>
    <content><![CDATA[<blockquote>
<p>Go语言版本迭代很快，几乎每个月更新一个小版本。对于我这样一个特别喜欢使用最新版本的人来说，就希望能够便捷的管理Go版本，Gvm就是一款这样的工具。</p>
</blockquote>
<span id="more"></span>

<p>记录安装时，个人用的是Ubuntu22.04系统</p>
<h3 id="安装Gvm"><a href="#安装Gvm" class="headerlink" title="安装Gvm"></a>安装Gvm</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">bash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)</span><br></pre></td></tr></table></figure></div>

<p>执行命令时，可能会有如下提示</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/jingyucute/cdn-assets/picgo/202303131612989.png"
                      alt="2023-03-13_16-10"
                ></p>
<p>按照提示，安装bison <code>sudo apt install bison</code></p>
<p>安装完成后，执行 <code>source</code> 命令</p>
<p>最后检查gvm是否安装成功<code>gvm version</code></p>
<h3 id="Gvm相关命令"><a href="#Gvm相关命令" class="headerlink" title="Gvm相关命令"></a>Gvm相关命令</h3><p>可以使用<code>gvm help</code>查看相关帮助</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/jingyucute/cdn-assets/picgo/202303131624481.png"
                      alt="2023-03-13_16-23"
                ></p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看可以安装的版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gvm listall</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看本地安装的版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gvm list</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装某个版本</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">看到这里先别急着安装，看到后面具体安装部分再操作</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gvm install [version]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载某个版本</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gvm uninstall [version]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用某个版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gvm use [version] [--default]</span></span><br></pre></td></tr></table></figure></div>

<h3 id="安装Go版本"><a href="#安装Go版本" class="headerlink" title="安装Go版本"></a>安装Go版本</h3><p>要安装最新版本，先必须安装go1.4, 因为1.4版本实现了go的自举更新</p>
<p>要构建 x ≥ 5 的 Go 1.x，必须在 <code>$GOROOT_BOOTSTRAP</code> 中已经安装 Go 1.4</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装1.4版本 使用源码</span></span><br><span class="line">$ gvm install go1.4 -B</span><br><span class="line"><span class="comment"># 2. 使用1.4版本</span></span><br><span class="line">$ gvm use go1.4</span><br><span class="line"><span class="comment"># 3. 导入临时环境变量自举起使版本</span></span><br><span class="line">$ <span class="built_in">export</span> GOROOT_BOOTSTRAP=<span class="variable">$GOROOT</span></span><br><span class="line"><span class="comment"># 4. 下载go1.17.13</span></span><br><span class="line">$ gvm install go1.17.13</span><br><span class="line"><span class="comment"># 5. 使用go.17.13</span></span><br><span class="line">$ gvm use go1.17.13</span><br><span class="line"><span class="comment"># 6. 重新设置环境变量自举起使版本</span></span><br><span class="line">$ <span class="built_in">export</span> GOROOT_BOOTSTRAP=<span class="variable">$GOROOT</span></span><br><span class="line"><span class="comment"># 7. 下载最新版本</span></span><br><span class="line">$ gvm install go1.20.2</span><br><span class="line"><span class="comment"># 8. 使用最新版本，并根据个人爱好，是否成默认</span></span><br><span class="line">$ gvm use go1.20.2 --default</span><br></pre></td></tr></table></figure></div>

<p><strong>注意</strong></p>
<p>直接下载最新版本会报错</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">can&#x27;t load package: package ./cmd/dist: found packages build.go (main) and notgo117.go (building_Go_requires_Go_1_17_13_or_later)</span><br></pre></td></tr></table></figure></div>

<p>需要我们先安装go1.17.13版本，然后将其作为<code>GOROOT_BOOTSTRAP</code>，<a class="link"   href="https://github.com/moovweb/gvm/issues/424" >参考这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.gvm</span><br><span class="line">$ tree -L 1 </span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── archive       github go源码仓库</span><br><span class="line">├── AUTHORS</span><br><span class="line">├── autogen.sh</span><br><span class="line">├── bin</span><br><span class="line">├── binscripts</span><br><span class="line">├── ChangeLog</span><br><span class="line">├── config</span><br><span class="line">├── configure.ac</span><br><span class="line">├── environments</span><br><span class="line">├── examples</span><br><span class="line">├── extra</span><br><span class="line">├── Gemfile</span><br><span class="line">├── git.bak</span><br><span class="line">├── gos            go的安装目录 也就是GOROOT, 类似于Java JDK， 从archive目录中克隆过来的</span><br><span class="line">├── LICENSE</span><br><span class="line">├── logs</span><br><span class="line">├── Makefile.am</span><br><span class="line">├── NEWS</span><br><span class="line">├── pkgsets        go项目工作空间，保存三方包的依赖</span><br><span class="line">├── Rakefile</span><br><span class="line">├── README</span><br><span class="line">├── README.md</span><br><span class="line">├── scripts</span><br><span class="line">├── tests</span><br><span class="line">├── Vagrantfile</span><br><span class="line">└── VERSION</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>开发</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>Gvm</tag>
      </tags>
  </entry>
  <entry>
    <title>常用工具网址</title>
    <url>/2020/07/28/tools/tool-assistant/</url>
    <content><![CDATA[<blockquote>
<p>这里记录一些常用的工具、网址等等</p>
</blockquote>
<span id="more"></span>

<h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><hr>
<ul>
<li><a class="link"   href="https://next.itellyou.cn/" >我告诉你 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://favicon.io/" >简易图标制作 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://icons8.cn/" >svg简易制作 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://tool.lu/" >一个很有意思的小站 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><hr>
<ul>
<li><p>Typora</p>
</li>
<li><p>V2rayU</p>
</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Helper</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora快捷键使用(Mac)</title>
    <url>/2020/06/25/tools/typora-usage/</url>
    <content><![CDATA[<blockquote>
<p>简介</p>
<p>刚开始搭建自己的博客， 学习了一下Markdown语法和Typora，这里记录了一下相关快捷键的使用。</p>
</blockquote>
<span id="more"></span>

<h1 id="1、基本操作"><a href="#1、基本操作" class="headerlink" title="1、基本操作"></a>1、基本操作</h1><h2 id="1-1-生成目录"><a href="#1-1-生成目录" class="headerlink" title="1.1 生成目录"></a>1.1 生成目录</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[toc]</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>效果图</p>
<p>[toc]</p>
</li>
</ul>
<h2 id="1-2-标题"><a href="#1-2-标题" class="headerlink" title="1.2 标题"></a>1.2 标题</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#     		一级标题</span><br><span class="line">##    		二级标题</span><br><span class="line">###   		三级标题</span><br><span class="line">####  		四级标题</span><br><span class="line">##### 		五级标题</span><br><span class="line">######		六级标题</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>快捷键</p>
<p>Command + [1, 2, 3, 4, 5, 6] 分别对应几级标题</p>
</li>
</ul>
<h2 id="1-3-引用"><a href="#1-3-引用" class="headerlink" title="1.3 引用"></a>1.3 引用</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 引用内容1</span></span><br><span class="line"><span class="code">	&gt;&gt; 引用内容2</span></span><br><span class="line"><span class="code">		&gt;&gt; 引用内容3</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>快捷键</p>
<p>Command + Option + Q</p>
</li>
<li><p>效果图</p>
<blockquote>
<p>引用内容1</p>
<blockquote>
<p>引用内容2</p>
<blockquote>
<p>引用内容3</p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ul>
<h2 id="1-4-文本居中"><a href="#1-4-文本居中" class="headerlink" title="1.4 文本居中"></a>1.4 文本居中</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span>居中文本<span class="language-xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>效果图 </p>
 <center>居中文本</center></li>
</ul>
<h1 id="2-、code使用"><a href="#2-、code使用" class="headerlink" title="2 、code使用"></a>2 、code使用</h1><h2 id="2-1-单行代码"><a href="#2-1-单行代码" class="headerlink" title="2.1 单行代码"></a>2.1 单行代码</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">`String str = &quot;Hello Typora&quot;;`</span><br><span class="line">``String str = &quot;Hello Typora&quot;;``</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>效果图</p>
<p><code>String str = &quot;Hello Typora&quot;;</code></p>
</li>
</ul>
<h2 id="2-2-多行代码"><a href="#2-2-多行代码" class="headerlink" title="2.2 多行代码"></a>2.2 多行代码</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">输入 <span class="code">```[language] + enter</span></span><br><span class="line"><span class="code">或者 ``` </span>+ enter , 然后选择语言类型</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>快捷键</p>
<p>Command + Option + C</p>
</li>
<li><p>效果图</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">3</span>;</span><br><span class="line">count&lt;&lt;<span class="string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;, b=&quot;</span>&lt;&lt;b&lt;&lt;<span class="string">&quot;, c=&quot;</span>&lt;&lt;c&lt;&lt;endl;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h1 id="3、列表"><a href="#3、列表" class="headerlink" title="3、列表"></a>3、列表</h1><h2 id="3-1-无序列表"><a href="#3-1-无序列表" class="headerlink" title="3.1 无序列表"></a>3.1 无序列表</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> (+) [space]</span><br><span class="line"><span class="bullet">-</span> (+) [space]</span><br><span class="line"><span class="bullet">+</span> (+) [space]</span><br></pre></td></tr></table></figure></div></li>
</ul>
<ul>
<li><p>快捷键</p>
<p>Command + Option + U</p>
</li>
<li><p>效果图</p>
<ul>
<li>类别一</li>
<li>类别二</li>
<li>类别三</li>
</ul>
</li>
</ul>
<h2 id="3-2-有序列表"><a href="#3-2-有序列表" class="headerlink" title="3.2 有序列表"></a>3.2 有序列表</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. (+) [space]</span><br><span class="line">2. (+) [space]</span><br><span class="line">3. (+) [space]</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>快捷键</p>
<p>Command + Option + O</p>
</li>
<li><p>效果图</p>
<ol>
<li>类别1</li>
<li>类别2</li>
<li>类别3</li>
</ol>
</li>
</ul>
<h2 id="3-3-任务列表"><a href="#3-3-任务列表" class="headerlink" title="3.3 任务列表"></a>3.3 任务列表</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">形式: - [ ] 文本   为未选中文本</span><br><span class="line"><span class="bullet">		 -</span> [x] 文本   为选中文本</span><br><span class="line">注意: -和[之间有空格, [和]之间有空格, ]和文本之间有空格</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>快捷键</p>
<p>Command + Option + X</p>
</li>
<li><p>效果图</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 钓鱼</li>
<li><input checked="" disabled="" type="checkbox"> 编程</li>
<li><input checked="" disabled="" type="checkbox"> 散步</li>
<li><input disabled="" type="checkbox"> 游戏</li>
<li><input disabled="" type="checkbox"> 电影</li>
</ul>
</li>
</ul>
<h2 id="3-4-表格"><a href="#3-4-表格" class="headerlink" title="3.4 表格"></a>3.4 表格</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">|姓名|性别|年龄|手机号|</span><br><span class="line">|:---|:--:|:--:|:---:|</span><br><span class="line">|张三|男|21|18975346876|</span><br><span class="line">|李四|女|23|17789548964|</span><br><span class="line">|王五|男|25|15876513546|</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>快捷键</p>
<p>Command + Option + T</p>
</li>
<li><p>效果图</p>
<table>
<thead>
<tr>
<th align="left">姓名</th>
<th align="center">性别</th>
<th align="center">年龄</th>
<th align="center">手机号</th>
</tr>
</thead>
<tbody><tr>
<td align="left">张三</td>
<td align="center">男</td>
<td align="center">21</td>
<td align="center">18975346876</td>
</tr>
<tr>
<td align="left">李四</td>
<td align="center">女</td>
<td align="center">23</td>
<td align="center">17789548964</td>
</tr>
<tr>
<td align="left">王五</td>
<td align="center">男</td>
<td align="center">25</td>
<td align="center">15876513546</td>
</tr>
</tbody></table>
</li>
</ul>
<h1 id="4、链接"><a href="#4、链接" class="headerlink" title="4、链接"></a>4、链接</h1><h2 id="4-1-图片"><a href="#4-1-图片" class="headerlink" title="4.1 图片"></a>4.1 图片</h2><ul>
<li><p>语法</p>
<ul>
<li><p>本地图片</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">直接拖进来</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>网络图片</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">杭州西湖.jpg</span>](<span class="link">https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1593110861170&amp;di=6651925eaab36bfeb23347aa51a12cb7&amp;imgtype=0&amp;src=http%3A%2F%2Fa3.att.hudong.com%2F14%2F75%2F01300000164186121366756803686.jpg</span>)</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<ul>
<li>效果图<ul>
<li><p>本地 </p>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/Users/jingyu/work/local/yjy_blog/public/assets/images/timg.jpeg"
                      alt="timg" style="zoom:25%;" 
                >
</li>
<li><p>网络</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593110861170&di=6651925eaab36bfeb23347aa51a12cb7&imgtype=0&src=http://a3.att.hudong.com/14/75/01300000164186121366756803686.jpg"
                      alt="杭州西湖" title="西湖美景"
                ></p>
</li>
</ul>
</li>
</ul>
<h2 id="4-2-文本链接"><a href="#4-2-文本链接" class="headerlink" title="4.2 文本链接"></a>4.2 文本链接</h2><ul>
<li><p>语法</p>
<ul>
<li><p>不显示链接网址</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[百度](https://www.baidu.com)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>只显示链接url</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;https://www.baidu.com&gt;</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p>快捷键</p>
<p>Command + K</p>
</li>
<li><p>效果图</p>
<ul>
<li><p>不显示地址</p>
<p><a class="link"   href="https://www.baidu.com/" >百度 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>只显示url</p>
<p><a class="link"   href="https://www.baidu.com/" >https://www.baidu.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
</li>
</ul>
<h1 id="5、其它快捷键"><a href="#5、其它快捷键" class="headerlink" title="5、其它快捷键"></a>5、其它快捷键</h1><h2 id="5-1-斜体"><a href="#5-1-斜体" class="headerlink" title="5.1 斜体"></a>5.1 斜体</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">*斜体文字1*</span><br><span class="line">_斜体文字2_</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>快捷键</p>
<p>Command + I</p>
</li>
<li><p>效果图</p>
<p><em>斜体文字1</em></p>
<p><em>斜体文字2</em></p>
</li>
</ul>
<h2 id="5-2-粗体"><a href="#5-2-粗体" class="headerlink" title="5.2 粗体"></a>5.2 粗体</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">**粗体文字1**</span><br><span class="line">__粗体文字2__</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>快捷键</p>
<p>Command + B</p>
</li>
<li><p>效果图</p>
<p><strong>粗体文字1</strong></p>
<p><strong>粗体文字2</strong></p>
</li>
</ul>
<h2 id="5-3-加粗斜体"><a href="#5-3-加粗斜体" class="headerlink" title="5.3 加粗斜体"></a>5.3 加粗斜体</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">***加粗斜体文字1***</span><br><span class="line">___加粗斜体文字2___</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>效果图</p>
<p><em><strong>加粗斜体文字1</strong></em></p>
<p><em><strong>加粗斜体文字2</strong></em></p>
</li>
</ul>
<h2 id="5-4-下划线"><a href="#5-4-下划线" class="headerlink" title="5.4 下划线"></a>5.4 下划线</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线文字<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>快捷键</p>
<p>Command + U</p>
</li>
<li><p>效果图</p>
<p><u>下划线文字</u></p>
</li>
</ul>
<h2 id="5-5-删除线"><a href="#5-5-删除线" class="headerlink" title="5.5 删除线"></a>5.5 删除线</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">~~删除文字~~</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>快捷键</p>
<p>Control + Shift + &#96;</p>
</li>
<li><p>效果图</p>
<p><del>删除文字</del></p>
</li>
</ul>
<h2 id="5-6-分割线"><a href="#5-6-分割线" class="headerlink" title="5.6 分割线"></a>5.6 分割线</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">--- (+) [enter]</span><br><span class="line">*** (+) [enter]</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>快捷键</p>
<p>Command (+) Option (+) -</p>
</li>
<li><p>效果图</p>
<hr>
</li>
</ul>
<h2 id="5-7-脚注"><a href="#5-7-脚注" class="headerlink" title="5.7 脚注"></a>5.7 脚注</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Typora1[^1]</span><br><span class="line">Typora2[^2]</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>快捷键</p>
<p>Command + Option + R</p>
</li>
<li><p>效果图</p>
<p>Typora<a href="Typora1">^1</a></p>
<p>Typora2<a href="Typora2">^2</a></p>
</li>
</ul>
<h2 id="5-8-符号输入"><a href="#5-8-符号输入" class="headerlink" title="5.8 符号输入"></a>5.8 符号输入</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">\\   反斜线</span><br><span class="line">\`   反引号</span><br><span class="line">\*   星号</span><br><span class="line">\_   底线</span><br><span class="line">\&#123; \&#125;  花括号</span><br><span class="line">\[ \]  方括号</span><br><span class="line">\( \)  括弧</span><br><span class="line">\#   井字号</span><br><span class="line">\+   加号</span><br><span class="line">\-   减号</span><br><span class="line">\.   英文句点</span><br><span class="line">\!   惊叹号</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>效果图</p>
<p>\</p>
</li>
</ul>
<h2 id="5-9-特殊字符"><a href="#5-9-特殊字符" class="headerlink" title="5.9 特殊字符"></a>5.9 特殊字符</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;copy;      版权      </span><br><span class="line">&amp;reg;       注册商标</span><br><span class="line">&amp;trade;     商标</span><br><span class="line">&amp;nbsp;      空格</span><br><span class="line">&amp;amp;       和号</span><br><span class="line">&amp;quot;      引号</span><br><span class="line">&amp;apos;      撇号</span><br><span class="line">&amp;lt;        小于号</span><br><span class="line">&amp;gt;        大于号</span><br><span class="line">&amp;ne;        不等号</span><br><span class="line">&amp;le;        小于等于</span><br><span class="line">&amp;ge;        大于等于</span><br><span class="line">&amp;cent;      分</span><br><span class="line">&amp;pound;     磅</span><br><span class="line">&amp;euro;      欧元</span><br><span class="line">&amp;yen;       元</span><br><span class="line">&amp;sect;      节</span><br><span class="line">&amp;times;     乘号</span><br><span class="line">&amp;divide;    除号</span><br><span class="line">&amp;plusmn;    正负号</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>效果图</p>
<p>&amp;copy;</p>
<p>&amp;pound;</p>
<p>&amp;apos;</p>
<p>&amp;euro;</p>
</li>
</ul>
<h2 id="5-10-表情"><a href="#5-10-表情" class="headerlink" title="5.10 表情"></a>5.10 表情</h2><ul>
<li><p>语法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">:smiley:</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>效果图</p>
<p>:smile:</p>
<p>:unamused:</p>
</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>VsCode常用插件介绍</title>
    <url>/2023/03/07/tools/vscode-plugins/</url>
    <content><![CDATA[<blockquote>
<p>vscode插件繁多，记录经常使用的插件</p>
</blockquote>
<span id="more"></span>

<h3 id="公用"><a href="#公用" class="headerlink" title="公用"></a>公用</h3><table>
<thead>
<tr>
<th>插件</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Tabnine</td>
<td>自动补全代码</td>
</tr>
<tr>
<td>Live Server</td>
<td>启动一个本地服务器</td>
</tr>
<tr>
<td>vscode-icons</td>
<td>文件显示图标</td>
</tr>
<tr>
<td>Remote-SSH</td>
<td>编辑远程服务器上的文件</td>
</tr>
<tr>
<td>Bookmarks</td>
<td>给代码打上标签，方便阅读快速跳转</td>
</tr>
<tr>
<td>Prettier</td>
<td>格式化代码</td>
</tr>
<tr>
<td>Editorconfig</td>
<td>统一代码格式规范</td>
</tr>
</tbody></table>
<h3 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h3><table>
<thead>
<tr>
<th>插件</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Volar</td>
<td>代码高亮，语法提示等</td>
</tr>
<tr>
<td>Vue VSCode Snippets</td>
<td>便捷语法功能, eg: vbase</td>
</tr>
<tr>
<td>ESLint</td>
<td>检查ES语法</td>
</tr>
</tbody></table>
<h3 id="PHP开发"><a href="#PHP开发" class="headerlink" title="PHP开发"></a>PHP开发</h3><table>
<thead>
<tr>
<th>插件</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>PHP Intelephense</td>
<td>自动导包，搜索跳转功能</td>
</tr>
</tbody></table>
<h3 id="Python开发"><a href="#Python开发" class="headerlink" title="Python开发"></a>Python开发</h3><table>
<thead>
<tr>
<th>插件</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Pylance</td>
<td>自动导包，搜索跳转功能等</td>
</tr>
</tbody></table>
<h3 id="Go开发"><a href="#Go开发" class="headerlink" title="Go开发"></a>Go开发</h3><table>
<thead>
<tr>
<th>插件</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>go</td>
<td>自动导包，搜索跳转功能等</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>VsCode</tag>
      </tags>
  </entry>
  <entry>
    <title>防抖和节流</title>
    <url>/2023/03/09/node/debounce-throttle/</url>
    <content><![CDATA[<blockquote>
<p>防抖和节流，是当频繁触发某个事件时，对其做出相关限制。在在后端开发中，使用防抖和节流，可以减少向服务器请求的频率</p>
</blockquote>
<span id="more"></span>

<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>防抖</strong>: 延迟执行。 n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</p>
<p><strong>节流</strong>: 固定时间内执行。n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效</p>
<p>效果示意图</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/jingyucute/cdn-assets/picgo/202303091127933.png"
                      alt="test" style="zoom: 33%;" 
                >

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="未实现防抖和节流"><a href="#未实现防抖和节流" class="headerlink" title="未实现防抖和节流"></a>未实现防抖和节流</h4><ol>
<li>定义两个页面元素</li>
</ol>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">class</span>=<span class="string">input</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&#x27;result&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>监听元素输入事件</li>
</ol>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> inputEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.input&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> resultEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.result&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getRemoteData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> text = <span class="variable language_">this</span>.<span class="property">value</span></span><br><span class="line">    <span class="comment">// 模拟网络请求</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(text)</span><br><span class="line">        &#125;, <span class="number">500</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    resultEl.<span class="property">innerHTML</span> = <span class="string">`输入内容为: <span class="subst">$&#123;result&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inputEl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, getRemoteData)</span><br></pre></td></tr></table></figure></div>

<h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><p>使用setTimeout和clearTimeout实现</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义防抖函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debouce</span>(<span class="params">event, <span class="keyword">await</span></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="comment">// 每次触发后，判断是否已经有了定时器， 如果有，清除</span></span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        <span class="comment">// 如果没有，定义一个定时器， await事件后执行</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            event.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">        &#125;, <span class="keyword">await</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 重新绑定input事件</span></span><br><span class="line">inputEl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="title function_">debouce</span>(getRemoteData, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure></div>

<h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><h5 id="时间戳的方式"><a href="#时间戳的方式" class="headerlink" title="时间戳的方式"></a>时间戳的方式</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">event, <span class="keyword">await</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断和上一次执行时间的间隔是否大于await</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Date</span>() - pre &gt; <span class="keyword">await</span>)&#123;</span><br><span class="line">        	pre = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">            event.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用这种方式，有一个弊端，就是最后一次事件，可能不会执行(当n和n-1的时间间隔大于await才会执行)</span></span><br><span class="line"></span><br><span class="line">inputEl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="title function_">throttle</span>(getRemoteData, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure></div>

<h5 id="定时器的方式"><a href="#定时器的方式" class="headerlink" title="定时器的方式"></a>定时器的方式</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">event, <span class="keyword">await</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                timer = <span class="literal">null</span> <span class="comment">//执行完成后，需要将变量重置，然后重新生成新的定时器</span></span><br><span class="line">                event.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">            &#125;, <span class="keyword">await</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 使用这种方式，就是第一次事件触发后不会立即执行， 不过问题也不大</span></span><br><span class="line">inputEl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="title function_">throttle</span>(getRemoteData, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure></div>

<h5 id="时间戳和定时器结合"><a href="#时间戳和定时器结合" class="headerlink" title="时间戳和定时器结合"></a>时间戳和定时器结合</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">event, <span class="keyword">await</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>, timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Date</span>() - pre &gt; <span class="keyword">await</span>) &#123;</span><br><span class="line">            <span class="comment">// 这里判断一下的逻辑是， 上一次(定时器)和现在(时间戳)的方式需要转换，清除上一次的变量,或者说替换上一次的执行</span></span><br><span class="line">        	<span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            	<span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">            	timer = <span class="literal">null</span></span><br><span class="line">        	&#125;</span><br><span class="line">        	event.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                event.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">            &#125;, <span class="keyword">await</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="使用三方库"><a href="#使用三方库" class="headerlink" title="使用三方库"></a>使用三方库</h4><h4 id="lodash使用"><a href="#lodash使用" class="headerlink" title="lodash使用"></a>lodash使用</h4><p>​	可以通过npm下载管理，</p>
<p>​	我这里就直接使用cdn方式</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p><strong>_.debounce(func, wait, option)</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">inputEl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, _.<span class="title function_">debounce</span>(getRemoteData, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>_.throttle(func, wait, option)</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">inputEl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, _.<span class="title function_">throttle</span>(getRemoteData, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>防抖在连续的事件，只需触发一次回调的场景有：</p>
<ul>
<li>搜索框搜索输入。只需用户最后一次输入完，再发送请求</li>
<li>手机号、邮箱验证输入检测</li>
<li>窗口大小resize。只需窗口调整完成后，计算窗口大小。防止重复渲染。</li>
</ul>
<p>节流在间隔一段时间执行一次回调的场景有：</p>
<ul>
<li>滚动加载，加载更多或滚到底部监听</li>
<li>搜索框，搜索联想功能</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器和生成器</title>
    <url>/2023/03/13/node/iterator-generator/</url>
    <content><![CDATA[<blockquote>
<p>在了解for…of遍历的时候，简单的提到了可迭代对象这个词，这里来具体了解一下</p>
</blockquote>
<span id="more"></span>

<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前面说到可迭代对象是含有Symbol.iterator属性的对象。具体说到可迭代对象，就要涉及到迭代器和生成器。</p>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代器本身是一个对象，这个对象是具有next()方法返回结果对象。这个返回对象是一个<code>&#123;value: any, done: boolean&#125;</code>格式的对象。 </p>
<p>一旦创建迭代器对象，这个对象可以通过重复调用next()方法显示地迭代。迭代一个迭代器对象，就成为消耗了这个迭代器，因为它通常只能执行一次，在产生了终值以后，调用next方法会返回一个{done: true, value: undefined}的对象</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createIterator</span>(<span class="params">items</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> result = &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">      <span class="keyword">if</span> (index &lt; items.<span class="property">length</span>)&#123;</span><br><span class="line">        result = &#123;<span class="attr">value</span>: items[index], <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> it = <span class="title function_">createIterator</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>())  <span class="comment">// &#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>())  <span class="comment">// &#123;value: 2, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>())  <span class="comment">// &#123;value: 3, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>())  <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createRangeIterator</span>(<span class="params">start = <span class="number">0</span>,end = <span class="literal">Infinity</span>,step = <span class="number">1</span></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> value = start</span><br><span class="line">  <span class="keyword">const</span> iterator = &#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> result = &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">      <span class="keyword">if</span> (value &lt;= end)&#123;</span><br><span class="line">        result = &#123;<span class="attr">value</span>: value, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">        value += step</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> iterator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rit = <span class="title function_">createRangeIterator</span>(<span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> result = rit.<span class="title function_">next</span>() </span><br><span class="line"><span class="keyword">while</span> (!result.<span class="property">done</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">value</span>) <span class="comment">// 1 3 5 7</span></span><br><span class="line">  result = rit.<span class="title function_">next</span>()  <span class="comment">// 重复调用， 显示迭代</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>每次调用迭代器的next()方法，都会返回下一个对象，直到数据集被用尽</strong></p>
<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>自定义的迭代器，需要我们显示的维护其内部的状态，故需要谨慎创建。生成器函数，可以帮助我们创建一个迭代器对象</p>
<p>生成器函数，使用<code>function*</code> 语法， 返回一种成为generator的迭代器。调用生成器的下一个方法消耗值时，generator函数将执行，直到遇到<code>yield</code>关键字</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">createRangeIterator</span>(<span class="params">start = <span class="number">0</span>, end = <span class="literal">Infinity</span>, step = <span class="number">1</span></span>)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = start; i &lt;= end; i += step)&#123;</span><br><span class="line">    <span class="keyword">yield</span> i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rit = <span class="title function_">createRangeIterator</span>(<span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> result = rit.<span class="title function_">next</span>()</span><br><span class="line"><span class="keyword">while</span>(!result.<span class="property">done</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">value</span>)  <span class="comment">// 1 3 5 7</span></span><br><span class="line">  result = rit.<span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for...of语法遍历</span></span><br><span class="line"><span class="keyword">const</span> rit1 = <span class="title function_">createRangeIterator</span>(<span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> rit1)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// 1 3 5 7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用生成器函数创建的迭代器，比之前自定义的生成器精简了不少</p>
<p><strong>高级生成器</strong></p>
<p>生成器中next()方法也是可以接受一个参数，用于修改生成器内部的状态。传递给next()方法的参数会被yield接收。但传递给第一next()方法的参数会被忽略</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">createIterator</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> param1 = <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;param1&#x27;</span>, param1)   <span class="comment">// param1 p2</span></span><br><span class="line">  <span class="keyword">const</span> param2 = <span class="keyword">yield</span> <span class="number">2</span> </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;param2&#x27;</span>, param2)  <span class="comment">// param2 p3</span></span><br><span class="line">  <span class="keyword">const</span> param3 = <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;param3&#x27;</span>, param3) <span class="comment">// param3 p4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> it = <span class="title function_">createIterator</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;result1&#x27;</span>, it.<span class="title function_">next</span>(<span class="string">&#x27;p1&#x27;</span>)) <span class="comment">// result1 &#123;value:1 ,done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;result2&#x27;</span>, it.<span class="title function_">next</span>(<span class="string">&#x27;p2&#x27;</span>)) <span class="comment">// result2 &#123;value:2 ,done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;result3&#x27;</span>, it.<span class="title function_">next</span>(<span class="string">&#x27;p3&#x27;</span>)) <span class="comment">// result3 &#123;value:3 ,done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;result4&#x27;</span>, it.<span class="title function_">next</span>(<span class="string">&#x27;p4&#x27;</span>)) <span class="comment">// result4 &#123;value:undefined ,done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终输出结果顺序如下</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  result1 &#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="comment">  param1 p2</span></span><br><span class="line"><span class="comment">  result2 &#123;value:2 ,done: false&#125;</span></span><br><span class="line"><span class="comment">  param2 p3</span></span><br><span class="line"><span class="comment">  result3 &#123;value:3 ,done: false&#125;</span></span><br><span class="line"><span class="comment">  param3 p4</span></span><br><span class="line"><span class="comment">  result4 &#123;value:undefined ,done: true&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另外，对于生成器生成的迭代器，我们可以使用for...of语法</span></span><br><span class="line"><span class="keyword">const</span> it2 = <span class="title function_">createIterator</span>()</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> it2)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// 1 2 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><em>分析</em> ： </p>
<ul>
<li>关于参数接收问题， 我们可以看见每次调用next(),显示直接返回结果，拿取下一次调用next()方法中的参数作为当前yield 的返回结果</li>
<li>yield返回参数后，后面的代码不会执行了，只有当下次调用next()时，才会执行到下一个yield的位置</li>
<li>结合以上两个特性，我们可以看出它为什么丢弃了第一次的参数</li>
</ul>
<h3 id="可迭代对象-iterables"><a href="#可迭代对象-iterables" class="headerlink" title="可迭代对象(iterables)"></a>可迭代对象(iterables)</h3><p>为了实现<strong>可迭代</strong>，一个对象必须实现 <code>@@iterator</code>方法，这意味着这个对象（或其原型链中的任意一个对象）必须具有一个带 <code>Symbol.iterator</code>键（key）的属性。</p>
<p>对于只迭代一次的iterables,通常从@@iterator返回本身， 对于可以迭代多次的，必须每次调用@@iterator方法返回一个新的迭代器</p>
<p>常用内置可迭代对象: <strong>String</strong>、<strong>Array</strong>、<strong>TypedArray</strong>、<strong>Map</strong>、<strong>Set</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myIterable = &#123;</span><br><span class="line">  *[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">yield</span> i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> myIterable)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// 1 2 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和使用原生迭代器的方式对比一下</span></span><br><span class="line"><span class="keyword">const</span> myIterable1 = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> end = <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> result = &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; end)&#123;</span><br><span class="line">          result = &#123;<span class="attr">value</span>: index, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">          index += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...myIterable1]) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>开发</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>for...in 和 for...of的使用</title>
    <url>/2023/03/10/node/for-in-of/</url>
    <content><![CDATA[<blockquote>
<p>在ES中，遍历数据的时候会用到for…in&#x2F;of的语法，比较一下两者的用法</p>
</blockquote>
<span id="more"></span>

<h3 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h3><p>for…of是ES6的语法，用来遍历可迭代的对象(含有Symbol.iterator属性的对象)。像Array, Map, Set, 字符串等</p>
<h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> arr1)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(item)     <span class="comment">// a b c</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map1 = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">map1.<span class="title function_">set</span>(<span class="string">&#x27;k1&#x27;</span>, <span class="string">&#x27;v1&#x27;</span>)</span><br><span class="line">map1.<span class="title function_">set</span>(<span class="string">&#x27;k2&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">map1.<span class="title function_">set</span>(<span class="string">&#x27;k3&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;kobe&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> map1)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// [&#x27;k1&#x27;, &#x27;v1&#x27;] [&#x27;k2&#x27;, 1] [&#x27;k3&#x27;, &#123;&quot;name&quot;: &quot;kobe&quot;&#125;]</span></span><br><span class="line">  <span class="comment">// const [k, v] = item </span></span><br><span class="line">  <span class="comment">// console.log(k, v)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set1 = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">set1.<span class="title function_">add</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">set1.<span class="title function_">add</span>(<span class="number">100</span>)</span><br><span class="line">set1.<span class="title function_">add</span>(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;kobe&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">eat</span>: <span class="function">() =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;eat&#x27;</span>)&#125;&#125;</span><br><span class="line">set1.<span class="title function_">add</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> set1)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// hello 100 &#123;&#x27;name&#x27;:&#x27;kobe&#x27;&#125; &#123;eat: () =&gt; &#123;console.log(&#x27;eat&#x27;)&#125;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="手动实现forOf"><a href="#手动实现forOf" class="headerlink" title="手动实现forOf"></a>手动实现forOf</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">forOf</span> = (<span class="params">obj, cb</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> iterable, result</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj, <span class="keyword">typeof</span> obj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>])</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;params is not a iterable&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  iterable = obj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line">  result = iterable.<span class="title function_">next</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(!result.<span class="property">done</span>)&#123;</span><br><span class="line">    cb &amp;&amp; <span class="title function_">cb</span>(result.<span class="property">value</span>)</span><br><span class="line">    result = iterable.<span class="title function_">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">forOf</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(item)&#125;)</span><br></pre></td></tr></table></figure></div>

<h4 id="实现遍历普通对象"><a href="#实现遍历普通对象" class="headerlink" title="实现遍历普通对象"></a>实现遍历普通对象</h4><p>由于普通对象没有Symbol.iterator属性，故不能使用for…of, 若要使用，则需要先处理</p>
<h5 id="使用Object扩展方法-Object-keys-、Object-values-、Object-entries"><a href="#使用Object扩展方法-Object-keys-、Object-values-、Object-entries" class="headerlink" title="使用Object扩展方法 Object.keys()、Object.values()、Object.entries()"></a>使用Object扩展方法 Object.keys()、Object.values()、Object.entries()</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kobe&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">friends</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;james&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回普通对象的键名组成的数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj))&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// name age friends</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回普通对象的键值组成的数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(obj))&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// kobe 18 [&#123;name: &#x27;james&#x27;&#125;]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回普通对象的键名键值组成的二维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj))&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// [&#x27;name&#x27;, &#x27;kobe&#x27;] [&#x27;age&#x27;, 18] [&#x27;friends&#x27;, [&#123;&#x27;name&#x27;: &#x27;james&#x27;&#125;]]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="生成器函数重新包装"><a href="#生成器函数重新包装" class="headerlink" title="生成器函数重新包装"></a>生成器函数重新包装</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kobe&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">friends</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;james&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">entries</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj))&#123;</span><br><span class="line">    <span class="keyword">yield</span> [key, obj[key]]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> <span class="title function_">entries</span>(obj))&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// [&#x27;name&#x27;, &#x27;kobe&#x27;] [&#x27;age&#x27;, 18] [&#x27;friends&#x27;, [&#123;&#x27;name&#x27;: &#x27;james&#x27;&#125;]]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h5 id="在对象上添加Symbol-iterator属性"><a href="#在对象上添加Symbol-iterator属性" class="headerlink" title="在对象上添加Symbol.iterator属性"></a>在对象上添加Symbol.iterator属性</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kobe&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">friends</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;james&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 这里如果需要使用外卖的作用域this, 需要使用箭头函数</span></span><br><span class="line">    <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> value = <span class="literal">undefined</span>, done = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">if</span> (i &lt; keys.<span class="property">length</span>)&#123;</span><br><span class="line">        value = <span class="variable language_">this</span>[keys[i]]</span><br><span class="line">        done = <span class="literal">false</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> &#123;value, done&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> obj)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h3><p>for…in是ES5的语法，用于遍历可枚举的对象，包括原型</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const obj = &#123;</span><br><span class="line">  name: &#x27;kobe&#x27;,</span><br><span class="line">  age: 18,</span><br><span class="line">  friends: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: &#x27;james&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(const key in obj)&#123;</span><br><span class="line">  console.log(key, &#x27;-&gt;&#x27;, obj[key]) // name -&gt; kobe age -&gt; 18 friends -&gt; [&#123;&#x27;name&#x27;: &#x27;james&#x27;&#125;&#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const obj2 = [1, 2, 3]</span><br><span class="line"></span><br><span class="line">for(const key in obj2)&#123;</span><br><span class="line">  console.log(key, &#x27;-&gt;&#x27;, obj2[key]) // 0 - &gt; 1  1 -&gt; 2  2 -&gt; 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Array.prototype.a = 123</span><br><span class="line">for(const key in obj2)&#123;</span><br><span class="line">  console.log(key, &#x27;-&gt;&#x27;, obj2[key]) // 0 - &gt; 1  1 -&gt; 2  2 -&gt; 3 a -&gt; 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 不获取原型链上的属性</span><br><span class="line">for(const key in obj2)&#123;</span><br><span class="line">  if (obj2.hasOwnProperty(key))&#123;</span><br><span class="line">    console.log(key, &#x27;-&gt;&#x27;, obj2[key]) // 0 - &gt; 1  1 -&gt; 2  2 -&gt; 3</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><code>for in</code>遍历的是数组的索引（即键名），而<code>for of</code>遍历的是数组元素值</p>
<p><code>for in</code>总是得到对象的<code>key</code>或数组、字符串的下标</p>
<p><code>for of</code>总是得到对象的<code>value</code>或数组、字符串的值</p>
<p><code>for...of</code>不能遍历普通Object对象</p>
]]></content>
      <categories>
        <category>开发</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm 使用说明</title>
    <url>/2020/07/15/node/nvm-usage/</url>
    <content><![CDATA[<blockquote>
<p>简介</p>
<p> Nvm （Node Version Manager） 是node.js 的版本管理器，用它可以方便的在机器上安装并维护多个node版本。</p>
</blockquote>
<span id="more"></span>

<h2 id="1、安装和更新"><a href="#1、安装和更新" class="headerlink" title="1、安装和更新"></a>1、安装和更新</h2><h3 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h3><p>  下载并执行</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure></div>

<p>   或者</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure></div>

<p>  然后配置环境变量，将下面的内容添加到配置文件(<code>~/.bash_profile</code>，<code>~/.zshrc</code>，<code>~/.profile</code>，或<code>~/.bashrc</code>)</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="subst">$([ -z <span class="string">&quot;<span class="variable">$&#123;XDG_CONFIG_HOME-&#125;</span>&quot;</span> ] &amp;&amp; printf %s <span class="string">&quot;<span class="variable">$&#123;HOME&#125;</span>/.nvm&quot;</span> || printf %s <span class="string">&quot;<span class="variable">$&#123;XDG_CONFIG_HOME&#125;</span>/nvm&quot;</span>)</span>&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> <span class="comment"># This loads nvm</span></span><br></pre></td></tr></table></figure></div>

<h3 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h3><p> 1、克隆远程仓库到本地</p>
<p> 先 <code>cd ~</code> 切换到家目录， 然后执行<code>git clone https://github.com/nvm-sh/nvm.git .nvm</code></p>
<p> 2、进入到.nvm目录，切换到最近的版本</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.nvm</span><br><span class="line">git checkout v0.35.3</span><br></pre></td></tr></table></figure></div>

<p>3、 激活nvm</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">bash nvm.sh</span><br></pre></td></tr></table></figure></div>

<p>4、 配置环境变量，文件位置同上，导入内容如下</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure></div>

<h3 id="nvm更新"><a href="#nvm更新" class="headerlink" title="nvm更新"></a>nvm更新</h3><p> 1、切换到<code>$NVM_DIR</code> (上面在环境变量中配置过了)</p>
<p> 2、拉取最新的提交节点</p>
<p> 3、切换到最新的版本</p>
<p> 4、激活新版本</p>
<p>可以直接在命令行中执行一下内容</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">  <span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$NVM_DIR</span>&quot;</span></span><br><span class="line">  git fetch --tags origin</span><br><span class="line">  git checkout `git describe --abbrev=0 --tags --match <span class="string">&quot;v[0-9]*&quot;</span> $(git rev-list --tags --max-count=1)`</span><br><span class="line">) &amp;&amp; bash <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="2、相关使用"><a href="#2、相关使用" class="headerlink" title="2、相关使用"></a>2、相关使用</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看已经安装的版本</span></span><br><span class="line">nvm <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看可以安装的所有版本</span></span><br><span class="line">nvm ls-remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有长期支持版本（LTS）</span></span><br><span class="line">nvm ls-remote --lts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看最新lts</span></span><br><span class="line">nvm version-remote --lts    nvm version-remote lts/erbium</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新lts</span></span><br><span class="line">nvm install --lts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装或卸载指定node版本</span></span><br><span class="line">nvm install v12.18.2    nvm uninstall v12.18.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用node</span></span><br><span class="line">nvm use v12.18.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置或取消别名</span></span><br><span class="line">nvm <span class="built_in">alias</span> product v12.18.2     nvm <span class="built_in">unalias</span> product</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装io.js</span></span><br><span class="line">nvm install iojs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看node安装位置</span></span><br><span class="line">nvm <span class="built_in">which</span> v12.18.2</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>





<blockquote>
<p>本文参考地址</p>
<p><a class="link"   href="https://github.com/nvm-sh/nvm" >https://github.com/nvm-sh/nvm <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>开发</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>Nvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise介绍以及使用</title>
    <url>/2023/03/06/node/promise-usage/</url>
    <content><![CDATA[<blockquote>
<p>Promise， “一诺千金”，异步编程的解决方案</p>
</blockquote>
<span id="more"></span>

<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>ES6中的原生内置对象，用来更加优雅地书写复杂的异步任务的代码</p>
<p>promise有三个状态, pending(进行中), fulfilled(成功), rejected(失败)。其状态不受外界影响，只要有异步操作的结果，可以决定当前是什么状态，其他任何操作都无法改变。另外，状态一旦发生变化，就不会再变</p>
<p>状态转换如图所示</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/jingyucute/cdn-assets/picgo/202303070953622.png"
                      alt="Promise状态转换"
                ></p>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)  <span class="comment">// 123</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 三种写法一样，都是返回一个rejected promise</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error_test&#x27;</span>)</span><br><span class="line">  <span class="comment">// resolve(new Error(&#x27;error_test&#x27;))</span></span><br><span class="line">  <span class="comment">// reject(new Error(&#x27;error_test&#x27;))</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p2)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)  </span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p2) <span class="comment">// rejected</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err) <span class="comment">// Error: error_test</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>



<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="promise-prototype-then"><a href="#promise-prototype-then" class="headerlink" title="promise.prototype.then()"></a>promise.prototype.then()</h4><p>Promise实例具有then方法， 起作用就是为Promise实例添加状态改变时的回调函数。</p>
<p>then方法有两个参数,结构为 <code>then((res) =&gt; &#123;&#125;, (err) =&gt; &#123;&#125;)</code>, 这两个参数均为可选, 通常我们不会采用这样的方式，而是将成功和失败的回调分别放入到then和catch中</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">123</span>)</span><br><span class="line">  <span class="comment">// reject(234)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 123</span></span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p><strong>then方法返回值问题</strong></p>
<p>如没有设置返回，或者return一个普通的值或者对象，则返回一个fulfilled状态的promise,</p>
<p>若return 一个promise ， 则then方法也返回一个promise,状态和其一致，但不是同一个对象</p>
<p><em>这样的特性可以实现链式调用</em></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 不显示设置返回值</span></span><br><span class="line"><span class="keyword">const</span> r1 = p1.<span class="title function_">then</span>() </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r1) <span class="comment">// 得到的是一个值为undefined，状态为fulfilld的promise</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 设置普通参数/对象</span></span><br><span class="line"><span class="keyword">const</span> r2 = p1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">456</span></span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">name</span>: <span class="string">&#x27;coder&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r2) <span class="comment">// 值为then中return的参数，状态为fulfilled的参数</span></span><br><span class="line">r2.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 456</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. promise对象</span></span><br><span class="line"><span class="comment">// 3.1 pending</span></span><br><span class="line"><span class="keyword">const</span> p_pending = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line"><span class="keyword">const</span> r3_1 = p1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> p_pending </span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r3_1, r3_1 == p_pending)  <span class="comment">// 状态为pending的promise</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.2 fulfilled </span></span><br><span class="line"><span class="keyword">const</span> p_resolved = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;promise resolve&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> r3_2 = p1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> p_resolved</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r3_2, r3_2 == p_resolved) <span class="comment">// 状态为fulfilled，值为promise resolve 的promise， 和传入的对象不是同一个</span></span><br><span class="line">r3_2.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)  <span class="comment">// promise resolve</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.3 rejected</span></span><br><span class="line"><span class="keyword">const</span> p_rejected = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;promise rejected&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> r3_3 = p1.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> p_rejected</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r3_3, r3_3 == p_rejected) <span class="comment">// 状态为rejected, 返回值为promise rejeced的promise, 和传入参数不是同一个</span></span><br><span class="line">r3_3.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)  </span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)  <span class="comment">// promise rejected</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h4 id="promise-prototype-catch"><a href="#promise-prototype-catch" class="headerlink" title="promise.prototype.catch()"></a>promise.prototype.catch()</h4><p><code>catch((err) =&gt; &#123;&#125;)</code> 是<code>then(null, (err) =&gt; &#123;&#125;)</code>的别名， 当状态由pending变为rejected时，发生的回调</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="number">123</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p><strong>catch方法返回值问题</strong></p>
<p>由于其本质是then,所以返回值上面说的then方法返回值是一样的</p>
<p>这里就不再赘述了。 注意一点， 一定写捕获的方法体</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="number">123</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 不显示设置返回值</span></span><br><span class="line"><span class="keyword">const</span> r1 = p1.<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err) </span><br><span class="line">&#125;) </span><br><span class="line"><span class="comment">// 若写成 const r1 = p1.catch() , 则返回一个rejected的promise</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r1) <span class="comment">// 返回一个fulfilled 状态的promise, 值为undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 设置普通参数/对象</span></span><br><span class="line"><span class="keyword">const</span> r2 = p1.<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">456</span></span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">name</span>: <span class="string">&#x27;coder&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r2) <span class="comment">// 值为catch中return的参数，状态为fulfilled的参数</span></span><br><span class="line">r2.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 456</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. promise对象</span></span><br><span class="line"><span class="comment">// 3.1 pending</span></span><br><span class="line"><span class="keyword">const</span> p_pending = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line"><span class="keyword">const</span> r3_1 = p1.<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> p_pending </span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r3_1, r3_1 == p_pending)  <span class="comment">// 状态为pending的promise</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.2 fulfilled </span></span><br><span class="line"><span class="keyword">const</span> p_resolved = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;promise resolve&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> r3_2 = p1.<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> p_resolved</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r3_2, r3_2 == p_resolved) <span class="comment">// 状态为fulfilled，值为promise resolve 的promise， 和传入的对象不是同一个</span></span><br><span class="line">r3_2.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)  <span class="comment">// promise resolve</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.3 rejected</span></span><br><span class="line"><span class="keyword">const</span> p_rejected = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;promise rejected&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> r3_3 = p1.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> p_rejected</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r3_3, r3_3 == p_rejected) <span class="comment">// 状态为rejected, 返回值为promise rejeced的promise, 和传入参数不是同一个</span></span><br><span class="line">r3_3.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)  </span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)  <span class="comment">// promise rejected</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h4 id="promise-prototype-finally"><a href="#promise-prototype-finally" class="headerlink" title="promise.prototype.finally()"></a>promise.prototype.finally()</h4><p>不管promise最后状态是什么，都会执行的操作， ES2018引入的</p>
<p>finally() 接受一个回调函数， 回调函数中没有参数</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">promise.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">// 语句</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 语句</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 语句</span></span><br><span class="line">    <span class="keyword">throw</span> err</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">123</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="number">456</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p2.<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>finally返回值问题</strong></p>
<p>finally没有特别的返回值， 或者说，返回的是调用finally方法的对象的拷贝对象</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">123</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> r1 = p1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;promise resolve&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="number">456</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> r2 = p2.<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;promise reject&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> r3 = p1.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;promise resolve&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> r4 = p2.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;promise reject&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解释 由于 在调用finally之前，分别调用了 then/catch, 返回的promise就是如下状态，再次调用finally,不会返回我们想要的返回值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r1, r2) <span class="comment">// [fulfilled, undefined] [fulfilled, undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里也就能理解为什么会返回p1, p2 一样的状态了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r3, r4) <span class="comment">// [fulfilled, 123] [rejected, 456]</span></span><br></pre></td></tr></table></figure></div>

<h4 id="promise-resolve"><a href="#promise-resolve" class="headerlink" title="promise.resolve()"></a>promise.resolve()</h4><p>将一个对象包装成一个Promise对象, 关于返回的promise的状态，取决于参数的类型</p>
<p>若使用普通参数，或者不使用参数， 则返回一个fulfilled状态的promise</p>
<p>若参数是一个promise对象，则原封不动的返回这个对象，它是什么状态，返回的就是什么状态</p>
<p>若参数是一个thenable对象， 这回状态一个Promise对象，并立即调用then方法，方法返回的promise对象就是最后返回的promise</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 不使用参数</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p1) <span class="comment">// promise fulfilled </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// undefined</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用普通参数</span></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;coder&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;)</span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p2)   <span class="comment">// fulfiled状态的promise</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)  <span class="comment">// &#123;name: &#x27;coder&#x27;, age: 18&#125;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. thenable对象(含有then方法的对象)</span></span><br><span class="line"><span class="keyword">const</span> p3_1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123;<span class="attr">then</span>: <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;thenable resolve&#x27;</span>)</span><br><span class="line">&#125;&#125;)</span><br><span class="line">p3_1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p3_1) <span class="comment">//fulfiled状态的promise</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// thenable resolve</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p3_2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123;<span class="attr">then</span>: <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;thenable reject&#x27;</span>)</span><br><span class="line">&#125;&#125;)</span><br><span class="line">p3_2.<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p3_2) <span class="comment">// rejected状态的promise</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err) <span class="comment">// thenable reject</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. promise对象</span></span><br><span class="line"><span class="comment">// 4.1 传入pending状态</span></span><br><span class="line"><span class="keyword">const</span> p_pending = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 没有调用 resolve/ reject， 故状态为pending</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p4_1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(p_pending) </span><br><span class="line"><span class="comment">// 说明如参数是promise对象， 则会原封不动的返回这个参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p_pending === p4_1) <span class="comment">// true</span></span><br><span class="line">p4_1.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 没有输出</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err) <span class="comment">// 没有输出</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.2 传入fulfilled状态</span></span><br><span class="line"><span class="keyword">const</span> p_resolved = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;promise resolve&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// const p_resolve = Promise.resolve(&quot;promise resolve&quot;)</span></span><br><span class="line"><span class="keyword">const</span> p4_2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(p_resolved)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p_resolved === p4_2) <span class="comment">// true</span></span><br><span class="line">p4_2.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// promise resolve</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err) <span class="comment">// 没有输出</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.3 传入rejected 状态</span></span><br><span class="line"><span class="keyword">const</span> p_rejected = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;promise reject&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p4_3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(p_rejected)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p_rejected == p4_3) <span class="comment">// true</span></span><br><span class="line">p4_3.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 没有输出</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err) <span class="comment">// promise reject</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h4 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h4><p>创建一个rejected状态的promise, 其状态为rejected,与传入的参数无关</p>
<p>对于传入的参数， Promise.reject 会将其作为 失败的原因返回，在<code>catch((err) =&gt; &#123;&#125;)</code> 中捕获</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 没有参数</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>()</span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 没有数据</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)  <span class="comment">// undefined</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p1) <span class="comment">// rejected</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 普通参数或对象</span></span><br><span class="line"><span class="keyword">const</span> p2_1 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;coder&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;)</span><br><span class="line">p2_1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 没有数据</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)  <span class="comment">// &#123;name: &#x27;coder&#x27;, age: 18&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p2_1) <span class="comment">// rejected</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2_2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error_test&#x27;</span>))  </span><br><span class="line">p2_2.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 没有数据</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)  <span class="comment">// Error: error_test</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p2_2) <span class="comment">// rejected</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Promise对象</span></span><br><span class="line"><span class="comment">// 3.1 pending </span></span><br><span class="line"><span class="keyword">const</span> p_pending = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line"><span class="keyword">const</span> p3_1 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(p_pending)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p3_1 == p_pending) <span class="comment">// false</span></span><br><span class="line">p3_1.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err, p_pending == err) <span class="comment">// promise , true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p3_1)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.2 fulfilled </span></span><br><span class="line"><span class="keyword">const</span> p_resolved = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;promise resolve&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> p3_2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(p_resolved)</span><br><span class="line">p3_2.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p3_2)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err, p_resolved == err) <span class="comment">// promise , true</span></span><br><span class="line">  err.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)  <span class="comment">// promise resolve</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.3 rejected</span></span><br><span class="line"><span class="keyword">const</span> p_rejected = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;promise reject&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> p3_3 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(p_rejected)</span><br><span class="line">p3_3.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p3_3)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err, p_rejected == err) <span class="comment">// promise , true</span></span><br><span class="line">  err.<span class="title function_">catch</span>(<span class="function">(<span class="params">i_err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i_err) <span class="comment">// promise reject</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h4 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h4><p>Promise.all()将多个Promise实例包装成一个Promise,</p>
<p>其接受一个promise实例的数组，返回的Promise实例，它的状态改变规则如下:</p>
<p>只有当数组中的所有实例状态都变为fulfilled,其状态才会改为fulfilled状态,并将所有promise实例的结果作为一个数组返回</p>
<p>当其中存在promise返回值为rejected, 其状态就为rejected, 第一个被rejected的实例的返回值，会被传给Promise实例 </p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;promise p1 resolve&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;promise p2 resolve&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1200</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;promise p3 resolve&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1500</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p4 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;promise p4 reject&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1300</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p5 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;promise p5 reject&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p_all1 = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]) </span><br><span class="line">p_all1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">//  [&#x27;promise p1 resolve&#x27;, &#x27;promise p2 resolve&#x27;, &#x27;promise p3 resolve&#x27;]</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p_all1) <span class="comment">// &#123; fullfiled, Array &#125;</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p_all1)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p_all2 = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p3, p4, p5])</span><br><span class="line">p_all2.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p_all2) </span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err) <span class="comment">// promise p5 reject</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p_all2) <span class="comment">//  &#123;rejected, &#x27;promise p5 reject&#x27;&#125;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p6 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;promise p6 reject&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">800</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p_all3 = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p3, p6])</span><br><span class="line">p_all3.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)  <span class="comment">//  [&#x27;promise p1 resolve&#x27;, &#x27;promise p3 resolve&#x27;, undefined]</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p_all3) <span class="comment">//  &#123; fullfiled, Array &#125;</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err) </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p_all3)</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></div>

<h4 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h4><p>这个方法也是将多个实例，包装成一个Promise实例. 和Promise.all的区别在于，Promise.race更关心哪一个实例先执行完成(无论状态)</p>
<p>多一个实例中，只要有一个实例先完成，则最后返回的实例，就是这个实例的状态和值.  race, 竞争，只关注第一个状态改变</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;promise p1 resolve&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;promise p2 resolve&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1200</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;promise p3 reject&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1100</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p4 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;promise p4 reject&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">800</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p_race1 = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3])</span><br><span class="line">p_race1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// promise p1 resolve</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p_race1, p_race1 == p1) <span class="comment">// false, 说明返回的是一个新的实例</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p_race2 = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p4])</span><br><span class="line">p_race2.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)  <span class="comment">// promise p3 reject</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p_race2, p_race2 == p4) <span class="comment">// false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h4 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any()"></a>Promise.any()</h4><p>这个也是将多个实例包装成一个Promise实例，和Promise.all 的区别在于，这个只需要其中一个实例是fulfilled，最后返回的实例就是fulfilled, 若所有实例是rejected, 则最后返回的就是一个rejected的promise, 参数是一个 AggregateError 实例，它相当于一个数组，每个成员对应一个被rejected的操作所抛出的错误</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;promise p1 resolve&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;promise p2 resolve&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1200</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;promise p3 reject&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1100</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p4 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;promise p4 reject&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">800</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p_any1 = <span class="title class_">Promise</span>.<span class="title function_">any</span>([p1, p3])</span><br><span class="line">p_any1.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// promise p1 resolve</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">errs</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(errs)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p_any2 = <span class="title class_">Promise</span>.<span class="title function_">any</span>([p3, p4])</span><br><span class="line">p_any2.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(results, results <span class="keyword">instanceof</span> <span class="title class_">AggregateError</span>) <span class="comment">// AggregateError: All promises were rejected</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(results.<span class="property">errors</span>) <span class="comment">// [&#x27;promise p3 reject&#x27;, &#x27;promise p4 reject&#x27;]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h4 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled()"></a>Promise.allSettled()</h4><p>将一组实例包装成一个promise实例。只有等到所有这些参数实例都返回结果，不管是fulfilled还是rejected，包装实例才会结束。返回的promise是fulfilled状态，参数为所有实例的状态和值构成的对象的是一个数组</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;promise p1 resolve&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;promise p2 rejected&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;promise p3 rejected&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p_allSettled1 = <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([p1, p2])</span><br><span class="line"><span class="keyword">const</span> p_allSettled2 = <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([p2, p3])</span><br><span class="line"></span><br><span class="line">p_allSettled1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// [ &#123;status: &#x27;fulfilled&#x27;, value: &#x27;promise p1 resolve&#x27;&#125;, &#123;status: &#x27;rejected&#x27;, reason: &#x27;promise p2 rejected&#x27;&#125;]</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p_allSettled2.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// [ &#123;status: &#x27;rejected&#x27;, reason: &#x27;promise p2 rejected&#x27;&#125;, &#123;status: &#x27;rejected&#x27;, reason: &#x27;promise p3 rejected&#x27;&#125;  ]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>





]]></content>
      <categories>
        <category>开发</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>ES</tag>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql基础用法</title>
    <url>/2020/09/12/db/mysql/basic-usage/</url>
    <content><![CDATA[<blockquote>
<p>不知道写啥， 简单记录一下数据库的相关操作吧，结合实例</p>
</blockquote>
<span id="more"></span>

<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ol>
<li><p>用户、权限、密码问题</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 新建用户</span><br><span class="line">CREATE USER &#x27;username&#x27;@&#x27;hostname&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br><span class="line"></span><br><span class="line">-- 修改用户名</span><br><span class="line">UPDATE mysql.`user` set `user` = &#x27;new_username&#x27; WHERE `user` = &#x27;username&#x27;;</span><br><span class="line">RENAME USER &#x27;username&#x27;@&#x27;hostname&#x27; TO &#x27;new_username&#x27;@&#x27;new_hostname&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">-- 用户密码修改</span><br><span class="line">SET PASSWORD FOR (username)=password(&#x27;new_password&#x27;);</span><br><span class="line">UPDATE mysql.`user` set `authentication_string`=password(&#x27;new_password&#x27;) where `user`=&#x27;userna me&#x27;; # 5.7版本后用 authentication_string ，之前是 password字段</span><br><span class="line"># 修改完后 </span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">-- 删除用户</span><br><span class="line">DELETE FROM myql.`user` WHERE `user` = &#x27;username&#x27; AND `host` = &#x27;hostname&#x27;;</span><br><span class="line">DROP USER &#x27;username&#x27;@&#x27;hostname&#x27;;</span><br><span class="line"></span><br><span class="line">-- GRANT 命令格式</span><br><span class="line">GRANT privileges ON databases.tablename TO &#x27;username&#x27;@&#x27;hostname&#x27; [INDENTIFIED BY &#x27;password&#x27;]; </span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"># 当使用 INDENTIFIED BY 时， 没有改用户，则会创建一个用户</span><br><span class="line"></span><br><span class="line">-- 查看用户权限</span><br><span class="line">SHOW GRANTS FOR &#x27;username&#x27;@&#x27;hostname&#x27;;</span><br><span class="line"></span><br><span class="line">-- GRANT 命令创建用户</span><br><span class="line">GRANT (privileges) ON *.* TO &#x27;username&#x27;@&#x27;hostname&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br><span class="line"># eg. grant select on *.* to &#x27;test&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;</span><br><span class="line"># *.* -&gt; database_name.table_name</span><br><span class="line"></span><br><span class="line">-- 设置用户访问权限</span><br><span class="line">GRANT (ALL PRIVILEGES) ON databases.tablename to &#x27;username&#x27;@&#x27;hostname&#x27; [IDENTIFIED BY &#x27;password&#x27;] [WITH GRANT OPTION] ;</span><br><span class="line"># ALL PRIVILEGES 可以替换为 select , update , insert , delete 其中之一或组合, 还有其他的，自己搜吧</span><br><span class="line"># WITH GRANT OPTION 加上表示给改用户添加赋权的权限</span><br><span class="line"># eg. grant select,update on *.* to &#x27;test&#x27;@&#x27;%&#x27; with grant option</span><br><span class="line"></span><br><span class="line">-- 回收权限</span><br><span class="line">REVOKE (ALL PRIVILEGES) ON databases.tablename FROM &#x27;username&#x27;@&#x27;hostname&#x27;</span><br><span class="line"># ALL PRIVILEGES -&gt; select , update , insert , delete and ...</span><br><span class="line"># eg. revoke update, grant option on *.* from &#x27;test&#x27;@&#x27;%&#x27;</span><br></pre></td></tr></table></figure></div>


</li>
<li><p>数据库新建&amp;删除</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查看</span><br><span class="line">SHOW DATABASES;</span><br><span class="line">-- 创建</span><br><span class="line">CREATE  DATABASE `test` DEFAULT CHARACTER SET utf8mb4;</span><br><span class="line">-- 删除</span><br><span class="line">DROP DATABASE `test`</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><blockquote>
<p>说明： 在上面创建的test数据库中创建三张表， teacher(教师表)， students(学生表)， class(班级表)</p>
<p>Teachers (t_id, name, age, sex, email, phone)</p>
<p>Students(stu_id, name, age, sex, class_id) </p>
<p>Class(id, name, t_id)   t_id -&gt; 班主任 name其实可以细化为 年级号、 班号啥的</p>
</blockquote>
<ol>
<li><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- teachers</span><br><span class="line">CREATE TABLE IF NOT EXISTS `teachers`(</span><br><span class="line">	`t_id` INT UNSIGNED  AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">	`name` VARCHAR(30) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">	`sex` TINYINT(1) NOT NULL DEFAULT 0 COMMENT &#x27;0 -&gt; 女; 1 -&gt; 男&#x27;,</span><br><span class="line">	`age` TINYINT NOT NULL DEFAULT 0,</span><br><span class="line">	`phone` VARCHAR(20) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">	`email` VARCHAR(50) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">	`created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">	`updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line">-- class</span><br><span class="line">CREATE TABLE IF NOT EXISTS `class`(</span><br><span class="line">	`id` INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">	`name` VARCHAR(30) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">	`t_id` INT NOT NULL DEFAULT 0,</span><br><span class="line">	`created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">	`updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- students;</span><br><span class="line">CREATE TABLE IF NOT EXISTS `students`(</span><br><span class="line">	`stu_id` INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">	`name` VARCHAR(30) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">	`sex` TINYINT(1) NOT NULL DEFAULT 0 COMMENT &#x27;0 -&gt; 女; 1 -&gt; 男&#x27;,</span><br><span class="line">	`age` TINYINT NOT NULL DEFAULT 0,</span><br><span class="line">	`class_id` INT NOT NULL DEFAULT 0,</span><br><span class="line">	`created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">	`updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 查看创建的表</span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| class          |</span><br><span class="line">| students       |</span><br><span class="line">| teachers       |</span><br><span class="line">+----------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; DESC teachers;</span><br><span class="line">+------------+------------------+------+-----+-------------------+-----------------------------+</span><br><span class="line">| Field      | Type             | Null | Key | Default           | Extra                       |</span><br><span class="line">+------------+------------------+------+-----+-------------------+-----------------------------+</span><br><span class="line">| t_id       | int(10) unsigned | NO   | PRI | NULL              | auto_increment              |</span><br><span class="line">| name       | varchar(30)      | NO   |     |                   |                             |</span><br><span class="line">| sex        | tinyint(1)       | NO   |     | 0                 |                             |</span><br><span class="line">| age        | tinyint(4)       | NO   |     | 0                 |                             |</span><br><span class="line">| phone      | varchar(20)      | NO   |     |                   |                             |</span><br><span class="line">| email      | varchar(50)      | NO   |     |                   |                             |</span><br><span class="line">| created_at | timestamp        | NO   |     | CURRENT_TIMESTAMP |                             |</span><br><span class="line">| updated_at | timestamp        | NO   |     | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |</span><br><span class="line">+------------+------------------+------+-----+-------------------+-----------------------------+</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 改表名</span><br><span class="line">ALTER TABLE `table` RENAME TO `new_table_name`;</span><br><span class="line"></span><br><span class="line">-- 添加字段</span><br><span class="line">ALTER TABLE `table` ADD [COLUMN] `column` ···</span><br><span class="line">-- ALTER TABLE `table_name` ADD COLUMN `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP</span><br><span class="line"></span><br><span class="line">-- 修改字段</span><br><span class="line">ALTER TABLE `table` MODIFY [COLUMN] `column` ···</span><br><span class="line"></span><br><span class="line">-- 字段改名</span><br><span class="line">ALTER TABLE `table` CHANGE `column` `new_column` ···</span><br><span class="line"></span><br><span class="line">-- 删除字段</span><br><span class="line">ALTER TABLE `table` DROP COLUMN `column`</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE `table_name`</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="数据表的操作"><a href="#数据表的操作" class="headerlink" title="数据表的操作"></a>数据表的操作</h3><ul>
<li><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 向teacher表插入数据</span><br><span class="line">INSERT INTO `teachers`(`name`, `sex`, `age`) VALUES (&#x27;teacher1&#x27;, 0, 35),(&#x27;teacher2&#x27;, 0, 30),(&#x27;teacher3&#x27;, 1, 35),(&#x27;teacher4&#x27;, 0, 37),(&#x27;teacher5&#x27;, 0, 35),(&#x27;teacher6&#x27;, 1, 29),</span><br><span class="line">(&#x27;teacher7&#x27;, 0, 35),(&#x27;teacher8&#x27;, 0, 27),(&#x27;teacher9&#x27;, 1, 35),(&#x27;teacher10&#x27;, 0, 43);</span><br><span class="line"></span><br><span class="line">-- 向class表插入数据</span><br><span class="line">INSERT INTO `class`(`name`, `t_id`) VALUES(&#x27;class1&#x27;, 1),(&#x27;class2&#x27;, 7),(&#x27;class3&#x27;, 6),(&#x27;class4&#x27;, 9),(&#x27;class5&#x27;, 4);</span><br><span class="line"></span><br><span class="line">-- 向students表插入数据</span><br><span class="line">INSERT INTO `students`(`name`, `sex`, `age`, `class_id`) VALUES (&#x27;stu1&#x27;, 0, 17, 1),(&#x27;stu2&#x27;, 1, 16, 3),(&#x27;stu3&#x27;, 1, 17, 4),(&#x27;stu4&#x27;, 0, 16, 3),</span><br><span class="line">(&#x27;stu5&#x27;, 0, 17, 3),(&#x27;stu6&#x27;, 1, 17, 5),(&#x27;stu6&#x27;, 0, 16, 3),(&#x27;stu8&#x27;, 1, 18, 2),(&#x27;stu9&#x27;, 0, 17, 3),(&#x27;stu10&#x27;, 1, 16, 4),(&#x27;stu11&#x27;, 1, 17, 3),</span><br><span class="line">(&#x27;stu12&#x27;, 0, 17, 2),(&#x27;stu13&#x27;, 0, 18, 1),(&#x27;stu14&#x27;, 1, 17, 5),(&#x27;stu15&#x27;, 0, 18, 4),(&#x27;stu16&#x27;, 0, 17, 3),(&#x27;stu17&#x27;, 1, 18, 2),(&#x27;stu17&#x27;, 0, 17, 2),</span><br><span class="line">(&#x27;stu19&#x27;, 0, 17, 5),(&#x27;stu20&#x27;, 1, 18, 4),(&#x27;stu21&#x27;, 1, 16, 3),(&#x27;stu22&#x27;, 0, 17, 3),(&#x27;stu23&#x27;, 0, 17, 1),(&#x27;stu24&#x27;, 1, 16, 3),(&#x27;stu25&#x27;, 1, 17, 1),</span><br><span class="line">(&#x27;stu26&#x27;, 0, 18, 3),(&#x27;stu27&#x27;, 1, 17, 4),(&#x27;stu28&#x27;, 0, 16, 3),(&#x27;stu29&#x27;, 0, 17, 4),(&#x27;stu39&#x27;, 1, 18, 3);</span><br><span class="line"></span><br><span class="line">-- 创建好的表， 自己做一个备份吧，后面可能要还原数据</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 简单删除</span><br><span class="line">DELETE FROM teachers WHERE t_id = 10;</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 简单更改</span><br><span class="line">UPDATE `teachers` SET email = &#x27;test@gmail.com&#x27; WHERE `name` = &#x27;teacher3&#x27;</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 简单查询</span><br><span class="line">SELECT * FROM `teachers`; </span><br><span class="line"></span><br><span class="line">SELECT `name`, class_id FROM `students`;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="按需完成相关操作"><a href="#按需完成相关操作" class="headerlink" title="按需完成相关操作"></a>按需完成相关操作</h3><ol>
<li><p>查询每个班的班主任信息</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM `teachers` WHERE t_id IN (</span><br><span class="line">   SELECT t_id FROM `class` </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">SELECT teachers.* FROM `class` JOIN `teachers` on class.t_id = `teachers`.t_id ;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查询每个班的人数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT a.id, a.`name`, count(b.class_id) FROM `class` AS a  LEFT JOIN `students` AS b ON a.id = b.class_id GROUP BY a.id ;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查询每个班主任所带班级的平均年龄, 包括班主任信息</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT a.t_id, a.`name`, a.`age`, a.`sex`, a.`email`, a.`phone`, b.`name` as class_name, avg(c.`age`) as class_avg_age FROM `teachers` as a</span><br><span class="line">JOIN `class` as b on a.t_id = b.t_id</span><br><span class="line">JOIN `students` as c on b.id = c.class_id</span><br><span class="line">GROUP BY a.t_id,b.id ;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>将teacher4老师所带班级的名叫stu6的学生的年纪修改为18岁</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 多表连接更新</span><br><span class="line">UPDATE teachers as a </span><br><span class="line">JOIN class as b on a.t_id = b.t_id</span><br><span class="line">JOIN students as c on b.id = c.class_id</span><br><span class="line">SET c.age = 18</span><br><span class="line">WHERE a.`name` = &#x27;teacher4&#x27; and c.`name` = &#x27;stu6&#x27;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>将teacher6老师所带班级的名叫stu39的学生的记录删除</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 多表连接删除</span><br><span class="line">DELETE c from teachers as a </span><br><span class="line">JOIN class as b on a.t_id = b.t_id</span><br><span class="line">JOIN students as c on b.id = c.class_id</span><br><span class="line">WHERE a.`name` = &#x27;teacher6&#x27; and c.`name` = &#x27;stu39&#x27;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<blockquote>
<p>mmp ， 先写这么多吧，后面用到了在加上。</p>
</blockquote>
]]></content>
      <categories>
        <category>开发</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql中的时间函数以及格式问题</title>
    <url>/2020/09/14/db/mysql/time-func/</url>
    <content><![CDATA[<blockquote>
<p>之前在开发过程中， 碰到数据库关于时间的问题，总是要去搜索一下， 自己简单记录一下常用的吧，后面遇到啥新鲜的玩意， 再加上。</p>
</blockquote>
<span id="more"></span>


<h3 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h3><ul>
<li><h4 id="获取当前日期和时间"><a href="#获取当前日期和时间" class="headerlink" title="获取当前日期和时间"></a>获取当前日期和时间</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT CURDATE(), CURRENT_DATE, CURTIME(), CURRENT_TIME;</span><br><span class="line">+------------+--------------+-----------+--------------+</span><br><span class="line">| CURDATE()  | CURRENT_DATE | CURTIME() | CURRENT_TIME |</span><br><span class="line">+------------+--------------+-----------+--------------+</span><br><span class="line">| 2020-09-14 | 2020-09-14   | 14:34:00  | 14:34:00     |</span><br><span class="line">+------------+--------------+-----------+--------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT NOW(), CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP;</span><br><span class="line">+---------------------+---------------------+---------------------+</span><br><span class="line">| NOW()               | CURRENT_TIMESTAMP() | CURRENT_TIMESTAMP   |</span><br><span class="line">+---------------------+---------------------+---------------------+</span><br><span class="line">| 2020-09-14 14:35:23 | 2020-09-14 14:35:23 | 2020-09-14 14:35:23 |</span><br><span class="line">+---------------------+---------------------+---------------------+</span><br><span class="line"></span><br><span class="line">-- 获取系统时间</span><br><span class="line">mysql&gt; SELECT SYSDATE();</span><br><span class="line">+---------------------+</span><br><span class="line">| SYSDATE()           |</span><br><span class="line">+---------------------+</span><br><span class="line">| 2020-09-14 15:20:25 |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="获取当前时间的各个信息，如月份、一年第几周"><a href="#获取当前时间的各个信息，如月份、一年第几周" class="headerlink" title="获取当前时间的各个信息，如月份、一年第几周"></a>获取当前时间的各个信息，如月份、一年第几周</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT WEEK(NOW()), WEEK(&#x27;2020-01-01&#x27;), DAY(CURRENT_TIMESTAMP()), DAY(&#x27;2019-12-12 13:23:57&#x27;), YEAR(NOW()), MONTH(NOW());</span><br><span class="line">+-------------+--------------------+--------------------------+----------------------------+-------------+--------------+</span><br><span class="line">| WEEK(NOW()) | WEEK(&#x27;2020-01-01&#x27;) | DAY(CURRENT_TIMESTAMP()) | DAY(&#x27;2019-12-12 13:23:57&#x27;) | YEAR(NOW()) | MONTH(NOW()) |</span><br><span class="line">+-------------+--------------------+--------------------------+----------------------------+-------------+--------------+</span><br><span class="line">|          37 |                  0 |                       14 |                         12 |        2020 |            9 |</span><br><span class="line">+-------------+--------------------+--------------------------+----------------------------+-------------+--------------+</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="关于时间戳转换"><a href="#关于时间戳转换" class="headerlink" title="关于时间戳转换"></a>关于时间戳转换</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT UNIX_TIMESTAMP(), UNIX_TIMESTAMP(&#x27;2020-05-01 13:29:57&#x27;), FROM_UNIXTIME(1600066964), FROM_UNIXTIME(1600066964, &#x27;%m/%d/%Y&#x27;);</span><br><span class="line">+------------------+---------------------------------------+---------------------------+---------------------------------------+</span><br><span class="line">| UNIX_TIMESTAMP() | UNIX_TIMESTAMP(&#x27;2020-05-01 13:29:57&#x27;) | FROM_UNIXTIME(1600066964) | FROM_UNIXTIME(1600066964, &#x27;%m/%d/%Y&#x27;) |</span><br><span class="line">+------------------+---------------------------------------+---------------------------+---------------------------------------+</span><br><span class="line">|       1600067106 |                            1588310997 | 2020-09-14 15:02:44       | 09/14/2020                            |</span><br><span class="line">+------------------+---------------------------------------+---------------------------+---------------------------------------+</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="自己提取时间中的信息"><a href="#自己提取时间中的信息" class="headerlink" title="自己提取时间中的信息"></a>自己提取时间中的信息</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 格式 SELECT EXTRACT(unit FROM date)</span><br><span class="line">-- eg.SELECT EXTRACT((SECOND|MINUTE|HOUR|DAY|WEEK|MONTH|YEAR|MICROSECOND|YEAR_DAY) FROM NOW())</span><br><span class="line">mysql&gt; select extract(MONTH FROM NOW()), EXTRACT(YEAR FROM &#x27;2019-12-31&#x27;), EXTRACT(YEAR_MONTH FROM &#x27;2019-12-31&#x27;);</span><br><span class="line">+---------------------------+---------------------------------+---------------------------------------+</span><br><span class="line">| extract(MONTH FROM NOW()) | EXTRACT(YEAR FROM &#x27;2019-12-31&#x27;) | EXTRACT(YEAR_MONTH FROM &#x27;2019-12-31&#x27;) |</span><br><span class="line">+---------------------------+---------------------------------+---------------------------------------+</span><br><span class="line">|                         9 |                            2019 |                                201912 |</span><br><span class="line">+---------------------------+---------------------------------+---------------------------------------+</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="日期运算"><a href="#日期运算" class="headerlink" title="日期运算"></a>日期运算</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- DATE_ADD(date,INTERVAL expr type) 日期加上时间区间</span><br><span class="line">-- eg. DATE_ADD(now(), INTERVAL expr(YEAR|DAY|...|YEAR_MONTH|DAY_HOUR|DAY_MINUTE|DAY_SECOND|HOUR_SECOND))</span><br><span class="line">mysql&gt;  SELECT DATE_ADD(&#x27;2020-05-01 00:01:01&#x27;, interval &#x27;1 1:20:29&#x27; day_second);</span><br><span class="line">+------------------------------------------------------------------+</span><br><span class="line">| DATE_ADD(&#x27;2020-05-01 00:01:01&#x27;, interval &#x27;1 1:20:29&#x27; day_second) |</span><br><span class="line">+------------------------------------------------------------------+</span><br><span class="line">| 2020-05-02 01:21:30                                              |</span><br><span class="line">+------------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">-- DATE_SUB(date,INTERVAL expr type) 日期减去时间区间</span><br><span class="line">mysql&gt;  SELECT DATE_SUB(&#x27;2020-05-02 01:21:30 &#x27;, interval &#x27;1 1:20:29&#x27; day_second);</span><br><span class="line">+-------------------------------------------------------------------+</span><br><span class="line">| DATE_SUB(&#x27;2020-05-02 01:21:30 &#x27;, interval &#x27;1 1:20:29&#x27; day_second) |</span><br><span class="line">+-------------------------------------------------------------------+</span><br><span class="line">| 2020-05-01 00:01:01                                               |</span><br><span class="line">+-------------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">-- DATEDIFF(date1, date2) 日期相减</span><br><span class="line">mysql&gt; SELECT DATEDIFF(&#x27;2020-05-03&#x27;, &#x27;2020-05-01&#x27;), DATEDIFF(&#x27;2020-05-03 12:23:33&#x27;, &#x27;2020-05-01 12:22:33&#x27;);</span><br><span class="line">+--------------------------------------+--------------------------------------------------------+</span><br><span class="line">| DATEDIFF(&#x27;2020-05-03&#x27;, &#x27;2020-05-01&#x27;) | DATEDIFF(&#x27;2020-05-03 12:23:33&#x27;, &#x27;2020-05-01 12:22:33&#x27;) |</span><br><span class="line">+--------------------------------------+--------------------------------------------------------+</span><br><span class="line">|                                    2 |                                                      2 |</span><br><span class="line">+--------------------------------------+--------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">-- TIMEDIFF(time1, time2)</span><br><span class="line">-- 注意两个日期类型的相减，默认是0</span><br><span class="line">mysql&gt; SELECT  TIMEDIFF(&#x27;12:23:33&#x27;, &#x27;12:22:23&#x27;),TIMEDIFF(&#x27;2020-05-03&#x27;, &#x27;2020-05-01&#x27;), TIMEDIFF(&#x27;2020-05-03 12:23:33&#x27;, &#x27;2020-05-01 12:22:33&#x27;);</span><br><span class="line">+----------------------------------+--------------------------------------+--------------------------------------------------------+</span><br><span class="line">| TIMEDIFF(&#x27;12:23:33&#x27;, &#x27;12:22:23&#x27;) | TIMEDIFF(&#x27;2020-05-03&#x27;, &#x27;2020-05-01&#x27;) | TIMEDIFF(&#x27;2020-05-03 12:23:33&#x27;, &#x27;2020-05-01 12:22:33&#x27;) |</span><br><span class="line">+----------------------------------+--------------------------------------+--------------------------------------------------------+</span><br><span class="line">| 00:01:10                         | 00:00:00                             | 48:01:00                                               |</span><br><span class="line">+----------------------------------+--------------------------------------+--------------------------------------------------------+</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="时间格式转化"><a href="#时间格式转化" class="headerlink" title="时间格式转化"></a>时间格式转化</h3><ul>
<li><h4 id="STR-TO-DATE"><a href="#STR-TO-DATE" class="headerlink" title="STR_TO_DATE()"></a>STR_TO_DATE()</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 将字符串格式的时间转化为日期类型</span><br><span class="line">-- STR_TO_DATE(str, format)</span><br><span class="line">mysql&gt; SELECT  STR_TO_DATE(&#x27;08,23,20&#x27;, &#x27;%m,%d,%y&#x27;) , STR_TO_DATE(&#x27;05/21/2020 12:23:33&#x27;, &#x27;%m/%d/%Y %H:%i:%s&#x27;), STR_TO_DATE(&#x27;21,5,2020 extra characters&#x27;,&#x27;%d,%m,%Y&#x27;);</span><br><span class="line">+-------------------------------------+---------------------------------------------------------+------------------------------------------------------+</span><br><span class="line">| STR_TO_DATE(&#x27;08,23,20&#x27;, &#x27;%m,%d,%y&#x27;) | STR_TO_DATE(&#x27;05/21/2020 12:23:33&#x27;, &#x27;%m/%d/%Y %H:%i:%s&#x27;) | STR_TO_DATE(&#x27;21,5,2020 extra characters&#x27;,&#x27;%d,%m,%Y&#x27;) |</span><br><span class="line">+-------------------------------------+---------------------------------------------------------+------------------------------------------------------+</span><br><span class="line">| 2020-08-23                          | 2020-05-21 12:23:33                                     | 2020-05-21                                           |</span><br><span class="line">+-------------------------------------+---------------------------------------------------------+------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">-- 看看格式化值为NULL的例子</span><br><span class="line">mysql&gt; SELECT STR_TO_DATE(&#x27;2020&#x27;,&#x27;%Y&#x27;), STR_TO_DATE(&#x27;202005&#x27;, &quot;%Y%m&quot;) , STR_TO_DATE(&#x27;11&#x27;, &#x27;%h&#x27;), STR_TO_DATE(&#x27;122223&#x27;, &#x27;%H%i%s&#x27;);</span><br><span class="line">+--------------------------+-------------------------------+-------------------------+---------------------------------+</span><br><span class="line">| STR_TO_DATE(&#x27;2020&#x27;,&#x27;%Y&#x27;) | STR_TO_DATE(&#x27;202005&#x27;, &quot;%Y%m&quot;) | STR_TO_DATE(&#x27;11&#x27;, &#x27;%h&#x27;) | STR_TO_DATE(&#x27;122223&#x27;, &#x27;%H%i%s&#x27;) |</span><br><span class="line">+--------------------------+-------------------------------+-------------------------+---------------------------------+</span><br><span class="line">| NULL                     | NULL                          | NULL                    | NULL                            |</span><br><span class="line">+--------------------------+-------------------------------+-------------------------+---------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="DATE-FROMAT"><a href="#DATE-FROMAT" class="headerlink" title="DATE_FROMAT()"></a>DATE_FROMAT()</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 将标准格式转化为自己想要的格式</span><br><span class="line">-- DATE_FORMAT(date, format)</span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(now(), &#x27;%m/%d/%Y&#x27;), DATE_FORMAT(&#x27;2019-05-01 12:22:33&#x27;, &#x27;%m,%d,%Y, %H-%i-%s&#x27;);</span><br><span class="line">+--------------------------------+----------------------------------------------------------+</span><br><span class="line">| DATE_FORMAT(now(), &#x27;%m/%d/%Y&#x27;) | DATE_FORMAT(&#x27;2019-05-01 12:22:33&#x27;, &#x27;%m,%d,%Y, %H-%i-%s&#x27;) |</span><br><span class="line">+--------------------------------+----------------------------------------------------------+</span><br><span class="line">| 09/14/2020                     | 05,01,2019, 12-22-33                                     |</span><br><span class="line">+--------------------------------+----------------------------------------------------------+</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 基础</title>
    <url>/2020/10/01/db/redis/basic-usage/</url>
    <content><![CDATA[<blockquote>
<p>简单记录redis的一些基础用法</p>
</blockquote>
<span id="more"></span>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ubuntu</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt install redis-server</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译安装</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget http://download.redis.io/releases/redis-6.0.8.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar xzf redis-6.0.8.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> redis-6.0.8</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br></pre></td></tr></table></figure></div>

<h3 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a>Redis 数据类型</h3><ul>
<li><h4 id="string-字符串"><a href="#string-字符串" class="headerlink" title="string(字符串)"></a>string(字符串)</h4><p>Redis的字符串是动态字符串，可以修改的，内部结构的实现类似于Java的ArrayList，采用预分配的方式。</p>
<p>当字符串的藏毒小于1MB时， 扩容都是加倍现有的空间。当超过1MB时， 扩容时只会多扩容1MB的空间。</p>
<p><u>字符串最大长度为512MB</u></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name &quot;jingyu.life&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;jingyu.life&quot;</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="list-列表"><a href="#list-列表" class="headerlink" title="list(列表)"></a>list(列表)</h4><p>Redis的列表相当于Java中的LinkedList，是一个链表。插入和删除都非常快， 但是索引定位很慢。Redis列表结构常用来做异步队列。</p>
<p>列表最多可存储 2<sup>32</sup> - 1 元素 (4294967295, 每个列表可存储40多亿)</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 队列 右进左出</span><br><span class="line">127.0.0.1:6379&gt; rpush books java python php shell</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; llen books</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; lpop books</span><br><span class="line">&quot;java&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange books 0 -1</span><br><span class="line">1) &quot;python&quot;</span><br><span class="line">2) &quot;php&quot;</span><br><span class="line">3) &quot;shell&quot;</span><br><span class="line"># 栈 右进右出</span><br><span class="line">127.0.0.1:6379&gt; rpush books java python php shell</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; rpop books</span><br><span class="line">&quot;shell&quot;</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="hash-字典"><a href="#hash-字典" class="headerlink" title="hash(字典)"></a>hash(字典)</h4><p>Redis的字典相当于Java中的HashMap, 是一个无序键值对集，hash特别适合用于存储对象。</p>
<p>每个 hash 可以存储2<sup>32</sup> - 1键值对。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset books java &quot;think in java&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset books python &quot;python cookbook&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall books</span><br><span class="line">1) &quot;java&quot;</span><br><span class="line">2) &quot;think in java&quot;</span><br><span class="line">3) &quot;python&quot;</span><br><span class="line">4) &quot;python cookbook&quot;</span><br><span class="line"># key value 交替出现</span><br><span class="line">127.0.0.1:6379&gt; hlen books</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; hmset books java &quot;effective java&quot; python &quot;learning python&quot;</span><br><span class="line">OK</span><br><span class="line"># 批量set</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="set-集合"><a href="#set-集合" class="headerlink" title="set(集合)"></a>set(集合)</h4><p>Redis的集合相当于Java中的HashSet, 无序键值对。内部实现相当于一个特殊的字典， 所有的value都是一个值NULL。集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p>
<p>集合中最大的成员数为2<sup>32</sup> - 1</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd books python</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd books python</span><br><span class="line">(integer) 0</span><br><span class="line"># 重复添加</span><br><span class="line">127.0.0.1:6379&gt; sadd books java php</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; smembers books</span><br><span class="line">1) &quot;php&quot;</span><br><span class="line">2) &quot;java&quot;</span><br><span class="line">3) &quot;python&quot;</span><br><span class="line">127.0.0.1:6379&gt; sismember books java</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; scard books</span><br><span class="line">(integer) 3</span><br><span class="line"># 获取长度</span><br><span class="line">127.0.0.1:6379&gt; spop books</span><br><span class="line">&quot;python&quot;</span><br><span class="line"># 弹出一个</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="zset-有序集合"><a href="#zset-有序集合" class="headerlink" title="zset(有序集合)"></a>zset(有序集合)</h4><p>zset是redis提供的最有特色的数据结构，它类似于Java的SortedSet和HashMap的结合体。每个元素都会关联一个double类型的分数，分数(score)代表元素的排序权重。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd book 9.0 &quot;think in java&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; del book</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd books 9.0 &quot;think in java&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd books 8.9 &quot;java cookbook&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd books 8.6 &quot;java concurrency&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange books 0 -1</span><br><span class="line">1) &quot;java concurrency&quot;</span><br><span class="line">2) &quot;java cookbook&quot;</span><br><span class="line">3) &quot;think in java&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrevrange books 0 -1</span><br><span class="line">1) &quot;think in java&quot;</span><br><span class="line">2) &quot;java cookbook&quot;</span><br><span class="line">3) &quot;java concurrency&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore books -inf 8.91 withscores</span><br><span class="line">1) &quot;java concurrency&quot;</span><br><span class="line">2) &quot;8.5999999999999996&quot;</span><br><span class="line">3) &quot;java cookbook&quot;</span><br><span class="line">4) &quot;8.9000000000000004&quot;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="Redis相关命令"><a href="#Redis相关命令" class="headerlink" title="Redis相关命令"></a>Redis相关命令</h3><ul>
<li><h4 id="redis相关设置"><a href="#redis相关设置" class="headerlink" title="redis相关设置"></a>redis相关设置</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config set requirepass test123</span><br><span class="line">127.0.0.1:6379&gt; auth test123</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1) &quot;requirepass&quot;</span><br><span class="line">2) &quot;test123&quot;</span><br><span class="line"># 如果配置文件中没添加密码 那么redis重启后，密码失效</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; info</span><br><span class="line"># 查看相关信息</span><br><span class="line"></span><br><span class="line"># 查看数据的数量</span><br><span class="line">localhost:6379&gt; config get databases</span><br><span class="line">1) &quot;databases&quot;</span><br><span class="line">2) &quot;16&quot;  # 16个数据库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="连接到redis服务"><a href="#连接到redis服务" class="headerlink" title="连接到redis服务"></a>连接到redis服务</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 格式 $ redis-cli -h host -p port -a password</span><br><span class="line">$ redis-cli -h 127.0.0.1 -p 6379 -a &quot;test123&quot;</span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="key相关命令"><a href="#key相关命令" class="headerlink" title="key相关命令"></a>key相关命令</h4><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">命令及描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">DEL key <br />该命令用于在 key 存在是删除 key。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">DUMP key <br />序列化给定 key ，并返回被序列化的值。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">EXISTS key<br /> 检查给定 key 是否存在。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">EXPIRE key seconds <br />为给定 key 设置过期时间。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">EXPIREAT key timestamp <br />EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">PEXPIRE key milliseconds <br />设置 key 的过期时间亿以毫秒计。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">PEXPIREAT key milliseconds-timestamp <br />设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">KEYS pattern <br />查找所有符合给定模式( pattern)的 key 。</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">MOVE key db <br />将当前数据库的 key 移动到给定的数据库 db 当中。</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left">PERSIST key <br />移除 key 的过期时间，key 将持久保持。</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left">PTTL key <br />以毫秒为单位返回 key 的剩余的过期时间。</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left">TTL key <br />以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left">RANDOMKEY <br />从当前数据库中随机返回一个 key 。</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left">RENAME key newkey <br />修改 key 的名称</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left">RENAMENX key newkey <br />仅当 newkey 不存在时，将 key 改名为 newkey 。</td>
</tr>
<tr>
<td align="left">16</td>
<td align="left">TYPE key <br />返回 key 所储存的值的类型。</td>
</tr>
</tbody></table>
</li>
<li><h4 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h4><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">命令及描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">SET key value <br />设置指定 key 的值</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">GET key <br />获取指定 key 的值。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">GETRANGE key start end <br />返回 key 中字符串值的子字符</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">GETSET key value <br />将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">GETBIT key offset <br />对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">MGET key1 [key2..]<br /> 获取所有(一个或多个)给定 key 的值。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">SETBIT key offset value <br />对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">SETEX key seconds value <br />将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">SETNX key value <br />只有在 key 不存在时设置 key 的值。</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left">SETRANGE key offset value <br />用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left">STRLEN key <br />返回 key 所储存的字符串值的长度。</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left">MSET key value [key value …] <br />同时设置一个或多个 key-value 对。</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left">MSETNX key value [key value …] <br />同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left">PSETEX key milliseconds value <br />这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left">INCR key <br />将 key 中储存的数字值增一。</td>
</tr>
<tr>
<td align="left">16</td>
<td align="left">INCRBY key increment <br />将 key 所储存的值加上给定的增量值（increment） 。</td>
</tr>
<tr>
<td align="left">17</td>
<td align="left">INCRBYFLOAT key increment <br />将 key 所储存的值加上给定的浮点增量值（increment） 。</td>
</tr>
<tr>
<td align="left">18</td>
<td align="left">DECR key <br />将 key 中储存的数字值减一。</td>
</tr>
<tr>
<td align="left">19</td>
<td align="left">DECRBY key decrement key <br />所储存的值减去给定的减量值（decrement） 。</td>
</tr>
<tr>
<td align="left">20</td>
<td align="left">APPEND key value <br />如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。</td>
</tr>
</tbody></table>
</li>
<li><h4 id="字典-hash"><a href="#字典-hash" class="headerlink" title="字典(hash)"></a>字典(hash)</h4><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">命令及描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">HDEL key field2 [field2] <br />删除一个或多个哈希表字段</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">HEXISTS key field <br />查看哈希表 key 中，指定的字段是否存在。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">HGET key field <br />获取存储在哈希表中指定字段的值&#x2F;td&gt;</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">HGETALL key <br />获取在哈希表中指定 key 的所有字段和值</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">HINCRBY key field increment <br />为哈希表 key 中的指定字段的整数值加上增量 increment 。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">HINCRBYFLOAT key field increment <br />为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">HKEYS key <br />获取所有哈希表中的字段</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">HLEN key <br />获取哈希表中字段的数量</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">HMGET key field1 [field2] <br />获取所有给定字段的值</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left">HMSET key field1 value1 [field2 value2 ] <br />同时将多个 field-value (域-值)对设置到哈希表 key 中。</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left">HSET key field value <br />将哈希表 key 中的字段 field 的值设为 value 。</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left">HSETNX key field value <br />只有在字段 field 不存在时，设置哈希表字段的值。</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left">HVALS key<br /> 获取哈希表中所有值</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left">HSCAN key cursor [MATCH pattern] [COUNT count] <br />迭代哈希表中的键值对。</td>
</tr>
</tbody></table>
</li>
<li><h4 id="列表-list"><a href="#列表-list" class="headerlink" title="列表(list)"></a>列表(list)</h4><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">命令及描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">BLPOP key1 [key2 ] timeout <br />移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">BRPOP key1 [key2 ] timeout <br />移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">BRPOPLPUSH source destination timeout <br />从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">LINDEX key index <br />通过索引获取列表中的元素</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">LINSERT key BEFORE|AFTER pivot value <br />在列表的元素前或者后插入元素</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">LLEN key <br />获取列表长度</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">LPOP key <br />移出并获取列表的第一个元素</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">LPUSH key value1 [value2] <br />将一个或多个值插入到列表头部</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">LPUSHX key value <br />将一个或多个值插入到已存在的列表头部</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left">LRANGE key start stop <br />获取列表指定范围内的元素</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left">LREM key count value <br />移除列表元素</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left">LSET key index value <br />通过索引设置列表元素的值</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left">LTRIM key start stop <br />对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left">RPOP key <br />移除并获取列表最后一个元素</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left">RPOPLPUSH source destination <br />移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td>
</tr>
<tr>
<td align="left">16</td>
<td align="left">RPUSH key value1 [value2] <br />在列表中添加一个或多个值</td>
</tr>
<tr>
<td align="left">17</td>
<td align="left">RPUSHX key value <br />为已存在的列表添加值</td>
</tr>
</tbody></table>
</li>
<li><h4 id="集合-set"><a href="#集合-set" class="headerlink" title="集合(set)"></a>集合(set)</h4><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">命令及描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">SADD key member1 [member2] <br />向集合添加一个或多个成员</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">SCARD key <br />获取集合的成员数</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">SDIFF key1 [key2] <br />返回给定所有集合的差集</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">SDIFFSTORE destination key1 [key2] <br />返回给定所有集合的差集并存储在 destination 中</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">SINTER key1 [key2] <br />返回给定所有集合的交集</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">SINTERSTORE destination key1 [key2] <br />返回给定所有集合的交集并存储在 destination 中</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">SISMEMBER key member <br />判断 member 元素是否是集合 key 的成员</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">SMEMBERS key <br />返回集合中的所有成员</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">SMOVE source destination member <br />将 member 元素从 source 集合移动到 destination 集合</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left">SPOP key <br />移除并返回集合中的一个随机元素</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left">SRANDMEMBER key [count] <br />返回集合中一个或多个随机数</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left">SREM key member1 [member2] <br />移除集合中一个或多个成员</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left">SUNION key1 [key2] <br />返回所有给定集合的并集</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left">SUNIONSTORE destination key1 [key2] <br />所有给定集合的并集存储在 destination 集合中</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left">SSCAN key cursor [MATCH pattern] [COUNT count] <br />迭代集合中的元素</td>
</tr>
</tbody></table>
</li>
<li><h4 id="有序集合-zset"><a href="#有序集合-zset" class="headerlink" title="有序集合(zset)"></a>有序集合(zset)</h4><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">命令及描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">ZADD key score1 member1 [score2 member2] <br />向有序集合添加一个或多个成员，或者更新已存在成员的分数</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">ZCARD key <br />获取有序集合的成员数</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">ZCOUNT key min max<br />计算在有序集合中指定区间分数的成员数</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">ZINCRBY key increment member <br />有序集合中对指定成员的分数加上增量 increment</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">ZINTERSTORE destination numkeys key [key …] <br />计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">ZLEXCOUNT key min max <br />在有序集合中计算指定字典区间内成员数量</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">ZRANGE key start stop [WITHSCORES] <br />通过索引区间返回有序集合成指定区间内的成员</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">ZRANGEBYLEX key min max [LIMIT offset count] <br />通过字典区间返回有序集合的成员</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] <br />通过分数返回有序集合指定区间内的成员</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left">ZRANK key member <br />返回有序集合中指定成员的索引</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left">ZREM key member [member …] <br />移除有序集合中的一个或多个成员</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left">ZREMRANGEBYLEX key min max <br />移除有序集合中给定的字典区间的所有成员</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left">ZREMRANGEBYRANK key start stop <br />移除有序集合中给定的排名区间的所有成员</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left">ZREMRANGEBYSCORE key min max <br />移除有序集合中给定的分数区间的所有成员</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left">ZREVRANGE key start stop [WITHSCORES] <br />返回有序集中指定区间内的成员，通过索引，分数从高到底</td>
</tr>
<tr>
<td align="left">16</td>
<td align="left">ZREVRANGEBYSCORE key max min [WITHSCORES] <br />返回有序集中指定分数区间内的成员，分数从高到低排序</td>
</tr>
<tr>
<td align="left">17</td>
<td align="left">ZREVRANK key member <br />返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td>
</tr>
<tr>
<td align="left">18</td>
<td align="left">ZSCORE key member <br />返回有序集中，成员的分数值</td>
</tr>
<tr>
<td align="left">19</td>
<td align="left">ZUNIONSTORE destination numkeys key [key …] <br />计算给定的一个或多个有序集的并集，并存储在新的 key 中</td>
</tr>
<tr>
<td align="left">20</td>
<td align="left">ZSCAN key cursor [MATCH pattern] [COUNT count] <br />迭代有序集合中的元素（包括元素成员和元素分值）</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
</search>
